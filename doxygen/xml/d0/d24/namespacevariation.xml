<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d0/d24/namespacevariation" kind="namespace" language="C++">
    <compoundname>variation</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d0/d24/namespacevariation_1ace95ad8220efc40e8d89096ce61e6e60" prot="public" static="no">
        <type>tree&lt; Node &gt;::pre_order_iterator</type>
        <definition>typedef tree&lt;Node&gt;::pre_order_iterator variation::Iter</definition>
        <argsstring></argsstring>
        <name>Iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="30" column="35" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d24/namespacevariation_1a170515efe6144a099812fc284c2ae10b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool variation::point_mutation</definition>
        <argsstring>(tree&lt; Node &gt; &amp;Tree, Iter spot, const SearchSpace &amp;SS)</argsstring>
        <name>point_mutation</name>
        <param>
          <type>tree&lt; Node &gt; &amp;</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="d0/d24/namespacevariation_1ace95ad8220efc40e8d89096ce61e6e60" kindref="member">Iter</ref></type>
          <declname>spot</declname>
        </param>
        <param>
          <type>const SearchSpace &amp;</type>
          <declname>SS</declname>
        </param>
        <briefdescription>
<para>replace node with same typed node </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the program tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spot</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to the node that is being mutated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SS</parametername>
</parameternamelist>
<parameterdescription>
<para>the search space to sample a node like <computeroutput>spot</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean indicating the success (true) or fail (false) of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="37" column="13" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="37" bodyend="52"/>
        <references refid="d4/dc3/structBrush_1_1SearchSpace_1a14a4a3b020ec50ee277dfe07bc36f608" compoundref="d9/d99/search__space_8h" startline="502" endline="521">Brush::SearchSpace::get_node_like</references>
        <references refid="dc/d5c/namespaceBrush_1ae41500fed38676f34a4d476a992d585d">Brush::SS</references>
        <referencedby refid="d0/d24/namespacevariation_1a3ceab1ae0c739084852ef04ebda17d6a" compoundref="d4/d1f/variation_8h" startline="223" endline="295">mutate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d24/namespacevariation_1ad562aad1d00786b26a704f6b8db751c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool variation::insert_mutation</definition>
        <argsstring>(tree&lt; Node &gt; &amp;Tree, Iter spot, const SearchSpace &amp;SS)</argsstring>
        <name>insert_mutation</name>
        <param>
          <type>tree&lt; Node &gt; &amp;</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="d0/d24/namespacevariation_1ace95ad8220efc40e8d89096ce61e6e60" kindref="member">Iter</ref></type>
          <declname>spot</declname>
        </param>
        <param>
          <type>const SearchSpace &amp;</type>
          <declname>SS</declname>
        </param>
        <briefdescription>
<para>insert a node with spot as a child </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the program tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spot</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to the node that is being mutated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SS</parametername>
</parameternamelist>
<parameterdescription>
<para>the search space to sample a node like <computeroutput>spot</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean indicating the success (true) or fail (false) of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="59" column="13" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="59" bodyend="110"/>
        <references refid="dc/d5c/namespaceBrush_1a9c6fb4b74a0a8a8fd047a49f3c9e2283" compoundref="dc/d4d/params_8cpp" startline="8">Brush::PARAMS</references>
        <references refid="d4/dc3/structBrush_1_1SearchSpace_1a64e90d0781395bf9a843b8806dc5e95b" compoundref="d9/d99/search__space_8h" startline="444" endline="497">Brush::SearchSpace::sample_op_with_arg</references>
        <references refid="d4/dc3/structBrush_1_1SearchSpace_1ab7799a89e862e19942db515d8963fca7" compoundref="d9/d99/search__space_8h" startline="315" endline="349">Brush::SearchSpace::sample_terminal</references>
        <references refid="dc/d5c/namespaceBrush_1ae41500fed38676f34a4d476a992d585d">Brush::SS</references>
        <referencedby refid="d0/d24/namespacevariation_1a3ceab1ae0c739084852ef04ebda17d6a" compoundref="d4/d1f/variation_8h" startline="223" endline="295">mutate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d24/namespacevariation_1a3f1ae4f750d7368932dae8e9b8fb7d20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool variation::delete_mutation</definition>
        <argsstring>(tree&lt; Node &gt; &amp;Tree, Iter spot, const SearchSpace &amp;SS)</argsstring>
        <name>delete_mutation</name>
        <param>
          <type>tree&lt; Node &gt; &amp;</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="d0/d24/namespacevariation_1ace95ad8220efc40e8d89096ce61e6e60" kindref="member">Iter</ref></type>
          <declname>spot</declname>
        </param>
        <param>
          <type>const SearchSpace &amp;</type>
          <declname>SS</declname>
        </param>
        <briefdescription>
<para>delete subtree and replace it with a terminal of the same return type </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the program tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spot</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to the node that is being mutated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SS</parametername>
</parameternamelist>
<parameterdescription>
<para>the search space to sample a node like <computeroutput>spot</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean indicating the success (true) or fail (false) of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="117" column="13" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="117" bodyend="133"/>
        <references refid="d4/dc3/structBrush_1_1SearchSpace_1ab7799a89e862e19942db515d8963fca7" compoundref="d9/d99/search__space_8h" startline="315" endline="349">Brush::SearchSpace::sample_terminal</references>
        <references refid="dc/d5c/namespaceBrush_1ae41500fed38676f34a4d476a992d585d">Brush::SS</references>
        <referencedby refid="d0/d24/namespacevariation_1a3ceab1ae0c739084852ef04ebda17d6a" compoundref="d4/d1f/variation_8h" startline="223" endline="295">mutate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d24/namespacevariation_1ae0d980dfd1c64597731f9cdde45e90b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool variation::toggle_weight_on_mutation</definition>
        <argsstring>(tree&lt; Node &gt; &amp;Tree, Iter spot, const SearchSpace &amp;SS)</argsstring>
        <name>toggle_weight_on_mutation</name>
        <param>
          <type>tree&lt; Node &gt; &amp;</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="d0/d24/namespacevariation_1ace95ad8220efc40e8d89096ce61e6e60" kindref="member">Iter</ref></type>
          <declname>spot</declname>
        </param>
        <param>
          <type>const SearchSpace &amp;</type>
          <declname>SS</declname>
        </param>
        <briefdescription>
<para>toggle the node&apos;s weight ON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the program tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spot</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to the node that is being mutated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SS</parametername>
</parameternamelist>
<parameterdescription>
<para>the search space (unused) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean indicating the success (true) or fail (false) of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="140" column="13" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="140" bodyend="148"/>
        <references refid="dc/d5c/namespaceBrush_1a1d5a63450bcdb77bd08283c9f74ca53f" compoundref="d1/d77/node_8h" startline="47" endline="54">Brush::IsWeighable</references>
        <referencedby refid="d0/d24/namespacevariation_1a3ceab1ae0c739084852ef04ebda17d6a" compoundref="d4/d1f/variation_8h" startline="223" endline="295">mutate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d24/namespacevariation_1afce849d082df7c278e5115ba64dd73ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool variation::toggle_weight_off_mutation</definition>
        <argsstring>(tree&lt; Node &gt; &amp;Tree, Iter spot, const SearchSpace &amp;SS)</argsstring>
        <name>toggle_weight_off_mutation</name>
        <param>
          <type>tree&lt; Node &gt; &amp;</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="d0/d24/namespacevariation_1ace95ad8220efc40e8d89096ce61e6e60" kindref="member">Iter</ref></type>
          <declname>spot</declname>
        </param>
        <param>
          <type>const SearchSpace &amp;</type>
          <declname>SS</declname>
        </param>
        <briefdescription>
<para>toggle the node&apos;s weight OFF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the program tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spot</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to the node that is being mutated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SS</parametername>
</parameternamelist>
<parameterdescription>
<para>the search space (unused) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean indicating the success (true) or fail (false) of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="155" column="13" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="155" bodyend="162"/>
        <referencedby refid="d0/d24/namespacevariation_1a3ceab1ae0c739084852ef04ebda17d6a" compoundref="d4/d1f/variation_8h" startline="223" endline="295">mutate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d24/namespacevariation_1ab3c6b50b00987b9b8f4a9ca98606860e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool variation::subtree_mutation</definition>
        <argsstring>(tree&lt; Node &gt; &amp;Tree, Iter spot, const SearchSpace &amp;SS)</argsstring>
        <name>subtree_mutation</name>
        <param>
          <type>tree&lt; Node &gt; &amp;</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="d0/d24/namespacevariation_1ace95ad8220efc40e8d89096ce61e6e60" kindref="member">Iter</ref></type>
          <declname>spot</declname>
        </param>
        <param>
          <type>const SearchSpace &amp;</type>
          <declname>SS</declname>
        </param>
        <briefdescription>
<para>replaces the subtree rooted in <computeroutput>spot</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the program tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spot</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to the node that is being mutated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SS</parametername>
</parameternamelist>
<parameterdescription>
<para>the search space to generate a compatible subtree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean indicating the success (true) or fail (false) of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="169" column="13" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="169" bodyend="187"/>
        <references refid="dc/d5c/namespaceBrush_1a9c6fb4b74a0a8a8fd047a49f3c9e2283" compoundref="dc/d4d/params_8cpp" startline="8">Brush::PARAMS</references>
        <references refid="d4/dc3/structBrush_1_1SearchSpace_1aed45d3d8adbee89f02e709472fe88280" compoundref="da/d48/search__space_8cpp" startline="180" endline="206">Brush::SearchSpace::sample_subtree</references>
        <references refid="dc/d5c/namespaceBrush_1ae41500fed38676f34a4d476a992d585d">Brush::SS</references>
        <referencedby refid="d0/d24/namespacevariation_1a3ceab1ae0c739084852ef04ebda17d6a" compoundref="d4/d1f/variation_8h" startline="223" endline="295">mutate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d24/namespacevariation_1a3ceab1ae0c739084852ef04ebda17d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ProgramType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>std::optional&lt; Program&lt; T &gt; &gt;</type>
        <definition>std::optional&lt;Program&lt;T&gt; &gt; variation::mutate</definition>
        <argsstring>(const Program&lt; T &gt; &amp;parent, const SearchSpace &amp;SS)</argsstring>
        <name>mutate</name>
        <param>
          <type>const Program&lt; T &gt; &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const SearchSpace &amp;</type>
          <declname>SS</declname>
        </param>
        <briefdescription>
<para>Stochastically mutate a program. </para>
        </briefdescription>
        <detaileddescription>
<para>Types of mutation:</para>
<para><itemizedlist>
<listitem><para>point mutation changes a single node.</para>
</listitem><listitem><para>insertion mutation inserts a node as the parent of an existing node, and fills in the other arguments.</para>
</listitem><listitem><para>deletion mutation deletes a node.</para>
</listitem><listitem><para>subtree mutation inserts a new subtree into the program.</para>
</listitem><listitem><para>toggle_weight_on mutation turns a node&apos;s weight ON.</para>
</listitem><listitem><para>toggle_weight_off mutation turns a node&apos;s weight OFF.</para>
</listitem></itemizedlist>
</para>
<para>Every mutation has a probability (weight) based on global parameters. The spot where the mutation will take place is sampled based on attribute <computeroutput>get_prob_change</computeroutput> of each node in the tree. Inside each type of mutation, when a new node is inserted, it is sampled based on <computeroutput>terminal_weights</computeroutput>.</para>
<para>Due to the stochastic behavior, and the several sampling steps, it may come to a case where the search space does not hold any possible modification to do in the program. In this case, the method returns <computeroutput>std::nullopt</computeroutput> (and has overloads so it can be used in a boolean context).</para>
<para>If the mutation succeeds, the mutated program can be accessed through the <computeroutput>.value()</computeroutput> attribute of the <computeroutput>std::optional</computeroutput>.</para>
<para>This means that, if you use the mutation as <computeroutput>auto opt = mutate(parent, SS)</computeroutput>, either <computeroutput>opt==false</computeroutput> or <computeroutput>opt.value()</computeroutput> contains the child program.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>program type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>the program to be mutated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SS</parametername>
</parameternamelist>
<parameterdescription>
<para>a search space </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::optional</computeroutput> that may contain the child program of type <computeroutput>T</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="223" column="15" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="223" bodyend="295"/>
        <references refid="d0/d24/namespacevariation_1a3f1ae4f750d7368932dae8e9b8fb7d20" compoundref="d4/d1f/variation_8h" startline="117" endline="133">delete_mutation</references>
        <references refid="da/d41/error_8h_1aa4c550bcd71e4ec1c97b111e1360509a" compoundref="da/d41/error_8h" startline="24">HANDLE_ERROR_THROW</references>
        <references refid="d0/d24/namespacevariation_1ad562aad1d00786b26a704f6b8db751c9" compoundref="d4/d1f/variation_8h" startline="59" endline="110">insert_mutation</references>
        <references refid="dc/d5c/namespaceBrush_1a9c6fb4b74a0a8a8fd047a49f3c9e2283" compoundref="dc/d4d/params_8cpp" startline="8">Brush::PARAMS</references>
        <references refid="d0/d24/namespacevariation_1a170515efe6144a099812fc284c2ae10b" compoundref="d4/d1f/variation_8h" startline="37" endline="52">point_mutation</references>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1af7dd70e54015821d96e3a1afed6344ca" compoundref="d2/da9/rnd_8h" startline="176">Brush::Util::r</references>
        <references refid="d2/d2d/classBrush_1_1Util_1_1Rnd_1a18656ce513329b1c672f6ee15ab281b7" compoundref="d2/da9/rnd_8h" startline="98" endline="117">Brush::Util::Rnd::random_choice</references>
        <references refid="d2/d2d/classBrush_1_1Util_1_1Rnd_1a9f0fe39c1fd498b378c8d4abe7b9d71b" compoundref="d2/da9/rnd_8h" startline="62" endline="67">Brush::Util::Rnd::select_randomly</references>
        <references refid="dc/d5c/namespaceBrush_1ae41500fed38676f34a4d476a992d585d">Brush::SS</references>
        <references refid="d0/d24/namespacevariation_1ab3c6b50b00987b9b8f4a9ca98606860e" compoundref="d4/d1f/variation_8h" startline="169" endline="187">subtree_mutation</references>
        <references refid="d0/d24/namespacevariation_1afce849d082df7c278e5115ba64dd73ea" compoundref="d4/d1f/variation_8h" startline="155" endline="162">toggle_weight_off_mutation</references>
        <references refid="d0/d24/namespacevariation_1ae0d980dfd1c64597731f9cdde45e90b4" compoundref="d4/d1f/variation_8h" startline="140" endline="148">toggle_weight_on_mutation</references>
        <references refid="d7/d6b/namespaceBrush_1_1util_1ac363bc4b5411446ecf3133267c59cf5e" compoundref="d7/de0/operator_8h" startline="20">Brush::util::weights</references>
        <referencedby refid="d6/d3f/bind__programs_8h_1a8284c80bb3c1dfb32250420f76a183fd" compoundref="d6/d3f/bind__programs_8h" startline="15" endline="80">bind_program</referencedby>
        <referencedby refid="db/d88/structBrush_1_1Program_1a00cac102329788865e5822a6f5641423" compoundref="d1/dea/program_8h" startline="524" endline="527">Brush::Program&lt; PType &gt;::mutate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d24/namespacevariation_1ac31f284c947a66d035b310513f4916c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ProgramType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>std::optional&lt; Program&lt; T &gt; &gt;</type>
        <definition>std::optional&lt;Program&lt;T&gt; &gt; variation::cross</definition>
        <argsstring>(const Program&lt; T &gt; &amp;root, const Program&lt; T &gt; &amp;other)</argsstring>
        <name>cross</name>
        <param>
          <type>const Program&lt; T &gt; &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const Program&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Stochastically swaps subtrees between root and other, returning a new program. </para>
        </briefdescription>
        <detaileddescription>
<para>The spot where the cross will take place in the <computeroutput>root</computeroutput> parent is sampled based on attribute <computeroutput>get_prob_change</computeroutput> of each node in the tree. After selecting the cross spot, the program will iterate through the <computeroutput>other</computeroutput> parent searching for all compatible sub-trees to replace.</para>
<para>Due to the stochastic behavior, it may come to a case where there is no candidate to replace the spot node. In this case, the method returns <computeroutput>std::nullopt</computeroutput> (and has overloads so it can be used in a boolean context).</para>
<para>If the cross succeeds, the child program can be accessed through the <computeroutput>.value()</computeroutput> attribute of the <computeroutput>std::optional</computeroutput>.</para>
<para>This means that, if you use the cross as <computeroutput>auto opt = mutate(parent, SS)</computeroutput>, either <computeroutput>opt==false</computeroutput> or <computeroutput>opt.value()</computeroutput> contains the child.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the program type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>the root parent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the donating parent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::optional</computeroutput> that may contain the child program of type <computeroutput>T</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/variation.h" line="321" column="15" bodyfile="/home/runner/work/brush/brush/src/variation.h" bodystart="321" bodyend="404"/>
        <references refid="dc/d5c/namespaceBrush_1a9c6fb4b74a0a8a8fd047a49f3c9e2283" compoundref="dc/d4d/params_8cpp" startline="8">Brush::PARAMS</references>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1af7dd70e54015821d96e3a1afed6344ca" compoundref="d2/da9/rnd_8h" startline="176">Brush::Util::r</references>
        <references refid="d2/d2d/classBrush_1_1Util_1_1Rnd_1a9f0fe39c1fd498b378c8d4abe7b9d71b" compoundref="d2/da9/rnd_8h" startline="62" endline="67">Brush::Util::Rnd::select_randomly</references>
        <referencedby refid="d6/d3f/bind__programs_8h_1a8284c80bb3c1dfb32250420f76a183fd" compoundref="d6/d3f/bind__programs_8h" startline="15" endline="80">bind_program</referencedby>
        <referencedby refid="db/d88/structBrush_1_1Program_1a750b6c66bebaa4f4163110eba7db6275" compoundref="d1/dea/program_8h" startline="531" endline="534">Brush::Program&lt; PType &gt;::cross</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace for variation functions like crossover and mutation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/brush/brush/src/variation.h" line="28" column="1"/>
  </compounddef>
</doxygen>
