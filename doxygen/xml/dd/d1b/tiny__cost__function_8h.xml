<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="dd/d1b/tiny__cost__function_8h" kind="file" language="C++">
    <compoundname>tiny_cost_function.h</compoundname>
    <includedby refid="d7/de3/weight__optimizer_8h" local="yes">weight_optimizer.h</includedby>
    <invincdepgraph>
      <node id="11">
        <label>bind_engines.cpp</label>
        <link refid="d1/df0/bind__engines_8cpp"/>
      </node>
      <node id="10">
        <label>bind_engines.h</label>
        <link refid="d4/d93/bind__engines_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>bind_evaluator.cpp</label>
        <link refid="da/dff/bind__evaluator_8cpp"/>
      </node>
      <node id="17">
        <label>bind_evaluator.h</label>
        <link refid="d0/d67/bind__evaluator_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>bind_individuals.cpp</label>
        <link refid="d9/d27/bind__individuals_8cpp"/>
      </node>
      <node id="14">
        <label>bind_individuals.h</label>
        <link refid="d6/ddc/bind__individuals_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bind_programs.cpp</label>
        <link refid="d9/d26/bind__programs_8cpp"/>
      </node>
      <node id="4">
        <label>bind_programs.h</label>
        <link refid="d6/d3f/bind__programs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>bind_search_space.cpp</label>
        <link refid="d0/d94/bind__search__space_8cpp"/>
      </node>
      <node id="23">
        <label>bind_selection.cpp</label>
        <link refid="d7/dce/bind__selection_8cpp"/>
      </node>
      <node id="22">
        <label>bind_selection.h</label>
        <link refid="da/d67/bind__selection_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>bind_variation.cpp</label>
        <link refid="df/d41/bind__variation_8cpp"/>
      </node>
      <node id="24">
        <label>bind_variation.h</label>
        <link refid="d8/df7/bind__variation_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>engine.cpp</label>
        <link refid="da/d5c/engine_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>engine.h</label>
        <link refid="d1/d55/engine_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>evaluation.cpp</label>
        <link refid="d9/d6a/evaluation_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>evaluation.h</label>
        <link refid="d3/df9/evaluation_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>individual.cpp</label>
        <link refid="db/df6/individual_8cpp"/>
      </node>
      <node id="7">
        <label>individual.h</label>
        <link refid="d5/d1f/individual_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>archive.cpp</label>
        <link refid="d7/d05/archive_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>archive.h</label>
        <link refid="d9/d28/archive_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>population.cpp</label>
        <link refid="d7/d4a/population_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>population.h</label>
        <link refid="d2/d76/population_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tiny_cost_function.h</label>
        <link refid="dd/d1b/tiny__cost__function_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>weight_optimizer.h</label>
        <link refid="d7/de3/weight__optimizer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>program.h</label>
        <link refid="d1/dea/program_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lexicase.cpp</label>
        <link refid="d8/dac/lexicase_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>lexicase.h</label>
        <link refid="d3/d12/lexicase_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>nsga2.cpp</label>
        <link refid="de/d0d/nsga2_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>nsga2.h</label>
        <link refid="d3/d06/nsga2_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>selection.cpp</label>
        <link refid="df/dbb/selection_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>selection.h</label>
        <link refid="df/d48/selection_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>selection_operator.cpp</label>
        <link refid="d4/db2/selection__operator_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>selection_operator.h</label>
        <link refid="dd/d5d/selection__operator_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>search_space.cpp</label>
        <link refid="da/d48/search__space_8cpp"/>
      </node>
      <node id="36">
        <label>variation.cpp</label>
        <link refid="d1/d64/variation_8cpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>variation.h</label>
        <link refid="d4/d1f/variation_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="df/d09/structBrush_1_1TinyCostFunction" prot="public">Brush::TinyCostFunction</innerclass>
    <innernamespace refid="dc/d5c/namespaceBrush">Brush</innernamespace>
    <innernamespace refid="d5/d8a/namespaceBrush_1_1detail">Brush::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Brush</highlight></codeline>
<codeline lineno="2"><highlight class="comment">copyright<sp/>2020<sp/>William<sp/>La<sp/>Cava</highlight></codeline>
<codeline lineno="3"><highlight class="comment">license:<sp/>GNU/GPL<sp/>v3</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">Code<sp/>below<sp/>heavily<sp/>inspired<sp/>by<sp/>heal-research/operon,<sp/>Copyright<sp/>2019-2022<sp/>Heal<sp/>Research</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TINY_OPTIMIZER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINY_OPTIMIZER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dc/d5c/namespaceBrush" kindref="compound">Brush</ref><sp/>{</highlight></codeline>
<codeline lineno="13" refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Scalar</ref><sp/>=<sp/>float;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>cost<sp/>function<sp/>is<sp/>adapted<sp/>to<sp/>work<sp/>with<sp/>both<sp/>solvers<sp/>from<sp/>Ceres:<sp/>the<sp/>normal<sp/>one<sp/>and<sp/>the<sp/>tiny<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>this,<sp/>a<sp/>number<sp/>of<sp/>template<sp/>parameters<sp/>are<sp/>necessary:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>the<sp/>CostFunctor<sp/>is<sp/>the<sp/>actual<sp/>functor<sp/>for<sp/>computing<sp/>the<sp/>residuals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>the<sp/>Dual<sp/>type<sp/>represents<sp/>a<sp/>dual<sp/>number,<sp/>the<sp/>user<sp/>can<sp/>specify<sp/>the<sp/>type<sp/>for<sp/>the<sp/>Scalar<sp/>part<sp/>(float,<sp/>double)<sp/>and<sp/>the<sp/>Stride<sp/>(Ceres-specific)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>the<sp/>StorageOrder<sp/>specifies<sp/>the<sp/>format<sp/>of<sp/>the<sp/>jacobian<sp/>(row-major<sp/>for<sp/>the<sp/>big<sp/>Ceres<sp/>solver,<sp/>column-major<sp/>for<sp/>the<sp/>tiny<sp/>solver)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>eliminate<sp/>this<sp/>and<sp/>use<sp/>the<sp/>Ceres<sp/>tiny<sp/>solver<sp/>autodiff<sp/>function<sp/>instead:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/ceres-solver/ceres-solver/blob/caf614a6c1ac1717be606c37fe434391edb2f417/include/ceres/tiny_solver_autodiff_function.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="d5/d8a/namespaceBrush_1_1detail" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d5/d8a/namespaceBrush_1_1detail" kindref="compound">detail</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CostFunctor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Dual,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>JacobianLayout<sp/>=<sp/>Eigen::ColMajor&gt;</highlight></codeline>
<codeline lineno="24" refid="d5/d8a/namespaceBrush_1_1detail_1a947dcae654755bd0bb2afa43b5507a84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d5/d8a/namespaceBrush_1_1detail_1a947dcae654755bd0bb2afa43b5507a84" kindref="member">Autodiff</ref>(CostFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>function,<sp/><ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Scalar</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>parameters,<sp/><ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Scalar</ref>*<sp/>residuals,<sp/><ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Scalar</ref>*<sp/>jacobian)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_convertible_v&lt;typename<sp/>Dual::Scalar,<sp/>Scalar&gt;,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>chosen<sp/>Jet<sp/>and<sp/>Scalar<sp/>types<sp/>are<sp/>not<sp/>compatible.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_convertible_v&lt;Scalar,<sp/>typename<sp/>Dual::Scalar&gt;,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>chosen<sp/>Jet<sp/>and<sp/>Scalar<sp/>types<sp/>are<sp/>not<sp/>compatible.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT(parameters<sp/>!=<sp/>nullptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT(residuals<sp/>!=<sp/>nullptr<sp/>||<sp/>jacobian<sp/>!=<sp/>nullptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jacobian<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(parameters,<sp/>residuals);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Dual&gt;<sp/>inputs(function.NumParameters());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>inputs.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs[i].a<sp/>=<sp/>parameters[i];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs[i].v.setZero();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Dual&gt;<sp/>outputs(function.NumResiduals());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>D{Dual::DIMENSION};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::Matrix&lt;<ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Scalar</ref>,<sp/>-1,<sp/>-1,<sp/>JacobianLayout&gt;&gt;<sp/>jmap(jacobian,<sp/>outputs.size(),<sp/>inputs.size());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>inputs.size();<sp/>s<sp/>+=<sp/>D)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>std::min(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inputs.size()),<sp/>s<sp/>+<sp/>D);<sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s;<sp/>i<sp/>&lt;<sp/>r;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs[i].v[i<sp/>-<sp/>s]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function(inputs.data(),<sp/>outputs.data()))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s;<sp/>i<sp/>&lt;<sp/>r;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs[i].v[i<sp/>-<sp/>s]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>in<sp/>the<sp/>jacobian<sp/>trying<sp/>to<sp/>exploit<sp/>its<sp/>layout<sp/>for<sp/>efficiency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(JacobianLayout<sp/>==<sp/>Eigen::ColMajor)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s;<sp/>i<sp/>&lt;<sp/>r;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(outputs.cbegin(),<sp/>outputs.cend(),<sp/>jmap.col(i).data(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>jet)<sp/>{<sp/>return<sp/>jet.v[i<sp/>-<sp/>s];<sp/>});</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>outputs.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_n(outputs[i].v.data(),<sp/>r<sp/>-<sp/>s,<sp/>jmap.row(i).data()<sp/>+<sp/>s);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(residuals<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(std::cbegin(outputs),<sp/>std::cend(outputs),<sp/>residuals,<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>jet)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jet.a;<sp/>});</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CostFunctor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DualType=<ref refid="dc/d5c/namespaceBrush_1afca2eb9cd1e30d788f324d15a9af500a" kindref="member">fJet</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType=float,<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder<sp/>=<sp/>Eigen::ColMajor&gt;</highlight></codeline>
<codeline lineno="81" refid="df/d09/structBrush_1_1TinyCostFunction" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a81e83e5c0b620ee5c25da852a33d5f57" kindref="member">TinyCostFunction</ref><sp/>{</highlight></codeline>
<codeline lineno="82" refid="df/d09/structBrush_1_1TinyCostFunction_1a1e1831616fb4ebc67aade514d0fb224e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a1e1831616fb4ebc67aade514d0fb224e" kindref="member">Stride</ref><sp/>=<sp/>DualType::DIMENSION;</highlight></codeline>
<codeline lineno="83" refid="df/d09/structBrush_1_1TinyCostFunction_1a6e468d63ff6887868052dc771a3281ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a6e468d63ff6887868052dc771a3281ca" kindref="member">Storage</ref><sp/>=<sp/>StorageOrder;</highlight></codeline>
<codeline lineno="84" refid="df/d09/structBrush_1_1TinyCostFunction_1a1e18dcb3d7eb5c68907c0c7126d59ece" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a1e18dcb3d7eb5c68907c0c7126d59ece" kindref="member">Scalar</ref><sp/>=<sp/>ScalarType;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="87" refid="df/d09/structBrush_1_1TinyCostFunction_1adc7a487cbd77d7db354c1ffc1bce951ea84a3f9e5e53b45bf9681e5879ba49166" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1adc7a487cbd77d7db354c1ffc1bce951ea84a3f9e5e53b45bf9681e5879ba49166" kindref="member">NUM_RESIDUALS</ref><sp/>=<sp/>Eigen::Dynamic,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="df/d09/structBrush_1_1TinyCostFunction_1adc7a487cbd77d7db354c1ffc1bce951ea37dff4c47c0003dcb1c79a90c4de4f72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1adc7a487cbd77d7db354c1ffc1bce951ea37dff4c47c0003dcb1c79a90c4de4f72" kindref="member">NUM_PARAMETERS</ref><sp/>=<sp/>Eigen::Dynamic,<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="df/d09/structBrush_1_1TinyCostFunction_1a81e83e5c0b620ee5c25da852a33d5f57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a81e83e5c0b620ee5c25da852a33d5f57" kindref="member">TinyCostFunction</ref>(CostFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>functor)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a78af5167fa8aeaa9326dc7fc87418185" kindref="member">functor_</ref>(functor)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="df/d09/structBrush_1_1TinyCostFunction_1a65a0b55ab386a3727ee7cd800fabf3f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a65a0b55ab386a3727ee7cd800fabf3f6" kindref="member">Evaluate</ref>(<ref refid="df/d09/structBrush_1_1TinyCostFunction_1a1e18dcb3d7eb5c68907c0c7126d59ece" kindref="member">Scalar</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>parameters,<sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a1e18dcb3d7eb5c68907c0c7126d59ece" kindref="member">Scalar</ref>*<sp/>residuals,<sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a1e18dcb3d7eb5c68907c0c7126d59ece" kindref="member">Scalar</ref>*<sp/>jacobian)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d8a/namespaceBrush_1_1detail_1a947dcae654755bd0bb2afa43b5507a84" kindref="member">detail::Autodiff&lt;CostFunctor, DualType, ScalarType, StorageOrder&gt;</ref>(<ref refid="df/d09/structBrush_1_1TinyCostFunction_1a78af5167fa8aeaa9326dc7fc87418185" kindref="member">functor_</ref>,<sp/>parameters,<sp/>residuals,<sp/>jacobian);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ceres<sp/>solver<sp/>-<sp/>jacobian<sp/>must<sp/>be<sp/>in<sp/>row-major<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ceres<sp/>tiny<sp/>solver<sp/>-<sp/>jacobian<sp/>must<sp/>be<sp/>in<sp/>col-major<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="df/d09/structBrush_1_1TinyCostFunction_1a452ba7eb4e251b6b16c8d5fc3b02dc55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a452ba7eb4e251b6b16c8d5fc3b02dc55" kindref="member">operator()</ref>(<ref refid="df/d09/structBrush_1_1TinyCostFunction_1a1e18dcb3d7eb5c68907c0c7126d59ece" kindref="member">Scalar</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>parameters,<sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a1e18dcb3d7eb5c68907c0c7126d59ece" kindref="member">Scalar</ref>*<sp/>residuals,<sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a1e18dcb3d7eb5c68907c0c7126d59ece" kindref="member">Scalar</ref>*<sp/>jacobian)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a65a0b55ab386a3727ee7cd800fabf3f6" kindref="member">Evaluate</ref>(parameters,<sp/>residuals,<sp/>jacobian);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="df/d09/structBrush_1_1TinyCostFunction_1a713b8084e828215cec8ea822841ec732" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a713b8084e828215cec8ea822841ec732" kindref="member">NumResiduals</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a78af5167fa8aeaa9326dc7fc87418185" kindref="member">functor_</ref>.NumResiduals();<sp/>}</highlight></codeline>
<codeline lineno="109" refid="df/d09/structBrush_1_1TinyCostFunction_1ad21ab65a5d23fc3f0b5e0a812a7215ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1ad21ab65a5d23fc3f0b5e0a812a7215ba" kindref="member">NumParameters</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a78af5167fa8aeaa9326dc7fc87418185" kindref="member">functor_</ref>.NumParameters();<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>required<sp/>by<sp/>Eigen::LevenbergMarquardt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="df/d09/structBrush_1_1TinyCostFunction_1ab74d94553ca55069ad39dbda4ce73c8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="df/d09/structBrush_1_1TinyCostFunction_1ab74d94553ca55069ad39dbda4ce73c8b" kindref="member">JacobianType</ref><sp/>=<sp/>Eigen::Matrix&lt;<ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Brush::Scalar</ref>,<sp/>-1,<sp/>-1&gt;;</highlight></codeline>
<codeline lineno="113" refid="df/d09/structBrush_1_1TinyCostFunction_1a90b55951088f99d62f300bb6252bc16f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a90b55951088f99d62f300bb6252bc16f" kindref="member">QRSolver</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::ColPivHouseholderQR&lt;JacobianType&gt;;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>no<sp/>real<sp/>documentation<sp/>but<sp/>looking<sp/>at<sp/>Eigen<sp/>unit<sp/>tests,<sp/>these<sp/>functions<sp/>should<sp/>return<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see:<sp/>https://gitlab.com/libeigen/eigen/-/blob/master/unsupported/test/NonLinearOptimization.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="df/d09/structBrush_1_1TinyCostFunction_1a6cb6f6e6034df71e2d2bfe9d3dc1c6a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a6cb6f6e6034df71e2d2bfe9d3dc1c6a1" kindref="member">operator()</ref>(Eigen::Matrix&lt;Scalar,<sp/>-1,<sp/>1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>input,<sp/>Eigen::Matrix&lt;Scalar,<sp/>-1,<sp/>1&gt;<sp/>&amp;residual)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a65a0b55ab386a3727ee7cd800fabf3f6" kindref="member">Evaluate</ref>(input.data(),<sp/>residual.data(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="df/d09/structBrush_1_1TinyCostFunction_1aa2bfb371b47dee9dea885199da1dcc22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1aa2bfb371b47dee9dea885199da1dcc22" kindref="member">df</ref>(Eigen::Matrix&lt;Scalar,<sp/>-1,<sp/>1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>input,<sp/>Eigen::Matrix&lt;Scalar,<sp/>-1,<sp/>-1&gt;<sp/>&amp;jacobian)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(StorageOrder<sp/>==<sp/>Eigen::ColMajor,<sp/></highlight><highlight class="stringliteral">&quot;Eigen::LevenbergMarquardt<sp/>requires<sp/>the<sp/>Jacobian<sp/>to<sp/>be<sp/>stored<sp/>in<sp/>column-major<sp/>format.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a65a0b55ab386a3727ee7cd800fabf3f6" kindref="member">Evaluate</ref>(input.data(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>jacobian.data());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="df/d09/structBrush_1_1TinyCostFunction_1a2245262594736571bea9e0018ee6aef6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a2245262594736571bea9e0018ee6aef6" kindref="member">values</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a713b8084e828215cec8ea822841ec732" kindref="member">NumResiduals</ref>();<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="df/d09/structBrush_1_1TinyCostFunction_1aa39289bac5f4ffdac9e6534e8d58ae9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1aa39289bac5f4ffdac9e6534e8d58ae9c" kindref="member">inputs</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1ad21ab65a5d23fc3f0b5e0a812a7215ba" kindref="member">NumParameters</ref>();<sp/>}<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134" refid="df/d09/structBrush_1_1TinyCostFunction_1a78af5167fa8aeaa9326dc7fc87418185" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CostFunctor<sp/><ref refid="df/d09/structBrush_1_1TinyCostFunction_1a78af5167fa8aeaa9326dc7fc87418185" kindref="member">functor_</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">};</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Brush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/brush/brush/src/program/optimizer/tiny_cost_function.h"/>
  </compounddef>
</doxygen>
