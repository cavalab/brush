<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d7/d01/bandit_8cpp" kind="file" language="C++">
    <compoundname>bandit.cpp</compoundname>
    <includes refid="d7/d00/bandit_8h" local="yes">bandit.h</includes>
    <includes local="no">typeinfo</includes>
    <includedby refid="d4/d93/bind__engines_8h" local="yes">bind_engines.h</includedby>
    <includedby refid="d8/df7/bind__variation_8h" local="yes">bind_variation.h</includedby>
    <incdepgraph>
      <node id="50">
        <label>../../thirdparty/tree.hh</label>
      </node>
      <node id="1">
        <label>bandit.cpp</label>
        <link refid="d7/d01/bandit_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>bandit.h</label>
        <link refid="d7/d00/bandit_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>bandit_operator.h</label>
        <link refid="da/d8e/bandit__operator_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>dummy.h</label>
        <link refid="d2/d94/dummy_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>linear_thompson.h</label>
        <link refid="d9/df5/linear__thompson_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>thompson.h</label>
        <link refid="db/ddd/thompson_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>../data/data.h</label>
        <link refid="d2/dbd/data_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>timeseries.h</label>
        <link refid="d9/df7/timeseries_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>../ind/fitness.h</label>
        <link refid="dc/d7a/fitness_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../init.h</label>
        <link refid="d8/dc0/init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>../params.h</label>
        <link refid="da/d33/params_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>dispatch_table.h</label>
        <link refid="df/d61/dispatch__table_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>functions.h</label>
        <link refid="d8/d5c/functions_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>node.h</label>
        <link refid="d1/d77/node_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>nodetype.h</label>
        <link refid="de/d26/nodetype_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>tiny_cost_function.h</label>
        <link refid="dd/d1b/tiny__cost__function_8h"/>
      </node>
      <node id="55">
        <label>optimizer/weight_optimizer.h</label>
        <link refid="d7/de3/weight__optimizer_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>../program/program.h</label>
        <link refid="d1/dea/program_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>signatures.h</label>
        <link refid="d8/d8b/signatures_8h"/>
      </node>
      <node id="24">
        <label>tree_node.h</label>
        <link refid="d1/da6/tree__node_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>error.h</label>
        <link refid="da/d41/error_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>../util/logger.h</label>
        <link refid="d1/d8c/logger_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>../util/rnd.h</label>
        <link refid="d2/da9/rnd_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>../util/utils.h</label>
        <link refid="d5/d60/utils_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>../vary/search_space.h</label>
        <link refid="d9/d99/search__space_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Eigen/Dense</label>
      </node>
      <node id="23">
        <label>assert.h</label>
      </node>
      <node id="43">
        <label>bitset</label>
      </node>
      <node id="66">
        <label>boost/math/distributions/gamma.hpp</label>
      </node>
      <node id="56">
        <label>ceres/dynamic_autodiff_cost_function.h</label>
      </node>
      <node id="57">
        <label>ceres/dynamic_numeric_diff_cost_function.h</label>
      </node>
      <node id="20">
        <label>ceres/jet.h</label>
      </node>
      <node id="58">
        <label>ceres/loss_function.h</label>
      </node>
      <node id="59">
        <label>ceres/solver.h</label>
      </node>
      <node id="60">
        <label>ceres/tiny_solver.h</label>
      </node>
      <node id="29">
        <label>chrono</label>
      </node>
      <node id="48">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>concepts</label>
      </node>
      <node id="52">
        <label>cstddef</label>
      </node>
      <node id="34">
        <label>execution</label>
      </node>
      <node id="15">
        <label>fmt/format.h</label>
      </node>
      <node id="14">
        <label>fmt/ostream.h</label>
      </node>
      <node id="16">
        <label>fmt/ranges.h</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="49">
        <label>functional</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="33">
        <label>iterator</label>
      </node>
      <node id="38">
        <label>limits</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="17">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="9">
        <label>numeric</label>
      </node>
      <node id="40">
        <label>optional</label>
      </node>
      <node id="30">
        <label>ostream</label>
      </node>
      <node id="37">
        <label>random</label>
      </node>
      <node id="11">
        <label>set</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="25">
        <label>tuple</label>
      </node>
      <node id="44">
        <label>type_traits</label>
      </node>
      <node id="32">
        <label>typeindex</label>
      </node>
      <node id="68">
        <label>typeinfo</label>
      </node>
      <node id="26">
        <label>unordered_map</label>
      </node>
      <node id="45">
        <label>utility</label>
      </node>
      <node id="19">
        <label>variant</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>bandit.cpp</label>
        <link refid="d7/d01/bandit_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bind_engines.cpp</label>
        <link refid="d1/df0/bind__engines_8cpp"/>
      </node>
      <node id="2">
        <label>bind_engines.h</label>
        <link refid="d4/d93/bind__engines_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bind_variation.cpp</label>
        <link refid="df/d41/bind__variation_8cpp"/>
      </node>
      <node id="4">
        <label>bind_variation.h</label>
        <link refid="d8/df7/bind__variation_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="dc/d5c/namespaceBrush">Brush</innernamespace>
    <innernamespace refid="da/d94/namespaceBrush_1_1MAB">Brush::MAB</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d00/bandit_8h" kindref="compound">bandit.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>FOR<sp/>DEBUGGING<sp/>PURPOSES.<sp/>TODO:<sp/>remove<sp/>it<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="dc/d5c/namespaceBrush" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dc/d5c/namespaceBrush" kindref="compound">Brush</ref><sp/>{</highlight></codeline>
<codeline lineno="5" refid="da/d94/namespaceBrush_1_1MAB" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="da/d94/namespaceBrush_1_1MAB" kindref="compound">MAB</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="8" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1adc69d78fba1571b2855a80579c97f041" refkind="member"><highlight class="normal"><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1adc69d78fba1571b2855a80579c97f041" kindref="member">Bandit&lt;T&gt;::Bandit</ref>()<sp/>{<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a776427889cba2b72e7eeb6bc007d0f51" kindref="member">set_type</ref>(</highlight><highlight class="stringliteral">&quot;dynamic_thompson&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a618fec32c27cfd2abd67dd0a756c6fd4" kindref="member">set_arms</ref>({});</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abfbcbb2eedfe06a4843c99cbd269a0d6" kindref="member">set_probs</ref>({});</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1afd7b456f1385ed795bc6bebbd874707b" kindref="member">set_bandit</ref>();</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="16" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8bdd279776d8ca36d630394a46f02c28" refkind="member"><highlight class="normal"><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1adc69d78fba1571b2855a80579c97f041" kindref="member">Bandit&lt;T&gt;::Bandit</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>,<sp/>vector&lt;T&gt;<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a9920575ed34196d8891195af7ab9bcd8" kindref="member">arms</ref>)<sp/>:<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a618fec32c27cfd2abd67dd0a756c6fd4" kindref="member">set_arms</ref>(arms);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;T,<sp/>float&gt;<sp/>arms_probs;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>prob<sp/>=<sp/>1.0<sp/>/<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a9920575ed34196d8891195af7ab9bcd8" kindref="member">arms</ref>.size();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>arm<sp/>:<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a9920575ed34196d8891195af7ab9bcd8" kindref="member">arms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arms_probs[arm]<sp/>=<sp/>prob;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abfbcbb2eedfe06a4843c99cbd269a0d6" kindref="member">set_probs</ref>(arms_probs);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1afd7b456f1385ed795bc6bebbd874707b" kindref="member">set_bandit</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="29" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a62130f8866903fd26e0c7a14ab520f38" refkind="member"><highlight class="normal"><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1adc69d78fba1571b2855a80579c97f041" kindref="member">Bandit&lt;T&gt;::Bandit</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>,<sp/>map&lt;T,<sp/>float&gt;<sp/>arms_probs)<sp/>:<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abfbcbb2eedfe06a4843c99cbd269a0d6" kindref="member">set_probs</ref>(arms_probs);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>arms_names;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pair<sp/>:<sp/>arms_probs)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arms_names.push_back(pair.first);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a618fec32c27cfd2abd67dd0a756c6fd4" kindref="member">set_arms</ref>(arms_names);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1afd7b456f1385ed795bc6bebbd874707b" kindref="member">set_bandit</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="41" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1afd7b456f1385ed795bc6bebbd874707b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1afd7b456f1385ed795bc6bebbd874707b" kindref="member">Bandit&lt;T&gt;::set_bandit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>a<sp/>flag<sp/>that<sp/>is<sp/>set<sp/>to<sp/>true<sp/>when<sp/>this<sp/>function<sp/>is<sp/>called.<sp/>make<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>methods<sp/>to<sp/>raise<sp/>an<sp/>error<sp/>if<sp/>bandit<sp/>was<sp/>not<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;thompson&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a5b4d1f00adf1fa588e2ccafec72f6e05" kindref="member">pbandit</ref><sp/>=<sp/>make_unique&lt;ThompsonSamplingBandit&lt;T&gt;&gt;(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abb23983ee78e5f80d731928df406af5a" kindref="member">probabilities</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;dynamic_thompson&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a5b4d1f00adf1fa588e2ccafec72f6e05" kindref="member">pbandit</ref><sp/>=<sp/>make_unique&lt;ThompsonSamplingBandit&lt;T&gt;&gt;(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abb23983ee78e5f80d731928df406af5a" kindref="member">probabilities</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;linear_thompson&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="49" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1adc69d78fba1571b2855a80579c97f041" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a5b4d1f00adf1fa588e2ccafec72f6e05" kindref="member">pbandit</ref><sp/>=<sp/>make_unique&lt;LinearThompsonSamplingBandit&lt;T&gt;&gt;(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abb23983ee78e5f80d731928df406af5a" kindref="member">probabilities</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;dummy&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbandit<sp/>=<sp/>make_unique&lt;DummyBandit&lt;T&gt;&gt;(probabilities);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d41/error_8h_1aa4c550bcd71e4ec1c97b111e1360509a" kindref="member">HANDLE_ERROR_THROW</ref>(</highlight><highlight class="stringliteral">&quot;Undefined<sp/>Selection<sp/>Operator<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>this-&gt;type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8bdd279776d8ca36d630394a46f02c28" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="58" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a6435fd2cd3ef52b6c9b73f1f5f7ae3a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a6435fd2cd3ef52b6c9b73f1f5f7ae3a2" kindref="member">Bandit&lt;T&gt;::get_type</ref>()<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a776427889cba2b72e7eeb6bc007d0f51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a776427889cba2b72e7eeb6bc007d0f51" kindref="member">Bandit&lt;T&gt;::set_type</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="64" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a62130f8866903fd26e0c7a14ab520f38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type<sp/>=<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8cdfc23d184ebc55a2c93eacf162ae0c" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="68" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a81ed95b6af36d310c6b0ca573d1e41df" refkind="member"><highlight class="normal">vector&lt;T&gt;<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a81ed95b6af36d310c6b0ca573d1e41df" kindref="member">Bandit&lt;T&gt;::get_arms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="69" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1afd7b456f1385ed795bc6bebbd874707b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a9920575ed34196d8891195af7ab9bcd8" kindref="member">arms</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="73" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a618fec32c27cfd2abd67dd0a756c6fd4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a618fec32c27cfd2abd67dd0a756c6fd4" kindref="member">Bandit&lt;T&gt;::set_arms</ref>(vector&lt;T&gt;<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a9920575ed34196d8891195af7ab9bcd8" kindref="member">arms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a618fec32c27cfd2abd67dd0a756c6fd4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;arms<sp/>=<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a9920575ed34196d8891195af7ab9bcd8" kindref="member">arms</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="78" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8b12aa7d8653bc813e1ae6fb353f6991" refkind="member"><highlight class="normal">map&lt;T,<sp/>float&gt;<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8b12aa7d8653bc813e1ae6fb353f6991" kindref="member">Bandit&lt;T&gt;::get_probs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="79" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a81ed95b6af36d310c6b0ca573d1e41df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abb23983ee78e5f80d731928df406af5a" kindref="member">probabilities</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="83" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abfbcbb2eedfe06a4843c99cbd269a0d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abfbcbb2eedfe06a4843c99cbd269a0d6" kindref="member">Bandit&lt;T&gt;::set_probs</ref>(map&lt;T,<sp/>float&gt;<sp/>arms_probs)<sp/>{</highlight></codeline>
<codeline lineno="84" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a6435fd2cd3ef52b6c9b73f1f5f7ae3a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abb23983ee78e5f80d731928df406af5a" kindref="member">probabilities</ref><sp/>=<sp/>arms_probs;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="88" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1affb89017044ba912926e6713cb1ffda1" refkind="member"><highlight class="normal">map&lt;T,<sp/>float&gt;<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1affb89017044ba912926e6713cb1ffda1" kindref="member">Bandit&lt;T&gt;::sample_probs</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1aafb91bb50c407dfbd67c0ef312882a36" kindref="member">update</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a776427889cba2b72e7eeb6bc007d0f51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a5b4d1f00adf1fa588e2ccafec72f6e05" kindref="member">pbandit</ref>-&gt;sample_probs(<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1aafb91bb50c407dfbd67c0ef312882a36" kindref="member">update</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="93" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a1f4eabc175f8f7e1b8308be103024d4d" refkind="member"><highlight class="normal">T<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a1f4eabc175f8f7e1b8308be103024d4d" kindref="member">Bandit&lt;T&gt;::choose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXf&amp;<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="94" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a8b12aa7d8653bc813e1ae6fb353f6991" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a5b4d1f00adf1fa588e2ccafec72f6e05" kindref="member">pbandit</ref>-&gt;choose(context);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="98" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1aafb91bb50c407dfbd67c0ef312882a36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1aafb91bb50c407dfbd67c0ef312882a36" kindref="member">Bandit&lt;T&gt;::update</ref>(T<sp/>arm,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reward,<sp/>VectorXf&amp;<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a5b4d1f00adf1fa588e2ccafec72f6e05" kindref="member">pbandit</ref>-&gt;update(arm,<sp/>reward,<sp/>context);</highlight></codeline>
<codeline lineno="100" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1abfbcbb2eedfe06a4843c99cbd269a0d6" refkind="member"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ProgramType<sp/>PT&gt;</highlight></codeline>
<codeline lineno="103" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a1a5001879a43a4b5e0cd7241fdd01334" refkind="member"><highlight class="normal">VectorXf<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a1a5001879a43a4b5e0cd7241fdd01334" kindref="member">Bandit&lt;T&gt;::get_context</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d88/structBrush_1_1Program" kindref="compound">Program&lt;PT&gt;</ref>&amp;<sp/>program,<sp/><ref refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a17c3340457413a3a80dea80d5f07e459" kindref="member">Iter</ref><sp/>spot,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/dc3/structBrush_1_1SearchSpace" kindref="compound">SearchSpace</ref><sp/>&amp;ss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref><sp/>&amp;d)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>for<sp/>better<sp/>performance,<sp/>get_context<sp/>should<sp/>calculate<sp/>the<sp/>context<sp/>only<sp/>if<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pbandit<sp/>is<sp/>of<sp/>a<sp/>contextual<sp/>type.<sp/>otherwise,<sp/>return<sp/>empty<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1affb89017044ba912926e6713cb1ffda1" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Inside<sp/>get_context&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorXf<sp/>context;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>SECOND<sp/>APPROACH:<sp/>prediction<sp/>vector<sp/>of<sp/>the<sp/>spot<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dc/d5c/namespaceBrush_1a1d836cd56c93c1a9e89f76768fa59582" kindref="member">PT</ref>==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366abe2f9eac301f8c5b7acffd6b3c458faa" kindref="member">ProgramType::Regressor</ref>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;RegressorProgram<sp/>detected\n&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a1f4eabc175f8f7e1b8308be103024d4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>code<sp/>below<sp/>to<sp/>work<sp/>with<sp/>the<sp/>whole<sp/>tree<sp/>prediction<sp/>-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayXf<sp/>out<sp/>=<sp/>(*program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref>.begin().node).template<sp/>predict&lt;ArrayXf&gt;(d);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>predicting<sp/>the<sp/>spot<sp/>node<sp/>--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>context<sp/>=<sp/>(*spot.node).template<sp/>predict&lt;ArrayXf&gt;(d);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1aafb91bb50c407dfbd67c0ef312882a36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dc/d5c/namespaceBrush_1a1d836cd56c93c1a9e89f76768fa59582" kindref="member">PT</ref>==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366a3cdc33a35d0e4f3b9bae953babd8f9b4" kindref="member">ProgramType::BinaryClassifier</ref>)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;ClassifierProgram<sp/>detected\n&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="d4/d90/structBrush_1_1MAB_1_1Bandit_1a1a5001879a43a4b5e0cd7241fdd01334" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>code<sp/>below<sp/>to<sp/>work<sp/>with<sp/>the<sp/>whole<sp/>tree<sp/>prediction<sp/>-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayXf<sp/>out<sp/>=<sp/>(*program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref>.begin().node).template<sp/>predict&lt;ArrayXf&gt;(d);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>=<sp/>ArrayXf(out.template<sp/>cast&lt;float&gt;());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>predicting<sp/>the<sp/>spot<sp/>node<sp/>--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ArrayXf<sp/>logit<sp/>=<sp/>(*spot.node).template<sp/>predict&lt;ArrayXf&gt;(d);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ArrayXb<sp/>pred<sp/><sp/>=<sp/>(logit<sp/>&gt;<sp/>0.5);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>context<sp/>=<sp/>ArrayXf(pred.template<sp/>cast&lt;float&gt;());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dc/d5c/namespaceBrush_1a1d836cd56c93c1a9e89f76768fa59582" kindref="member">PT</ref>==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366ac62539fc5a23115fca906befbd511c0a" kindref="member">ProgramType::MulticlassClassifier</ref>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;MulticlassClassifierProgram<sp/>detected\n&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>code<sp/>below<sp/>to<sp/>work<sp/>with<sp/>the<sp/>whole<sp/>tree<sp/>prediction<sp/>-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayXXf<sp/>out<sp/>=<sp/>(*program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref>.begin().node).template<sp/>predict&lt;ArrayXXf&gt;(d);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>argmax<sp/>=<sp/><ref refid="d9/d1b/structBrush_1_1Function" kindref="compound">Function&lt;NodeType::ArgMax&gt;</ref>{};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>=<sp/>ArrayXf(argmax(out).</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>cast&lt;float&gt;());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>predicting<sp/>the<sp/>spot<sp/>node<sp/>--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dc/d5c/namespaceBrush_1a1d836cd56c93c1a9e89f76768fa59582" kindref="member">PT</ref>==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366aca702b6b08355f71cf4b1a17a8e16b8b" kindref="member">ProgramType::Representer</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MulticlassClassifierProgram<sp/>detected,<sp/>not<sp/>implemented\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d41/error_8h_1aa4c550bcd71e4ec1c97b111e1360509a" kindref="member">HANDLE_ERROR_THROW</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>predict<sp/>available<sp/>for<sp/>the<sp/>class.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIRST<sp/>APPROACH:<sp/>label<sp/>encoding<sp/>of<sp/>nodes<sp/>above/below/on<sp/>the<sp/>spot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>context<sp/>is<sp/>3<sp/>times<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>in<sp/>the<sp/>search<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>represents<sp/>a<sp/>label<sp/>encoding<sp/>of<sp/>the<sp/>Tree<sp/>structure,<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>third<sp/>represents<sp/>number<sp/>of<sp/>nodes<sp/>above<sp/>the<sp/>spot,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>second<sp/>represents<sp/>the<sp/>spot,<sp/>and<sp/>the<sp/>third<sp/>represents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>below<sp/>the<sp/>spot.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>below<sp/>works<sp/>as<sp/>a<sp/>reference<sp/>of<sp/>the<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Tree:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>it<sp/>=<sp/>Tree.begin();<sp/>it<sp/>!=<sp/>Tree.end();<sp/>++it)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Tree.depth(it);<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*it).name<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Spot<sp/>name:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*spot).name<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size_t<sp/>tot_operators<sp/>=<sp/>ss.op_names.size();<sp/>//NodeTypes::Count;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size_t<sp/>tot_features<sp/><sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(const<sp/>auto&amp;<sp/>pair<sp/>:<sp/>ss.terminal_map)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>tot_features<sp/>+=<sp/>pair.second.size();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size_t<sp/>tot_symbols<sp/>=<sp/>tot_operators<sp/>+<sp/>tot_features;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VectorXf<sp/>context(<sp/>3<sp/>*<sp/>tot_symbols<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>context.setZero();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>it<sp/>=<sp/>Tree.begin();<sp/>it<sp/>!=<sp/>Tree.end();<sp/>++it)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(Tree.is_valid(it))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Check<sp/>succeeded<sp/>for<sp/>node:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*it).name<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Depth<sp/>of<sp/>spot:<sp/>&quot;<sp/>&lt;&lt;<sp/>Tree.depth(spot)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Depth<sp/>of<sp/>it:<sp/>&quot;<sp/>&lt;&lt;<sp/>Tree.depth(it)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;It<sp/>is<sp/>the<sp/>spot,<sp/>searching<sp/>for<sp/>it<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>deciding<sp/>if<sp/>it<sp/>is<sp/>above<sp/>or<sp/>below<sp/>the<sp/>spot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>pos_shift<sp/>=<sp/>0;<sp/>//<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(it<sp/>==<sp/>spot)<sp/>{<sp/>//<sp/>spot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_shift<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Tree.is_in_subTree(it,<sp/>spot))<sp/>//<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_shift<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Position<sp/>shift:<sp/>&quot;<sp/>&lt;&lt;<sp/>pos_shift<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Is&lt;NodeType::Terminal,<sp/>NodeType::Constant,<sp/>NodeType::MeanLabel&gt;((*it).node_type)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>feature_index<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>iterating<sp/>using<sp/>terminal_types<sp/>since<sp/>it<sp/>is<sp/>ordered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>terminal<sp/>:<sp/>ss.terminal_map.at((*it).ret_type))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(terminal.name<sp/>==<sp/>(*it).name)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Just<sp/>one<sp/>hot<sp/>encode<sp/>--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context((tot_operators<sp/>+<sp/>feature_index)<sp/>+<sp/>pos_shift*tot_symbols)<sp/>+=<sp/>1.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>encode<sp/>with<sp/>weights<sp/>--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>int<sp/>Tree_complexity<sp/>=<sp/>operator_complexities.at((*it).node_type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>((*it).get_is_weighted()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>&amp;&amp;<sp/><sp/>Isnt&lt;NodeType::Constant,<sp/>NodeType::MeanLabel&gt;((*it).node_type)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>if<sp/>((Is&lt;NodeType::OffsetSum&gt;((*it).node_type)<sp/>&amp;&amp;<sp/>(*it).W<sp/>!=<sp/>0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((*it).W<sp/>!=<sp/>1.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tree_complexity<sp/>=<sp/>operator_complexities.at(NodeType::Mul)<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator_complexities.at(NodeType::Constant)<sp/>+<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tree_complexity;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>context((tot_operators<sp/>+<sp/>feature_index)<sp/>+<sp/>pos_shift*tot_symbols)<sp/>+=<sp/>static_cast&lt;float&gt;(Tree_complexity);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>use<sp/>recursive<sp/>evaluation<sp/>to<sp/>get<sp/>the<sp/>complexity<sp/>of<sp/>the<sp/>subTree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>linear<sp/>complexity<sp/>to<sp/>avoid<sp/>exponential<sp/>increase<sp/>of<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>int<sp/>complexity<sp/>=<sp/>it.node-&gt;get_linear_complexity();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>context((tot_operators<sp/>+<sp/>feature_index)<sp/>+<sp/>pos_shift*tot_symbols)<sp/>+=<sp/>static_cast&lt;float&gt;(complexity);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Below<sp/>spot,<sp/>terminal:<sp/>&quot;<sp/>&lt;&lt;<sp/>terminal.name<sp/>&lt;&lt;<sp/>&quot;<sp/>at<sp/>feature<sp/>index<sp/>&quot;<sp/>&lt;&lt;<sp/>feature_index<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++feature_index;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>it_op<sp/>=<sp/>std::find(ss.op_names.begin(),<sp/>ss.op_names.end(),<sp/>(*it).name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(it_op<sp/>!=<sp/>ss.op_names.end())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>op_index<sp/>=<sp/>std::distance(ss.op_names.begin(),<sp/>it_op);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context(pos_shift<sp/>*<sp/>tot_symbols<sp/>+<sp/>op_index)<sp/>+=<sp/>1.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Below<sp/>spot,<sp/>operator:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*it).name<sp/>&lt;&lt;<sp/>&quot;<sp/>of<sp/>index<sp/>&quot;<sp/>&lt;&lt;<sp/>pos_shift*tot_symbols<sp/>+<sp/>op_index<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR_THROW(&quot;Undefined<sp/>operator<sp/>&quot;<sp/>+<sp/>(*it).name<sp/>+<sp/>&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Context<sp/>part<sp/>1:<sp/>&quot;<sp/>&lt;&lt;<sp/>context.head(tot_symbols).transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Context<sp/>part<sp/>2:<sp/>&quot;<sp/>&lt;&lt;<sp/>context.segment(tot_symbols,<sp/>tot_symbols).transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Context<sp/>part<sp/>3:<sp/>&quot;<sp/>&lt;&lt;<sp/>context.tail(tot_symbols).transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>MAB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Brush</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/brush/brush/src/bandit/bandit.cpp"/>
  </compounddef>
</doxygen>
