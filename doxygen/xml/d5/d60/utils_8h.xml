<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d5/d60/utils_8h" kind="file" language="C++">
    <compoundname>utils.h</compoundname>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">vector</includes>
    <includes local="no">set</includes>
    <includes local="no">fstream</includes>
    <includes local="no">chrono</includes>
    <includes local="no">ostream</includes>
    <includes local="no">map</includes>
    <includes refid="d8/dc0/init_8h" local="yes">../init.h</includes>
    <includes refid="da/d41/error_8h" local="yes">error.h</includes>
    <includes local="no">typeindex</includes>
    <includes local="no">iterator</includes>
    <includes local="no">tuple</includes>
    <includedby refid="d7/d00/bandit_8h" local="yes">bandit.h</includedby>
    <includedby refid="d2/d6f/constants_8h" local="yes">constants.h</includedby>
    <includedby refid="d2/dbd/data_8h" local="yes">data.h</includedby>
    <includedby refid="dc/d7a/fitness_8h" local="yes">fitness.h</includedby>
    <includedby refid="d8/d5c/functions_8h" local="yes">functions.h</includedby>
    <includedby refid="d1/db6/inexact_8h" local="yes">inexact.h</includedby>
    <includedby refid="d5/d5a/io_8cpp" local="yes">io.cpp</includedby>
    <includedby refid="d3/d12/lexicase_8h" local="yes">lexicase.h</includedby>
    <includedby refid="d1/d77/node_8h" local="yes">node.h</includedby>
    <includedby refid="de/d26/nodetype_8h" local="yes">nodetype.h</includedby>
    <includedby refid="d7/de0/operator_8h" local="yes">operator.h</includedby>
    <includedby refid="da/d33/params_8h" local="yes">params.h</includedby>
    <includedby refid="d2/d76/population_8h" local="yes">population.h</includedby>
    <includedby refid="d1/dea/program_8h" local="yes">program.h</includedby>
    <includedby refid="d9/d99/search__space_8h" local="yes">search_space.h</includedby>
    <includedby refid="db/ddd/thompson_8h" local="yes">thompson.h</includedby>
    <includedby refid="d9/df7/timeseries_8h" local="yes">timeseries.h</includedby>
    <includedby refid="de/d06/utils_8cpp" local="yes">utils.cpp</includedby>
    <incdepgraph>
      <node id="9">
        <label>../init.h</label>
        <link refid="d8/dc0/init_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>error.h</label>
        <link refid="da/d41/error_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>utils.h</label>
        <link refid="d5/d60/utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen/Dense</label>
      </node>
      <node id="21">
        <label>ceres/jet.h</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="22">
        <label>concepts</label>
      </node>
      <node id="16">
        <label>fmt/format.h</label>
      </node>
      <node id="15">
        <label>fmt/ostream.h</label>
      </node>
      <node id="17">
        <label>fmt/ranges.h</label>
      </node>
      <node id="5">
        <label>fstream</label>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="25">
        <label>iterator</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="18">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="7">
        <label>ostream</label>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="10">
        <label>stdint.h</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="26">
        <label>tuple</label>
      </node>
      <node id="24">
        <label>typeindex</label>
      </node>
      <node id="20">
        <label>variant</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>bandit.cpp</label>
        <link refid="d7/d01/bandit_8cpp"/>
      </node>
      <node id="2">
        <label>bandit.h</label>
        <link refid="d7/d00/bandit_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>bandit_operator.cpp</label>
        <link refid="dd/d4e/bandit__operator_8cpp"/>
      </node>
      <node id="20">
        <label>bandit_operator.h</label>
        <link refid="da/d8e/bandit__operator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>dummy.cpp</label>
        <link refid="d4/d05/dummy_8cpp"/>
      </node>
      <node id="22">
        <label>dummy.h</label>
        <link refid="d2/d94/dummy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>thompson.cpp</label>
        <link refid="d3/d12/thompson_8cpp"/>
      </node>
      <node id="24">
        <label>thompson.h</label>
        <link refid="db/ddd/thompson_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>bind_dataset.cpp</label>
        <link refid="d9/d40/bind__dataset_8cpp"/>
      </node>
      <node id="5">
        <label>bind_engines.cpp</label>
        <link refid="d1/df0/bind__engines_8cpp"/>
      </node>
      <node id="4">
        <label>bind_engines.h</label>
        <link refid="d4/d93/bind__engines_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>bind_evaluator.cpp</label>
        <link refid="da/dff/bind__evaluator_8cpp"/>
      </node>
      <node id="38">
        <label>bind_evaluator.h</label>
        <link refid="d0/d67/bind__evaluator_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>bind_fitness.cpp</label>
        <link refid="d8/d80/bind__fitness_8cpp"/>
      </node>
      <node id="36">
        <label>bind_individuals.cpp</label>
        <link refid="d9/d27/bind__individuals_8cpp"/>
      </node>
      <node id="35">
        <label>bind_individuals.h</label>
        <link refid="d6/ddc/bind__individuals_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>bind_params.cpp</label>
        <link refid="da/dbf/bind__params_8cpp"/>
      </node>
      <node id="30">
        <label>bind_programs.cpp</label>
        <link refid="d9/d26/bind__programs_8cpp"/>
      </node>
      <node id="29">
        <label>bind_programs.h</label>
        <link refid="d6/d3f/bind__programs_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>bind_search_space.cpp</label>
        <link refid="d0/d94/bind__search__space_8cpp"/>
      </node>
      <node id="44">
        <label>bind_selection.cpp</label>
        <link refid="d7/dce/bind__selection_8cpp"/>
      </node>
      <node id="43">
        <label>bind_selection.h</label>
        <link refid="da/d67/bind__selection_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>bind_variation.cpp</label>
        <link refid="df/d41/bind__variation_8cpp"/>
      </node>
      <node id="6">
        <label>bind_variation.h</label>
        <link refid="d8/df7/bind__variation_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>data.cpp</label>
        <link refid="da/dc9/data_8cpp"/>
      </node>
      <node id="14">
        <label>data.h</label>
        <link refid="d2/dbd/data_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>io.cpp</label>
        <link refid="d5/d5a/io_8cpp"/>
      </node>
      <node id="60">
        <label>io.h</label>
        <link refid="dc/dac/io_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>timeseries.cpp</label>
        <link refid="d2/dee/timeseries_8cpp"/>
      </node>
      <node id="74">
        <label>timeseries.h</label>
        <link refid="d9/df7/timeseries_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>engine.cpp</label>
        <link refid="da/d5c/engine_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>engine.h</label>
        <link refid="d1/d55/engine_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>evaluation.cpp</label>
        <link refid="d9/d6a/evaluation_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>evaluation.h</label>
        <link refid="d3/df9/evaluation_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>metrics.cpp</label>
        <link refid="dd/da2/metrics_8cpp"/>
      </node>
      <node id="62">
        <label>metrics.h</label>
        <link refid="df/d34/metrics_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>scorer.h</label>
        <link refid="da/d3b/scorer_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>fitness.cpp</label>
        <link refid="dc/d5c/fitness_8cpp"/>
      </node>
      <node id="69">
        <label>fitness.h</label>
        <link refid="dc/d7a/fitness_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>individual.cpp</label>
        <link refid="db/df6/individual_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>individual.h</label>
        <link refid="d5/d1f/individual_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>params.h</label>
        <link refid="da/d33/params_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>archive.cpp</label>
        <link refid="d7/d05/archive_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>archive.h</label>
        <link refid="d9/d28/archive_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>population.cpp</label>
        <link refid="d7/d4a/population_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>population.h</label>
        <link refid="d2/d76/population_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>dispatch_table.cpp</label>
        <link refid="df/d47/dispatch__table_8cpp"/>
      </node>
      <node id="17">
        <label>dispatch_table.h</label>
        <link refid="df/d61/dispatch__table_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>functions.h</label>
        <link refid="d8/d5c/functions_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>node.cpp</label>
        <link refid="d7/d70/node_8cpp"/>
      </node>
      <node id="65">
        <label>node.h</label>
        <link refid="d1/d77/node_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>nodetype.cpp</label>
        <link refid="df/dfe/nodetype_8cpp"/>
      </node>
      <node id="67">
        <label>nodetype.h</label>
        <link refid="de/d26/nodetype_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>operator.h</label>
        <link refid="d7/de0/operator_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>program.h</label>
        <link refid="d1/dea/program_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>split.cpp</label>
        <link refid="d4/d59/split_8cpp"/>
      </node>
      <node id="58">
        <label>tree_node.cpp</label>
        <link refid="dd/d06/tree__node_8cpp"/>
      </node>
      <node id="19">
        <label>tree_node.h</label>
        <link refid="d1/da6/tree__node_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>lexicase.cpp</label>
        <link refid="d8/dac/lexicase_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>lexicase.h</label>
        <link refid="d3/d12/lexicase_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>nsga2.cpp</label>
        <link refid="de/d0d/nsga2_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>nsga2.h</label>
        <link refid="d3/d06/nsga2_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>selection.cpp</label>
        <link refid="df/dbb/selection_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>selection.h</label>
        <link refid="df/d48/selection_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>selection_operator.cpp</label>
        <link refid="d4/db2/selection__operator_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>selection_operator.h</label>
        <link refid="dd/d5d/selection__operator_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>constants.cpp</label>
        <link refid="d6/d80/constants_8cpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>constants.h</label>
        <link refid="d2/d6f/constants_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>inexact.cpp</label>
        <link refid="de/d79/inexact_8cpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>inexact.h</label>
        <link refid="d1/db6/inexact_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>utils.cpp</label>
        <link refid="de/d06/utils_8cpp"/>
      </node>
      <node id="1">
        <label>utils.h</label>
        <link refid="d5/d60/utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>search_space.cpp</label>
        <link refid="da/d48/search__space_8cpp"/>
      </node>
      <node id="57">
        <label>search_space.h</label>
        <link refid="d9/d99/search__space_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>variation.cpp</label>
        <link refid="d1/d64/variation_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>variation.h</label>
        <link refid="d4/d1f/variation_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d8/d3c/structnlohmann_1_1adl__serializer_3_01std_1_1shared__ptr_3_01T_01_4_01_4" prot="public">nlohmann::adl_serializer&lt; std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="d4/d0d/structstd_1_1hash_3_01std_1_1vector_3_01float_01_4_01_4" prot="public">std::hash&lt; std::vector&lt; float &gt; &gt;</innerclass>
    <innerclass refid="de/d30/structstd_1_1hash_3_01std_1_1tuple_3_01TT_8_8_8_01_4_01_4" prot="public">std::hash&lt; std::tuple&lt; TT... &gt; &gt;</innerclass>
    <innerclass refid="d8/da4/classBrush_1_1Util_1_1Timer" prot="public">Brush::Util::Timer</innerclass>
    <innerclass refid="d2/df8/structBrush_1_1Util_1_1Normalizer" prot="public">Brush::Util::Normalizer</innerclass>
    <innerclass refid="db/d7e/structBrush_1_1Util_1_1Log__Stats" prot="public">Brush::Util::Log_Stats</innerclass>
    <innernamespace refid="d6/d2e/namespaceBrush_1_1Util">Brush::Util</innernamespace>
    <innernamespace refid="d3/d9b/namespacenlohmann">nlohmann</innernamespace>
    <innernamespace refid="d8/dcc/namespacestd">std</innernamespace>
    <innernamespace refid="dc/d5c/namespaceBrush">Brush</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Brush</highlight></codeline>
<codeline lineno="2"><highlight class="comment">copyright<sp/>2020<sp/>William<sp/>La<sp/>Cava</highlight></codeline>
<codeline lineno="3"><highlight class="comment">license:<sp/>GNU/GPL<sp/>v3</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/dc0/init_8h" kindref="compound">../init.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="da/d41/error_8h" kindref="compound">error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeindex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>std::ostram_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;execution&gt;<sp/>//<sp/>parallel<sp/>policies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Eigen;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>serializing<sp/>vector<sp/>of<sp/>shared<sp/>ptr:<sp/>https://github.com/nlohmann/json/discussions/2377</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(used<sp/>in<sp/>population.h,<sp/>which<sp/>has<sp/>a<sp/>shared_ptr<sp/>vector)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="d3/d9b/namespacenlohmann" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d3/d9b/namespacenlohmann" kindref="compound">nlohmann</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="35" refid="d8/d3c/structnlohmann_1_1adl__serializer_3_01std_1_1shared__ptr_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">adl_serializer&lt;<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::shared_ptr&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37" refid="d8/d3c/structnlohmann_1_1adl__serializer_3_01std_1_1shared__ptr_3_01T_01_4_01_4_1a92685b9751ed834e511152e058816f29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d3c/structnlohmann_1_1adl__serializer_3_01std_1_1shared__ptr_3_01T_01_4_01_4_1a92685b9751ed834e511152e058816f29" kindref="member">to_json</ref>(json&amp;<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;T&gt;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opt)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>*opt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="d8/d3c/structnlohmann_1_1adl__serializer_3_01std_1_1shared__ptr_3_01T_01_4_01_4_1aac893bf742fa56d6b331b8047eb0eb7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d3c/structnlohmann_1_1adl__serializer_3_01std_1_1shared__ptr_3_01T_01_4_01_4_1aac893bf742fa56d6b331b8047eb0eb7c" kindref="member">from_json</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>json&amp;<sp/>j,<sp/>std::shared_ptr&lt;T&gt;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.is_null())</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(j.get&lt;T&gt;()));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>overload<sp/>operators<sp/>and<sp/>compare<sp/>our<sp/>individuals,<sp/>we<sp/>need<sp/>to<sp/>be<sp/>able<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>serialize<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>with<sp/>DEAP<sp/>(so<sp/>our<sp/>brush<sp/>individuals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>hashed<sp/>and<sp/>compared<sp/>to<sp/>each<sp/>other<sp/>in<sp/>python<sp/>side)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight></codeline>
<codeline lineno="68" refid="d4/d0d/structstd_1_1hash_3_01std_1_1vector_3_01float_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">std::hash&lt;<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::vector&lt;float&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="69" refid="d4/d0d/structstd_1_1hash_3_01std_1_1vector_3_01float_01_4_01_4_1a7dbc278cbdb41e00ab637bba9e2221b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="d4/d0d/structstd_1_1hash_3_01std_1_1vector_3_01float_01_4_01_4_1a7dbc278cbdb41e00ab637bba9e2221b9" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>seed<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>elem<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>^=<sp/>std::hash&lt;float&gt;{}(elem)<sp/>+<sp/><sp/>0x9e3779b9<sp/>+<sp/>(seed<sp/>&lt;&lt;<sp/><sp/>6)<sp/>+<sp/>(seed<sp/>&gt;&gt;<sp/><sp/>2);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seed;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>A<sp/>std::hash<sp/>specialization<sp/>for<sp/>tuples.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>See<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@tparam<sp/>TTypes<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>template&lt;typename...<sp/>TTypes&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>class<sp/>hash&lt;std::tuple&lt;TTypes...&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>std::tuple&lt;TTypes...&gt;<sp/>Tuple;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;int<sp/>N&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>operator()(Tuple<sp/>value)<sp/>const<sp/>{<sp/>return<sp/>0;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;int<sp/>N,<sp/>typename<sp/>THead,<sp/>typename...<sp/>TTail&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>operator()(Tuple<sp/>value)<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>int<sp/>Index<sp/>=<sp/>N<sp/>-<sp/>sizeof...(TTail)<sp/>-<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>hash&lt;THead&gt;()(std::get&lt;Index&gt;(value))<sp/>^<sp/>operator()&lt;N,<sp/>TTail...&gt;(value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>operator()(Tuple<sp/>value)<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>operator()&lt;sizeof...(TTypes),<sp/>TTypes...&gt;(value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Code<sp/>from<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reciprocal<sp/>of<sp/>the<sp/>golden<sp/>ratio<sp/>helps<sp/>spread<sp/>entropy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>and<sp/>handles<sp/>duplicates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>Mike<sp/>Seymour<sp/>in<sp/>magic-numbers-in-boosthash-combine:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://stackoverflow.com/questions/4948780</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hash_combine(std::size_t&amp;<sp/>seed,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>^=<sp/>std::hash&lt;T&gt;()(v)<sp/>+<sp/>0x9e3779b9<sp/>+<sp/>(seed&lt;&lt;6)<sp/>+<sp/>(seed&gt;&gt;2);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursive<sp/>template<sp/>code<sp/>derived<sp/>from<sp/>Matthieu<sp/>M.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>Tuple,<sp/>size_t<sp/>Index<sp/>=<sp/>std::tuple_size&lt;Tuple&gt;::value<sp/>-<sp/>1&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">HashValueImpl</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>seed,<sp/>Tuple<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tuple)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HashValueImpl&lt;Tuple,<sp/>Index-1&gt;::apply(seed,<sp/>tuple);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_combine(seed,<sp/>std::get&lt;Index&gt;(tuple));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">HashValueImpl&lt;Tuple,0&gt;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>seed,<sp/>Tuple<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tuple)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_combine(seed,<sp/>std::get&lt;0&gt;(tuple));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>TT&gt;</highlight></codeline>
<codeline lineno="151" refid="de/d30/structstd_1_1hash_3_01std_1_1tuple_3_01TT_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::tuple&lt;TT...&gt;&gt;<sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="de/d30/structstd_1_1hash_3_01std_1_1tuple_3_01TT_8_8_8_01_4_01_4_1afdf58525bd44e80be2af8355db0eba2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d30/structstd_1_1hash_3_01std_1_1tuple_3_01TT_8_8_8_01_4_01_4_1afdf58525bd44e80be2af8355db0eba2e" kindref="member">operator()</ref>(std::tuple&lt;TT...&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="155"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HashValueImpl&lt;std::tuple&lt;TT...&gt;<sp/>&gt;::apply(seed,<sp/>tt);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dc/d5c/namespaceBrush" kindref="compound">Brush</ref>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d6/d2e/namespaceBrush_1_1Util" kindref="compound">Util</ref>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1afa1fde52ad1a13ccf861682c1d37896a" kindref="member">PBSTR</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1afdf0a27a6e1782537f1d1751e1efde51" kindref="member">PBWIDTH</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tuple<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/15103975/my-stdhash-for-stdtuples-any-improvements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="175" refid="d6/d2e/namespaceBrush_1_1Util_1adc1985a99c2dc32ac23e139322748380" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d6/d2e/namespaceBrush_1_1Util_1adc1985a99c2dc32ac23e139322748380" kindref="member">TypeMap</ref><sp/>=<sp/>std::map&lt;std::type_index,<sp/>T&gt;;<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1adc1985a99c2dc32ac23e139322748380" kindref="member">TypeMap&lt;std::string&gt;</ref><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a739956e96c77117c32f45cdb30472652" kindref="member">type_names</ref>;<sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>class<sp/>TYPES;<sp/>//<sp/>int;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extern<sp/>TypeMap&lt;TYPES&gt;<sp/>type_enum;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>TypeMap<sp/>=<sp/>std::unordered_map&lt;TypeInfoPtr,<sp/>T,<sp/>Hasher,<sp/>EqualTo&gt;;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a61817392e38bfbd623504cd8def55b3f" kindref="member">clean</ref>(ArrayXf&amp;<sp/>x);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">std::string<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a3837fbd31ac81e3f8db8aaa399fda345" kindref="member">ltrim</ref>(std::string<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>chars<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\t\n\v\f\r<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal">std::string<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a7ee435e912b43d1efe927860141fdafa" kindref="member">rtrim</ref>(std::string<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>chars<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\t\n\v\f\r<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal">std::string<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1ad7cd519e42ccafa3c6f4242a0c2b6749" kindref="member">trim</ref>(std::string<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>chars<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\t\n\v\f\r<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;template&lt;class&gt;<sp/>class<sp/>C,<sp/>class<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="d6/d2e/namespaceBrush_1_1Util_1ab03528e8d9652013786252f63b6d5840" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1ab03528e8d9652013786252f63b6d5840" kindref="member">in</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>i)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::find(v.begin(),<sp/>v.end(),<sp/>i)<sp/>!=<sp/>v.end();</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>float<sp/>median(const<sp/>ArrayXf&amp;<sp/>v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>float<sp/>median(const<sp/>Eigen::Ref&lt;const<sp/>ArrayXf&gt;&amp;<sp/>v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar=T::Scalar&gt;</highlight></codeline>
<codeline lineno="202" refid="d6/d2e/namespaceBrush_1_1Util_1a4d848757d9123e0562a7d87b44f1bdc6" refkind="member"><highlight class="normal"><ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Scalar</ref><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a4d848757d9123e0562a7d87b44f1bdc6" kindref="member">median</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>v)<sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instantiate<sp/>a<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Scalar&gt;<sp/>x(v.size());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>x.assign(v.data(),v.data()+v.size());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>middle<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>x.size()/2;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>nth<sp/>element<sp/>of<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>nth_element(x.begin(),x.begin()+n,x.end());</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>evenly<sp/>sized,<sp/>return<sp/>average<sp/>of<sp/>middle<sp/>two<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.size()<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nth_element(x.begin(),x.begin()+n-1,x.end());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x[n]<sp/>+<sp/>x[n-1])<sp/>/<sp/><ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Scalar</ref>(2);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>return<sp/>middle<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x[n];</highlight></codeline>
<codeline lineno="219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="d6/d2e/namespaceBrush_1_1Util_1a95368f7dc6c9ced55ce63b8c5f27a3ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1ad88c0170839ba79e41dc5715e77abfc8" kindref="member">variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mean);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1ad88c0170839ba79e41dc5715e77abfc8" kindref="member">variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>v);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a3a5e794811c2588fb5910b4d5b9abdcb" kindref="member">skew</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>v);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a647e7137bb014b8fb21cf0d9a985584b" kindref="member">kurtosis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>v);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1ae119a14eab4e4899608c4e766acf54c0" kindref="member">covariance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>y);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a26cf881c06b230990b810de739347b58" kindref="member">slope</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>y);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a3ecdd0fbfe8f46304f0b48992cf5726c" kindref="member">pearson_correlation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>y);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a27c00366227bc7afa5d057ca555f9e12" kindref="member">mad</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>x);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="247" refid="d6/d2e/namespaceBrush_1_1Util_1a3a18a9ccd426286d474e8507adee1025" refkind="member"><highlight class="normal">vector&lt;size_t&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a3a18a9ccd426286d474e8507adee1025" kindref="member">argsort</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ascending=</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>original<sp/>index<sp/>locations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;size_t&gt;<sp/>idx(v.size());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(idx.begin(),<sp/>idx.end(),<sp/>0);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>indexes<sp/>based<sp/>on<sp/>comparing<sp/>values<sp/>in<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ascending)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(idx.begin(),<sp/>idx.end(),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;v](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i2)<sp/>{return<sp/>v[i1]<sp/>&lt;<sp/>v[i2];});</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(idx.begin(),<sp/>idx.end(),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;v](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i2)<sp/>{return<sp/>v[i1]<sp/>&gt;<sp/>v[i2];});</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="d8/da4/classBrush_1_1Util_1_1Timer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1a1038d1fb626abf7b44ca1d5f63f1ca36" kindref="member">Timer</ref><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271" refid="d8/da4/classBrush_1_1Util_1_1Timer_1ab650cf34f8650b85732e59d8857eb616" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::chrono::high_resolution_clock<sp/><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1ab650cf34f8650b85732e59d8857eb616" kindref="member">high_resolution_clock</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="d8/da4/classBrush_1_1Util_1_1Timer_1a29db3bae8726071dce6ca281d77ed99a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::chrono::seconds<sp/><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1a29db3bae8726071dce6ca281d77ed99a" kindref="member">seconds</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1a1038d1fb626abf7b44ca1d5f63f1ca36" kindref="member">Timer</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>run<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1a2b0d0e5b94f317dcc50d7cffc45321e3" kindref="member">Reset</ref>();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration&lt;float&gt;<sp/><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1a0b2b4a4a29477bf98ec3b0b80b29685c" kindref="member">Elapsed</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="283" refid="d8/da4/classBrush_1_1Util_1_1Timer_1ae8824224415e350b33ab0d09fd82e381" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::basic_ostream&lt;T,<sp/>Traits&gt;&amp;<sp/><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1ae8824224415e350b33ab0d09fd82e381" kindref="member">operator&lt;&lt;</ref>(std::basic_ostream&lt;T,<sp/>Traits&gt;&amp;<sp/>out,<sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1a1038d1fb626abf7b44ca1d5f63f1ca36" kindref="member">Timer</ref>&amp;<sp/>timer)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>&lt;&lt;<sp/>timer.<ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1a0b2b4a4a29477bf98ec3b0b80b29685c" kindref="member">Elapsed</ref>().count();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="290" refid="d8/da4/classBrush_1_1Util_1_1Timer_1ae986058e0b64dd5bd65dace34c7bfde1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high_resolution_clock::time_point<sp/><ref refid="d8/da4/classBrush_1_1Util_1_1Timer_1ae986058e0b64dd5bd65dace34c7bfde1" kindref="member">_start</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal">};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="296" refid="d6/d2e/namespaceBrush_1_1Util_1a49fa99aae6db3940dee2bca4e6358309" refkind="member"><highlight class="normal">vector&lt;T&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a49fa99aae6db3940dee2bca4e6358309" kindref="member">softmax</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;&amp;<sp/>w)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>w_new;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w.size();<sp/>++x)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>exp(w[x]);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w.size();<sp/>++x)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_new.push_back(exp(w[x])/sum);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w_new;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="d2/df8/structBrush_1_1Util_1_1Normalizer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a93074bf3c7c1853f9e7929ec4b221a8a" kindref="member">Normalizer</ref></highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314" refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a93074bf3c7c1853f9e7929ec4b221a8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a93074bf3c7c1853f9e7929ec4b221a8a" kindref="member">Normalizer</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sa=</highlight><highlight class="keyword">true</highlight><highlight class="normal">):<sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a4073d38c4967258cec964c8f455a1d92" kindref="member">scale_all</ref>(sa)<sp/>{};</highlight></codeline>
<codeline lineno="315" refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1acf13e625f058c227e745e4bd588a423a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1acf13e625f058c227e745e4bd588a423a" kindref="member">scale</ref>;</highlight></codeline>
<codeline lineno="316" refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a34e824201c3394b7d7bb5bb5fe49a5e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a34e824201c3394b7d7bb5bb5fe49a5e8" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="317" refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a574c6632238c45c3b505b2c0eab9744e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;char&gt;<sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a574c6632238c45c3b505b2c0eab9744e" kindref="member">dtypes</ref>;</highlight></codeline>
<codeline lineno="318" refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a4073d38c4967258cec964c8f455a1d92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a4073d38c4967258cec964c8f455a1d92" kindref="member">scale_all</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a46115a5bd9d52f588f7553373b8b7480" kindref="member">fit</ref>(MatrixXf&amp;<sp/>X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;char&gt;&amp;<sp/>dt);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1ade9d0b6a950174d04aed5624cba5c7f0" kindref="member">normalize</ref>(MatrixXf&amp;<sp/>X);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1ac58cb50d38623884ab64b854b2680ae0" kindref="member">fit_normalize</ref>(MatrixXf&amp;<sp/>X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;char&gt;&amp;<sp/><ref refid="d2/df8/structBrush_1_1Util_1_1Normalizer_1a574c6632238c45c3b505b2c0eab9744e" kindref="member">dtypes</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">vector&lt;type_index&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a20071cbe143ed15f50742b8b7b1bf725" kindref="member">get_dtypes</ref>(MatrixXf<sp/>&amp;X);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="334" refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" refkind="member"><highlight class="normal">vector&lt;T&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" kindref="member">unique</ref>(vector&lt;T&gt;<sp/>w)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(w.begin(),w.end());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d0/d05/classvector_1_1iterator" kindref="compound">vector&lt;T&gt;::iterator</ref><sp/>it;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::unique(w.begin(),w.end());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>w.resize(std::distance(w.begin(),<sp/>it));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="345" refid="d6/d2e/namespaceBrush_1_1Util_1af0c04b529ce6c3ee0a0c53dacd890aa4" refkind="member"><highlight class="normal">vector&lt;T&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" kindref="member">unique</ref>(Matrix&lt;T,<sp/>-1,<sp/>-1&gt;<sp/>w)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>wv(<sp/>w.data(),<sp/>w.data()+w.size());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" kindref="member">unique</ref>(wv);</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="353" refid="d6/d2e/namespaceBrush_1_1Util_1a4e939b6a15272c8db696bac9fd1a3cee" refkind="member"><highlight class="normal">vector&lt;T&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" kindref="member">unique</ref>(Matrix&lt;T,<sp/>-1,<sp/>1&gt;<sp/>w)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>wv(<sp/>w.data(),<sp/>w.data()+w.size());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" kindref="member">unique</ref>(wv);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="361" refid="d6/d2e/namespaceBrush_1_1Util_1ab1b4143c76ac0fdd7bf92e09472d3921" refkind="member"><highlight class="normal">vector&lt;T&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" kindref="member">unique</ref>(Array&lt;T,<sp/>-1,<sp/>1&gt;<sp/>w)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>wv(<sp/>w.data(),<sp/>w.data()+w.rows()*w.cols());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" kindref="member">unique</ref>(wv);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="369" refid="d6/d2e/namespaceBrush_1_1Util_1a9cd8004de7aab46b7a06f27d440064ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a9cd8004de7aab46b7a06f27d440064ed" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal">std::string<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a0a7a059e331be3f8f7e5d1e0f1123f5a" kindref="member">ReplaceString</ref>(std::string<sp/>subject,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>search,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>replace);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1aa1982ec999d497f97eed7572863a58fa" kindref="member">ReplaceStringInPlace</ref>(std::string&amp;<sp/>subject,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>search,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>replace);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a313cbd04c33a2fe62b87977739337658" kindref="member">condition_number</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXf&amp;<sp/>X);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal">MatrixXf<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a1d2cb1b20c4767ecd0c4ee602b7cda55" kindref="member">corrcoef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXf&amp;<sp/>X);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>mean<sp/>of<sp/>the<sp/>pairwise<sp/>correlations<sp/>of<sp/>a<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a068c0960a6ac697bf70ff5dc762e96da" kindref="member">mean_square_corrcoef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXf&amp;<sp/>X);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1afbb579185a6522b235c40136b5858851" kindref="member">argmiddle</ref>(vector&lt;float&gt;&amp;<sp/>v);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats" kindref="compound">Log_Stats</ref></highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1aebdb57a7b38f632b9855ede6c86eb948" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1aebdb57a7b38f632b9855ede6c86eb948" kindref="member">generation</ref>;</highlight></codeline>
<codeline lineno="400" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ae664f5f7dec3314e1a7cc6bce660eac4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ae664f5f7dec3314e1a7cc6bce660eac4" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1add898f2c47859b9c759a1cab4cda136c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1add898f2c47859b9c759a1cab4cda136c" kindref="member">best_score</ref>;</highlight></codeline>
<codeline lineno="403" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ad14397a3403cfe63bfac32beea700c7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ad14397a3403cfe63bfac32beea700c7a" kindref="member">best_score_v</ref>;</highlight></codeline>
<codeline lineno="404" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ac23e8ca79f408dfc07c4f86a8e89a9ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ac23e8ca79f408dfc07c4f86a8e89a9ca" kindref="member">med_score</ref>;</highlight></codeline>
<codeline lineno="405" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1aad65800dd14b817a5426312d43251e7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1aad65800dd14b817a5426312d43251e7b" kindref="member">med_score_v</ref>;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ac158480ad1d6fc12ea5a20811b115d1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ac158480ad1d6fc12ea5a20811b115d1e" kindref="member">med_size</ref>;</highlight></codeline>
<codeline lineno="408" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ad6978c4386468c44dd252345c11ca126" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1ad6978c4386468c44dd252345c11ca126" kindref="member">med_complexity</ref>;</highlight></codeline>
<codeline lineno="409" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1a07aeaad3d63ca1c76bd1c1fc55f944c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1a07aeaad3d63ca1c76bd1c1fc55f944c2" kindref="member">max_size</ref>;</highlight></codeline>
<codeline lineno="410" refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1a8d36cca3c88663adf33e28043d025b56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned&gt;<sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1a8d36cca3c88663adf33e28043d025b56" kindref="member">max_complexity</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats_1a16227000cf1d98852df3ef1cd6a6efff" kindref="member">update</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timer_count,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bst_score,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bst_score_v,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>md_score,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>md_score_v,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>md_size,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>md_complexity,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>mx_size,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>mx_complexity</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="d6/d2e/namespaceBrush_1_1Util_1a879344781baecb2119f7bde9bddd8660" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats" kindref="compound">Log_Stats</ref><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a879344781baecb2119f7bde9bddd8660" kindref="member">Log_stats</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="d6/d2e/namespaceBrush_1_1Util_1a1c021ad5313b593be72b58625134104f" refkind="member"><highlight class="normal"><ref refid="d6/d2e/namespaceBrush_1_1Util_1a1c021ad5313b593be72b58625134104f" kindref="member">NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</ref>(<ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats" kindref="compound">Log_Stats</ref>,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>generation,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>time,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>best_score,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>best_score_v,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>med_score,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>med_score_v,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>med_size,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>med_complexity,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>max_size,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>max_complexity</highlight></codeline>
<codeline lineno="442"><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">std::enable_if_t&lt;std::is_scalar_v&lt;T&gt;,<sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="447" refid="d6/d2e/namespaceBrush_1_1Util_1a752c4caf35aeeb0e2c354ea7bc952eeb" refkind="member"><highlight class="normal"><ref refid="d6/d2e/namespaceBrush_1_1Util_1a752c4caf35aeeb0e2c354ea7bc952eeb" kindref="member">limited</ref>(T<sp/>x)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isnan(x))</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/><ref refid="d8/dc0/init_8h_1a0c86fe7dc09ca580e891580bf302e659" kindref="member">MAX_FLT</ref>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc0/init_8h_1a0c86fe7dc09ca580e891580bf302e659" kindref="member">MAX_FLT</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/><ref refid="d8/dc0/init_8h_1a8213bd26dbb943e499d0e227fa9b3159" kindref="member">MIN_FLT</ref>)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc0/init_8h_1a8213bd26dbb943e499d0e227fa9b3159" kindref="member">MIN_FLT</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">};</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal">std::enable_if_t&lt;std::is_base_of_v&lt;Eigen::ArrayBase&lt;T&gt;,<sp/>T&gt;,<sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="461" refid="d6/d2e/namespaceBrush_1_1Util_1a061629dafeb96a99b68d4c430838dc72" refkind="member"><highlight class="normal"><ref refid="d6/d2e/namespaceBrush_1_1Util_1a752c4caf35aeeb0e2c354ea7bc952eeb" kindref="member">limited</ref>(T<sp/>x)<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(isnan(x)).select(0,x);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&lt;<sp/><ref refid="d8/dc0/init_8h_1a8213bd26dbb943e499d0e227fa9b3159" kindref="member">MIN_FLT</ref>).select(<ref refid="d8/dc0/init_8h_1a8213bd26dbb943e499d0e227fa9b3159" kindref="member">MIN_FLT</ref>,x);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&gt;<sp/><ref refid="d8/dc0/init_8h_1a0c86fe7dc09ca580e891580bf302e659" kindref="member">MAX_FLT</ref>).select(<ref refid="d8/dc0/init_8h_1a0c86fe7dc09ca580e891580bf302e659" kindref="member">MAX_FLT</ref>,x);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="470" refid="d6/d2e/namespaceBrush_1_1Util_1a23d6d2f736db6e9d84cc27b58cc3bf27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a23d6d2f736db6e9d84cc27b58cc3bf27" kindref="member">reorder</ref>(vector&lt;T&gt;<sp/>&amp;v,<sp/>vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;order<sp/>)<sp/><sp/></highlight></codeline>
<codeline lineno="471"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>1;<sp/>s<sp/>&lt;<sp/>order.size();<sp/>++<sp/>s<sp/>)<sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>order[s];<sp/>d<sp/>&lt;<sp/>s;<sp/>d<sp/>=<sp/>order[d]<sp/>)<sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>==<sp/>s<sp/>)<sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>=<sp/>order[d],<sp/>d<sp/>!=<sp/>s<sp/>)<sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(<sp/>v[s],<sp/>v[d]<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal">};</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">vector&lt;size_t&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1afc397ee448b473fec9502461f3e75eae" kindref="member">mask_to_index</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">tuple&lt;vector&lt;size_t&gt;,vector&lt;size_t&gt;&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a43f8d9d4ac086fe1166492d0751eb2db" kindref="member">mask_to_indices</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>///<sp/>cast<sp/>a<sp/>float<sp/>array<sp/>to<sp/>bool<sp/>or<sp/>integer<sp/>if<sp/>its<sp/>values<sp/>comply</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>typecast(ArrayXf&amp;<sp/>x);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="496" refid="d6/d2e/namespaceBrush_1_1Util_1a8a14946733d9059bad0379e7666a3699" refkind="member"><highlight class="normal">array&lt;Array&lt;T,-1,<sp/>1&gt;,<sp/>2&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a8a14946733d9059bad0379e7666a3699" kindref="member">split</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&lt;T,-1,1&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref>&amp;<sp/>mask)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>array&lt;DenseBase&lt;T&gt;,<sp/>2&gt;<sp/>split(const<sp/>DenseBase&lt;T&gt;&amp;<sp/>v,<sp/>const<sp/>ArrayXb&amp;<sp/>mask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size1<sp/>=<sp/>mask.count();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size2<sp/>=<sp/>mask.size()<sp/>-<sp/>size1;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T,-1,1&gt;<sp/>L(size1),<sp/>R(size2);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DenseBase&lt;T&gt;<sp/>L(size1),<sp/>R(size2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx1<sp/>=<sp/>0,<sp/>idx2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mask.size();<sp/>++i)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask(i))</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L(idx1)<sp/>=<sp/>v(i);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++idx1;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R(idx2)<sp/>=<sp/>v(i);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++idx2;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>L,<sp/>R<sp/>};</highlight></codeline>
<codeline lineno="519"><highlight class="normal">};</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::ranges::range<sp/>T&gt;</highlight></codeline>
<codeline lineno="523" refid="d6/d2e/namespaceBrush_1_1Util_1a0fca88a717680a76c4b7b9b082675f89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a0fca88a717680a76c4b7b9b082675f89" kindref="member">print</ref>(T<sp/>t)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>auto<sp/>out<sp/>=<sp/>fmt::memory_buffer();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>vector&lt;char&gt;<sp/>out;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>std::for_each(first,<sp/>last,<sp/>[&amp;](const<sp/>auto&amp;<sp/>i){fmt::format_to(std::back_inserter(out),<sp/>&quot;{}&quot;,i);});<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fmt::print(to_string(out));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,t);</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/>Convert<sp/>Eigen::Tensor<sp/>--&gt;<sp/>Eigen::Matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Evaluates<sp/>tensor<sp/>expressions<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>Device<sp/>=<sp/>Eigen::DefaultDevice&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>asEval(const<sp/>Eigen::TensorBase&lt;T,<sp/>Eigen::ReadOnlyAccessors&gt;<sp/>&amp;expr,<sp/>//<sp/>An<sp/>Eigen::TensorBase<sp/>object<sp/>(Tensor,<sp/>TensorMap,<sp/>TensorExpr...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Device<sp/>&amp;<sp/>device<sp/>=<sp/>Device()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Override<sp/>to<sp/>evaluate<sp/>on<sp/>another<sp/>device,<sp/>e.g.<sp/>thread<sp/>pool<sp/>or<sp/>gpu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>using<sp/>Evaluator<sp/>=<sp/>Eigen::TensorEvaluator&lt;const<sp/>Eigen::TensorForcedEvalOp&lt;const<sp/>T&gt;,<sp/>Device&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Eigen::TensorForcedEvalOp&lt;const<sp/>T&gt;<sp/>eval<sp/>=<sp/>expr.eval();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Evaluator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor(eval,<sp/>device);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>tensor.evalSubExprsIfNeeded(nullptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>tensor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Converts<sp/>any<sp/>Eigen::Tensor<sp/>(or<sp/>expression)<sp/>to<sp/>an<sp/>Eigen::Matrix<sp/>with<sp/>shape<sp/>rows/cols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>sizeType,<sp/>typename<sp/>Device<sp/>=<sp/>Eigen::DefaultDevice&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>MatrixCast(const<sp/>Eigen::TensorBase&lt;T,<sp/>Eigen::ReadOnlyAccessors&gt;<sp/>&amp;expr,<sp/>const<sp/>sizeType<sp/>rows,<sp/>const<sp/>sizeType<sp/>cols,<sp/>const<sp/>Device<sp/>&amp;device<sp/>=<sp/>Device())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>tensor<sp/><sp/>=<sp/>asEval(expr,<sp/>device);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>using<sp/>Scalar<sp/>=<sp/>typename<sp/>Eigen::internal::remove_const&lt;typename<sp/>decltype(tensor)::Scalar&gt;::type;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;MatrixType&lt;Scalar&gt;&gt;(Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>rows,<sp/>cols));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Converts<sp/>any<sp/>Eigen::Tensor<sp/>(or<sp/>expression)<sp/>to<sp/>an<sp/>Eigen::Vector<sp/>with<sp/>the<sp/>same<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>Device<sp/>=<sp/>Eigen::DefaultDevice&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>VectorCast(const<sp/>Eigen::TensorBase&lt;T,<sp/>Eigen::ReadOnlyAccessors&gt;<sp/>&amp;expr,<sp/>const<sp/>Device<sp/>&amp;device<sp/>=<sp/>Device())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>tensor<sp/><sp/>=<sp/>asEval(expr,<sp/>device);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>size<sp/><sp/><sp/><sp/>=<sp/>Eigen::internal::array_prod(tensor.dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>using<sp/>Scalar<sp/>=<sp/>typename<sp/>Eigen::internal::remove_const&lt;typename<sp/>decltype(tensor)::Scalar&gt;::type;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;VectorType&lt;Scalar&gt;&gt;(Eigen::Map&lt;const<sp/>VectorType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>size));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>View<sp/>an<sp/>existing<sp/>Eigen::Tensor<sp/>as<sp/>an<sp/>Eigen::Map&lt;Eigen::Matrix&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Scalar,<sp/>auto<sp/>rank,<sp/>typename<sp/>sizeType&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>MatrixMap(const<sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor,<sp/>const<sp/>sizeType<sp/>rows,<sp/>const<sp/>sizeType<sp/>cols)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>rows,<sp/>cols);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>View<sp/>an<sp/>existing<sp/>Eigen::Tensor<sp/>of<sp/>rank<sp/>2<sp/>as<sp/>an<sp/>Eigen::Map&lt;Eigen::Matrix&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Rows/Cols<sp/>are<sp/>determined<sp/>from<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Scalar&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>MatrixMap(const<sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;tensor)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>tensor.dimension(0),<sp/>tensor.dimension(1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>View<sp/>an<sp/>existing<sp/>Eigen::Tensor<sp/>of<sp/>rank<sp/>1<sp/>as<sp/>an<sp/>Eigen::Map&lt;Eigen::Vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Rows<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>size<sp/>of<sp/>the<sp/>tensor.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>VectorMap(const<sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>Eigen::Map&lt;const<sp/>VectorType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>tensor.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/>Convert<sp/>Eigen::Matrix<sp/>--&gt;<sp/>Eigen::Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>example<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/>Eigen::Tensor&lt;double,4&gt;<sp/>my_rank4<sp/>(2,2,2,2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/>my_rank4.setRandom();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/>Eigen::MatrixXd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mymatrix<sp/>=<sp/><sp/>MatrixCast(my_rank4,<sp/>4,4);<sp/><sp/><sp/>//<sp/>Cast<sp/>Eigen::Tensor<sp/>--&gt;<sp/>Eigen::Matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/>Eigen::Tensor&lt;double,3&gt;<sp/>my_rank3<sp/>=<sp/><sp/>TensorCast(mymatrix,<sp/>2,2,4);<sp/>//<sp/>Cast<sp/>Eigen::Matrix<sp/>--&gt;<sp/>Eigen::Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Converts<sp/>an<sp/>Eigen::Matrix<sp/>(or<sp/>expression)<sp/>to<sp/>Eigen::Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>with<sp/>dimensions<sp/>specified<sp/>in<sp/>std::array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Derived,<sp/>typename<sp/>T,<sp/>auto<sp/>rank&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Eigen::Tensor&lt;typename<sp/>Derived::Scalar,<sp/>rank&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TensorCast(const<sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/>const<sp/>std::array&lt;T,<sp/>rank&gt;<sp/>&amp;dims)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>Eigen::TensorMap&lt;const<sp/>Eigen::Tensor&lt;const<sp/>typename<sp/>Derived::Scalar,<sp/>rank&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(matrix.derived().eval().data(),<sp/>dims);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Converts<sp/>an<sp/>Eigen::Matrix<sp/>(or<sp/>expression)<sp/>to<sp/>Eigen::Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>with<sp/>dimensions<sp/>specified<sp/>in<sp/>Eigen::DSizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Derived,<sp/>typename<sp/>T,<sp/>auto<sp/>rank&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Eigen::Tensor&lt;typename<sp/>Derived::Scalar,<sp/>rank&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TensorCast(const<sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/>const<sp/>Eigen::DSizes&lt;T,<sp/>rank&gt;<sp/>&amp;dims)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>Eigen::TensorMap&lt;const<sp/>Eigen::Tensor&lt;const<sp/>typename<sp/>Derived::Scalar,<sp/>rank&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(matrix.derived().eval().data(),<sp/>dims);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Converts<sp/>an<sp/>Eigen::Matrix<sp/>(or<sp/>expression)<sp/>to<sp/>Eigen::Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>with<sp/>dimensions<sp/>as<sp/>variadic<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Derived,<sp/>typename...<sp/>Dims&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>TensorCast(const<sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/>const<sp/>Dims...<sp/>dims)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>static_assert(sizeof...(Dims)<sp/>&gt;<sp/>0,<sp/>&quot;TensorCast:<sp/>sizeof...<sp/>(Dims)<sp/>must<sp/>be<sp/>larger<sp/>than<sp/>0&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>TensorCast(matrix,<sp/>std::array&lt;Eigen::Index,<sp/>sizeof...(Dims)&gt;{dims...});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Converts<sp/>an<sp/>Eigen::Matrix<sp/>(or<sp/>expression)<sp/>to<sp/>Eigen::Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>with<sp/>dimensions<sp/>directly<sp/>as<sp/>arguments<sp/>in<sp/>a<sp/>variadic<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Derived&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>TensorCast(const<sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(Derived::ColsAtCompileTime<sp/>==<sp/>1<sp/>or<sp/>Derived::RowsAtCompileTime<sp/>==<sp/>1)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>TensorCast(matrix,<sp/>matrix.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>TensorCast(matrix,<sp/>matrix.rows(),<sp/>matrix.cols());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>View<sp/>an<sp/>existing<sp/>Eigen::Matrix<sp/>as<sp/>Eigen::TensorMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>with<sp/>dimensions<sp/>specified<sp/>in<sp/>std::array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Derived,<sp/>auto<sp/>rank&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>TensorMap(const<sp/>Eigen::PlainObjectBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/>const<sp/>std::array&lt;long,<sp/>rank&gt;<sp/>&amp;dims)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>Eigen::TensorMap&lt;const<sp/>Eigen::Tensor&lt;const<sp/>typename<sp/>Derived::Scalar,<sp/>rank&gt;&gt;(matrix.derived().data(),<sp/>dims);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>View<sp/>an<sp/>existing<sp/>Eigen::Matrix<sp/>as<sp/>Eigen::TensorMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>with<sp/>dimensions<sp/>as<sp/>variadic<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Derived,<sp/>typename...<sp/>Dims&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>TensorMap(const<sp/>Eigen::PlainObjectBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/>const<sp/>Dims...<sp/>dims)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>TensorMap(matrix,<sp/>std::array&lt;long,<sp/>static_cast&lt;int&gt;(sizeof...(Dims))&gt;{dims...});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>View<sp/>an<sp/>existing<sp/>Eigen::Matrix<sp/>as<sp/>Eigen::TensorMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>with<sp/>dimensions<sp/>determined<sp/>automatically<sp/>from<sp/>the<sp/>given<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>Derived&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auto<sp/>TensorMap(const<sp/>Eigen::PlainObjectBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(Derived::ColsAtCompileTime<sp/>==<sp/>1<sp/>or<sp/>Derived::RowsAtCompileTime<sp/>==<sp/>1)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>TensorMap(matrix,<sp/>matrix.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>TensorMap(matrix,<sp/>matrix.rows(),<sp/>matrix.cols());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vector,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="670" refid="d6/d2e/namespaceBrush_1_1Util_1ac697e701ef641df7a4cff481c667c9f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1ac697e701ef641df7a4cff481c667c9f7" kindref="member">unique_insert</ref>(Vector&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)<sp/></highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Vector::iterator<sp/>i<sp/>=<sp/>std::lower_bound(v.begin(),<sp/>v.end(),<sp/>t);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>v.end()<sp/>||<sp/>t<sp/>&lt;<sp/>*i)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>v.insert(i,<sp/>t);</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tupleize<sp/>a<sp/>vector.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/28410697/c-convert-vector-to-tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::size_t...<sp/>Indices&gt;</highlight></codeline>
<codeline lineno="680" refid="d6/d2e/namespaceBrush_1_1Util_1a75d33dae3c8a1a36b1ef5f889d815d6e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a75d33dae3c8a1a36b1ef5f889d815d6e" kindref="member">vectorToTupleHelper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>v,<sp/>std::index_sequence&lt;Indices...&gt;)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(v[Indices]...);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="685" refid="d6/d2e/namespaceBrush_1_1Util_1a7a0a0b4f0cab1c690fc54ea9126e6814" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a7a0a0b4f0cab1c690fc54ea9126e6814" kindref="member">vectorToTuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>assert(v.size()<sp/>&gt;=<sp/>N);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a75d33dae3c8a1a36b1ef5f889d815d6e" kindref="member">vectorToTupleHelper</ref>(v,<sp/>std::make_index_sequence&lt;N&gt;());</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>R,<sp/>typename<sp/>Arg,<sp/>typename...<sp/>Args&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>R<sp/>apply(const<sp/>std::function&lt;R(Args...)&gt;&amp;<sp/>f,<sp/>const<sp/>vector&lt;Arg&gt;&amp;<sp/>inputs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>R<sp/>output;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>switch<sp/>(inputs.size())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::execution::par_unseq,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs.at(0).begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs.at(0).end(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::execution::par_unseq,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs.at(0).begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs.at(0).end(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs.at(1).begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>inputs.at(1).end(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR_THROW(&quot;Wrong<sp/>number<sp/>of<sp/>inputs<sp/>for<sp/>operator&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>output;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="726" refid="d6/d2e/namespaceBrush_1_1Util_1abbfd3f4b029bb0b27ba4746f12726df2" refkind="member"><highlight class="normal">std::vector&lt;T&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1abbfd3f4b029bb0b27ba4746f12726df2" kindref="member">slice</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;<sp/>idx)</highlight></codeline>
<codeline lineno="727"><highlight class="normal">{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>result;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>idx)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(v.at(i));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="738" refid="d6/d2e/namespaceBrush_1_1Util_1a104f5440d54d751bac78c892b7022c71" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>map&lt;V,<sp/>K&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1a104f5440d54d751bac78c892b7022c71" kindref="member">reverse_map</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>map&lt;K,<sp/>V&gt;&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;V,<sp/>K&gt;<sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1af7dd70e54015821d96e3a1afed6344ca" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>m)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1af7dd70e54015821d96e3a1afed6344ca" kindref="member">r</ref>[kv.second]<sp/>=<sp/>kv.first;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d6/d2e/namespaceBrush_1_1Util_1af7dd70e54015821d96e3a1afed6344ca" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal">};</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="746" refid="d6/d2e/namespaceBrush_1_1Util_1af874ef4c659cfb3cb52fa8032f531beb" refkind="member"><highlight class="normal">ostream<sp/>&amp;<ref refid="d6/d2e/namespaceBrush_1_1Util_1af874ef4c659cfb3cb52fa8032f531beb" kindref="member">operator&lt;&lt;</ref>(<sp/>ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;&amp;<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>v)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>i<sp/>;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>!=<sp/>len)</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="759"><highlight class="normal">};</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>VariantType,<sp/>typename<sp/>T,<sp/>std::size_t<sp/>index<sp/>=<sp/>0&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constexpr<sp/>std::size_t<sp/>variant_index()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>static_assert(std::variant_size_v&lt;VariantType&gt;<sp/>&gt;<sp/>index,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Type<sp/>not<sp/>found<sp/>in<sp/>variant&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr<sp/>(index<sp/>==<sp/>std::variant_size_v&lt;VariantType&gt;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>index;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>constexpr<sp/>(std::is_same_v&lt;std::variant_alternative_t&lt;index,<sp/>VariantType&gt;,<sp/>T&gt;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>index;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>variant_index&lt;VariantType,<sp/>T,<sp/>index<sp/>+<sp/>1&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Brush<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/brush/brush/src/util/utils.h"/>
  </compounddef>
</doxygen>
