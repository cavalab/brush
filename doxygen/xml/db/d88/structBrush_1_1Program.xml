<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="db/d88/structBrush_1_1Program" kind="struct" language="C++" prot="public">
    <compoundname>Brush::Program</compoundname>
    <includes refid="d1/dea/program_8h" local="no">program.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366" kindref="member">PT</ref></type>
        <declname>PType</declname>
        <defname>PType</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="db/d88/structBrush_1_1Program_1a2a669a8179423af25fb10d26c67c27eb" prot="public" static="no">
        <type>typename std::conditional_t&lt; PType==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366abe2f9eac301f8c5b7acffd6b3c458faa" kindref="member">PT::Regressor</ref>, ArrayXf, std::conditional_t&lt; PType==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366a3cdc33a35d0e4f3b9bae953babd8f9b4" kindref="member">PT::BinaryClassifier</ref>, <ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref>, std::conditional_t&lt; PType==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366ac62539fc5a23115fca906befbd511c0a" kindref="member">PT::MulticlassClassifier</ref>, <ref refid="dc/d5c/namespaceBrush_1ac5cd76eed6ea70d1c8f429ee37ca9fc0" kindref="member">ArrayXi</ref>, std::conditional_t&lt; PType==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366aca702b6b08355f71cf4b1a17a8e16b8b" kindref="member">PT::Representer</ref>, ArrayXXf, ArrayXf &gt; &gt; &gt; &gt;</type>
        <definition>using Brush::Program&lt; PType &gt;::RetType =  typename std::conditional_t&lt;PType == PT::Regressor, ArrayXf,
        std::conditional_t&lt;PType == PT::BinaryClassifier, ArrayXb,
        std::conditional_t&lt;PType == PT::MulticlassClassifier, ArrayXi,
        std::conditional_t&lt;PType == PT::Representer, ArrayXXf, ArrayXf
        &gt;&gt;&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>RetType</name>
        <qualifiedname>Brush::Program::RetType</qualifiedname>
        <briefdescription>
<para>the return type of the tree when calling :func:<computeroutput>predict</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="55" column="5" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/d88/structBrush_1_1Program_1a6a1a298cfdb17245ce9174e559d6fef1" prot="public" static="no">
        <type>std::conditional_t&lt; PType==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366a3cdc33a35d0e4f3b9bae953babd8f9b4" kindref="member">PT::BinaryClassifier</ref>, ArrayXf, std::conditional_t&lt; PType==<ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366ac62539fc5a23115fca906befbd511c0a" kindref="member">PT::MulticlassClassifier</ref>, ArrayXXf, <ref refid="db/d88/structBrush_1_1Program_1a2a669a8179423af25fb10d26c67c27eb" kindref="member">RetType</ref> &gt; &gt;</type>
        <definition>using Brush::Program&lt; PType &gt;::TreeType =  std::conditional_t&lt;PType == PT::BinaryClassifier, ArrayXf,
        std::conditional_t&lt;PType == PT::MulticlassClassifier, ArrayXXf, 
        RetType&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>TreeType</name>
        <qualifiedname>Brush::Program::TreeType</qualifiedname>
        <briefdescription>
<para>the type of output from the tree object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="62" column="5" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="62" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="db/d88/structBrush_1_1Program_1a695b4178894f8703f2b539cf3a51b098" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366" kindref="member">PT</ref></type>
        <definition>PT Brush::Program&lt; PType &gt;::program_type</definition>
        <argsstring></argsstring>
        <name>program_type</name>
        <qualifiedname>Brush::Program::program_type</qualifiedname>
        <initializer>= PType</initializer>
        <briefdescription>
<para>an enum storing the program type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="52" column="25" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="52" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="db/d88/structBrush_1_1Program_1a66e9a1ae33267ee5132ba3b3757b8a01" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Brush::Program&lt; PType &gt;::is_fitted_</definition>
        <argsstring></argsstring>
        <name>is_fitted_</name>
        <qualifiedname>Brush::Program::is_fitted_</qualifiedname>
        <briefdescription>
<para>whether fit has been called </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="67" column="10" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="67" bodyend="-1"/>
        <referencedby refid="dc/d5c/namespaceBrush_1a2360e8e22462df83dc799c8096ce5938" compoundref="d1/dea/program_8h" startline="515" endline="519">Brush::from_json</referencedby>
        <referencedby refid="dc/d5c/namespaceBrush_1ab70b101224f05ee7cb285e1212137053" compoundref="d1/dea/program_8h" startline="509" endline="512">Brush::to_json</referencedby>
      </memberdef>
      <memberdef kind="variable" id="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" prot="public" static="no" mutable="no">
        <type>tree&lt; <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>tree&lt;Node&gt; Brush::Program&lt; PType &gt;::Tree</definition>
        <argsstring></argsstring>
        <name>Tree</name>
        <qualifiedname>Brush::Program::Tree</qualifiedname>
        <briefdescription>
<para>fitness </para>
        </briefdescription>
        <detaileddescription>
<para>the underlying tree </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="73" column="10" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="73" bodyend="-1"/>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1acf7d5d1c0d6a102eec277180dce590fe" compoundref="d1/d64/variation_8cpp" startline="345" endline="450">Brush::Var::Variation&lt; T &gt;::cross</referencedby>
        <referencedby refid="dc/d5c/namespaceBrush_1a2360e8e22462df83dc799c8096ce5938" compoundref="d1/dea/program_8h" startline="515" endline="519">Brush::from_json</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1a024e971b0f8685c89d119c0af484284a" compoundref="d1/d64/variation_8cpp" startline="486" endline="575">Brush::Var::Variation&lt; T &gt;::mutate</referencedby>
        <referencedby refid="dc/d5c/namespaceBrush_1ab70b101224f05ee7cb285e1212137053" compoundref="d1/dea/program_8h" startline="509" endline="512">Brush::to_json</referencedby>
      </memberdef>
      <memberdef kind="variable" id="db/d88/structBrush_1_1Program_1a349a42d743b44ad4515bbeb9a93a95f1" prot="public" static="no" mutable="no">
        <type>std::optional&lt; std::reference_wrapper&lt; <ref refid="d4/dc3/structBrush_1_1SearchSpace" kindref="compound">SearchSpace</ref> &gt; &gt;</type>
        <definition>std::optional&lt;std::reference_wrapper&lt;SearchSpace&gt; &gt; Brush::Program&lt; PType &gt;::SSref</definition>
        <argsstring></argsstring>
        <name>SSref</name>
        <qualifiedname>Brush::Program::SSref</qualifiedname>
        <briefdescription>
<para>reference to search space </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="75" column="19" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="75" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1ab5df93b7b0bf914455ffeb5cc7574543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Brush::Program&lt; PType &gt;::Program</definition>
        <argsstring>()=default</argsstring>
        <name>Program</name>
        <qualifiedname>Brush::Program::Program</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="77" column="5"/>
        <referencedby refid="db/d88/structBrush_1_1Program_1af50c7ca669b20b48971b5108cd24525c" compoundref="d1/dea/program_8h" startline="84" endline="84">Brush::Program&lt; PT::Regressor &gt;::copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a00356ac7bbc5c1d8f70bc8d90f41d4ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Brush::Program&lt; PType &gt;::Program</definition>
        <argsstring>(const std::reference_wrapper&lt; SearchSpace &gt; s, const tree&lt; Node &gt; t)</argsstring>
        <name>Program</name>
        <qualifiedname>Brush::Program::Program</qualifiedname>
        <param>
          <type>const std::reference_wrapper&lt; <ref refid="d4/dc3/structBrush_1_1SearchSpace" kindref="compound">SearchSpace</ref> &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const tree&lt; <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &gt;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="78" column="5" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1af50c7ca669b20b48971b5108cd24525c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/d88/structBrush_1_1Program" kindref="compound">Program</ref>&lt; PType &gt;</type>
        <definition>Program&lt; PType &gt; Brush::Program&lt; PType &gt;::copy</definition>
        <argsstring>()</argsstring>
        <name>copy</name>
        <qualifiedname>Brush::Program::copy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="84" column="13" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1aa24681261d191fdc486973820394d411" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Program&lt; PType &gt;::set_search_space</definition>
        <argsstring>(const std::reference_wrapper&lt; SearchSpace &gt; s)</argsstring>
        <name>set_search_space</name>
        <qualifiedname>Brush::Program::set_search_space</qualifiedname>
        <param>
          <type>const std::reference_wrapper&lt; <ref refid="d4/dc3/structBrush_1_1SearchSpace" kindref="compound">SearchSpace</ref> &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="86" column="17" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a6fc6aa2a6ecbe639aa3f80accf0c2798" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Brush::Program&lt; PType &gt;::complexity</definition>
        <argsstring>() const</argsstring>
        <name>complexity</name>
        <qualifiedname>Brush::Program::complexity</qualifiedname>
        <briefdescription>
<para>count the complexity of the program. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int complexity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="93" column="9" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="93" bodyend="97"/>
        <referencedby refid="d1/de5/classBrush_1_1Eval_1_1Evaluation_1ac7562624d114b22b19720729d599a40a" compoundref="d9/d6a/evaluation_8cpp" startline="46" endline="94">Brush::Eval::Evaluation&lt; T &gt;::assign_fit</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1af64e3100027b89fd4fffd50bfb843993" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Brush::Program&lt; PType &gt;::size</definition>
        <argsstring>(bool include_weight=true) const</argsstring>
        <name>size</name>
        <qualifiedname>Brush::Program::size</qualifiedname>
        <param>
          <type>bool</type>
          <declname>include_weight</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>count the tree size of the program, including the weights in weighted nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>include_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to include the node&apos;s weight in the count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int number of nodes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="102" column="9" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="102" bodyend="106"/>
        <referencedby refid="d1/de5/classBrush_1_1Eval_1_1Evaluation_1ac7562624d114b22b19720729d599a40a" compoundref="d9/d6a/evaluation_8cpp" startline="46" endline="94">Brush::Eval::Evaluation&lt; T &gt;::assign_fit</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1acf7d5d1c0d6a102eec277180dce590fe" compoundref="d1/d64/variation_8cpp" startline="345" endline="450">Brush::Var::Variation&lt; T &gt;::cross</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1a024e971b0f8685c89d119c0af484284a" compoundref="d1/d64/variation_8cpp" startline="486" endline="575">Brush::Var::Variation&lt; T &gt;::mutate</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1a344233ce053ca4b267539182fecbbc91" compoundref="d1/d64/variation_8cpp" startline="578" endline="638">Brush::Var::Variation&lt; T &gt;::vary</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a826ef90ae1aaf8f2637f551cfff0746a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Brush::Program&lt; PType &gt;::size_at</definition>
        <argsstring>(Iter &amp;top, bool include_weight=true) const</argsstring>
        <name>size_at</name>
        <qualifiedname>Brush::Program::size_at</qualifiedname>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1a822ae4ce07ba14ae433977a635675764" kindref="member">Iter</ref> &amp;</type>
          <declname>top</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_weight</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>count the size of a given subtree, optionally including the weights in weighted nodes. This function is not exposed to the python wrapper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>root node of the subtree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>include_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to include the node&apos;s weight in the count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int number of nodes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="113" column="9" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="113" bodyend="116"/>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1acf7d5d1c0d6a102eec277180dce590fe" compoundref="d1/d64/variation_8cpp" startline="345" endline="450">Brush::Var::Variation&lt; T &gt;::cross</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a91dd138edc7ecb5bc6d013ae68bf0e42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Brush::Program&lt; PType &gt;::depth</definition>
        <argsstring>() const</argsstring>
        <name>depth</name>
        <qualifiedname>Brush::Program::depth</qualifiedname>
        <briefdescription>
<para>count the tree depth of the program. The depth is not influenced by weighted nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int tree depth. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="120" column="9" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="120" bodyend="124"/>
        <referencedby refid="d1/de5/classBrush_1_1Eval_1_1Evaluation_1ac7562624d114b22b19720729d599a40a" compoundref="d9/d6a/evaluation_8cpp" startline="46" endline="94">Brush::Eval::Evaluation&lt; T &gt;::assign_fit</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1a024e971b0f8685c89d119c0af484284a" compoundref="d1/d64/variation_8cpp" startline="486" endline="575">Brush::Var::Variation&lt; T &gt;::mutate</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a9a1dd47fb6491ad830c147cced29752b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Brush::Program&lt; PType &gt;::depth_at</definition>
        <argsstring>(Iter &amp;top) const</argsstring>
        <name>depth_at</name>
        <qualifiedname>Brush::Program::depth_at</qualifiedname>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1a822ae4ce07ba14ae433977a635675764" kindref="member">Iter</ref> &amp;</type>
          <declname>top</declname>
        </param>
        <briefdescription>
<para>count the depth of a given subtree. The depth is not influenced by weighted nodes. This function is not exposed to the python wrapper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>root node of the subtree. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int tree depth. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="130" column="9" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="130" bodyend="132"/>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1acf7d5d1c0d6a102eec277180dce590fe" compoundref="d1/d64/variation_8cpp" startline="345" endline="450">Brush::Var::Variation&lt; T &gt;::cross</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1af1f9858cdb8c05bdcf5db55cab745f7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Brush::Program&lt; PType &gt;::depth_to_reach</definition>
        <argsstring>(Iter &amp;top) const</argsstring>
        <name>depth_to_reach</name>
        <qualifiedname>Brush::Program::depth_to_reach</qualifiedname>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1a822ae4ce07ba14ae433977a635675764" kindref="member">Iter</ref> &amp;</type>
          <declname>top</declname>
        </param>
        <briefdescription>
<para>count the depth until reaching the given subtree. The depth is not influenced by weighted nodes. This function is not exposed to the python wrapper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>root node of the subtree. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int tree depth. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="138" column="9" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="138" bodyend="140"/>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1acf7d5d1c0d6a102eec277180dce590fe" compoundref="d1/d64/variation_8cpp" startline="345" endline="450">Brush::Var::Variation&lt; T &gt;::cross</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a8ed721f103dd63c7adfc2934340097b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/d88/structBrush_1_1Program" kindref="compound">Program</ref>&lt; PType &gt; &amp;</type>
        <definition>Program&lt; PType &gt; &amp; Brush::Program&lt; PType &gt;::fit</definition>
        <argsstring>(const Dataset &amp;d)</argsstring>
        <name>fit</name>
        <qualifiedname>Brush::Program::fit</qualifiedname>
        <param>
          <type>const <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="142" column="13" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="142" bodyend="149"/>
        <referencedby refid="db/d88/structBrush_1_1Program_1af62fee4f37c3a748c68505986a979ba3" compoundref="d1/dea/program_8h" startline="221" endline="225">Brush::Program&lt; PT::Regressor &gt;::fit</referencedby>
        <referencedby refid="d1/de5/classBrush_1_1Eval_1_1Evaluation_1a1d652164264243bd40efcfd38ba6d569" compoundref="d9/d6a/evaluation_8cpp" startline="9" endline="42">Brush::Eval::Evaluation&lt; T &gt;::update_fitness</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a6a1237f15d7b9cc1e825e1a3213df58e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename W</type>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>R Brush::Program&lt; PType &gt;::predict_with_weights</definition>
        <argsstring>(const Dataset &amp;d, const W **weights)</argsstring>
        <name>predict_with_weights</name>
        <qualifiedname>Brush::Program::predict_with_weights</qualifiedname>
        <param>
          <type>const <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const W **</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="152" column="7" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="152" bodyend="158"/>
        <referencedby refid="db/d88/structBrush_1_1Program_1a93735deb988101774e8e58c5402e1a21" compoundref="d1/dea/program_8h" startline="160" endline="164">Brush::Program&lt; PT::Regressor &gt;::predict_with_weights</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a93735deb988101774e8e58c5402e1a21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Brush::Program&lt; PType &gt;::predict_with_weights</definition>
        <argsstring>(const Dataset &amp;d, const ArrayXf &amp;weights)</argsstring>
        <name>predict_with_weights</name>
        <qualifiedname>Brush::Program::predict_with_weights</qualifiedname>
        <param>
          <type>const <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="160" column="10" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a68b5b3a1aedf1dfd2769dbba3a01a2ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
            <defval><ref refid="db/d88/structBrush_1_1Program_1a2a669a8179423af25fb10d26c67c27eb" kindref="member">RetType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="db/d88/structBrush_1_1Program_1a6a1a298cfdb17245ce9174e559d6fef1" kindref="member">TreeType</ref></type>
        <definition>TreeType Brush::Program&lt; PType &gt;::predict</definition>
        <argsstring>(const Dataset &amp;d)</argsstring>
        <name>predict</name>
        <qualifiedname>Brush::Program::predict</qualifiedname>
        <param>
          <type>const <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
    <requiresclause>(is_same_v&lt;R, TreeType&gt;)    </requiresclause>
        <briefdescription>
<para>the standard predict function. Returns the output of the Tree directly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>return type, default </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dataset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="175" column="14" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="175" bodyend="181"/>
        <referencedby refid="db/d88/structBrush_1_1Program_1a59371dd699ddbb0bdb3b27237cb40e76" compoundref="d1/dea/program_8h" startline="230" endline="234">Brush::Program&lt; PT::Regressor &gt;::predict</referencedby>
        <referencedby refid="db/d88/structBrush_1_1Program_1a166fc75406fd631070f4477a367c4bb8" compoundref="d1/dea/program_8h" startline="212" endline="215">Brush::Program&lt; PT::Regressor &gt;::predict_proba</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1aae1a9e6d998ac210bb41566bf74d2cbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
            <defval><ref refid="db/d88/structBrush_1_1Program_1a2a669a8179423af25fb10d26c67c27eb" kindref="member">RetType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref></type>
        <definition>ArrayXb Brush::Program&lt; PType &gt;::predict</definition>
        <argsstring>(const Dataset &amp;d)</argsstring>
        <name>predict</name>
        <qualifiedname>Brush::Program::predict</qualifiedname>
        <param>
          <type>const <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
    <requiresclause>(is_same_v&lt;R, <ref refid="d8/d5c/functions_8h_1a6a33354c51ab1e4986b2a222aac825a7" kindref="member">ArrayXb</ref>&gt;)    </requiresclause>
        <briefdescription>
<para>Specialized predict function for binary classification. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>return type, typically left blank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>: data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out: binary labels </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="188" column="13" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="188" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a9e0114cb8da8698b0db76f67ce5d22e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
            <defval><ref refid="db/d88/structBrush_1_1Program_1a2a669a8179423af25fb10d26c67c27eb" kindref="member">RetType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d5c/namespaceBrush_1ac5cd76eed6ea70d1c8f429ee37ca9fc0" kindref="member">ArrayXi</ref></type>
        <definition>ArrayXi Brush::Program&lt; PType &gt;::predict</definition>
        <argsstring>(const Dataset &amp;d)</argsstring>
        <name>predict</name>
        <qualifiedname>Brush::Program::predict</qualifiedname>
        <param>
          <type>const <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
    <requiresclause>(is_same_v&lt;R, <ref refid="dc/d5c/namespaceBrush_1ac5cd76eed6ea70d1c8f429ee37ca9fc0" kindref="member">ArrayXi</ref>&gt;)    </requiresclause>
        <briefdescription>
<para>Specialized predict function for multiclass classification. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>return type, typically left blank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>: data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out: integer labels </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="200" column="13" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="200" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a166fc75406fd631070f4477a367c4bb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366" kindref="member">PT</ref></type>
            <declname>P</declname>
            <defname>P</defname>
            <defval>PType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="db/d88/structBrush_1_1Program_1a6a1a298cfdb17245ce9174e559d6fef1" kindref="member">TreeType</ref></type>
        <definition>TreeType Brush::Program&lt; PType &gt;::predict_proba</definition>
        <argsstring>(const Dataset &amp;d)</argsstring>
        <name>predict_proba</name>
        <qualifiedname>Brush::Program::predict_proba</qualifiedname>
        <param>
          <type>const <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
    <requiresclause>((P == PT::BinaryClassifier) || (P == PT::MulticlassClassifier))    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="212" column="14" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="212" bodyend="215"/>
        <referencedby refid="db/d88/structBrush_1_1Program_1ad63eebe3f515f9b229617c1df623b30d" compoundref="d1/dea/program_8h" startline="245" endline="249">Brush::Program&lt; PT::Regressor &gt;::predict_proba</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1af62fee4f37c3a748c68505986a979ba3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/d88/structBrush_1_1Program" kindref="compound">Program</ref>&lt; PType &gt; &amp;</type>
        <definition>Program&lt; PType &gt; &amp; Brush::Program&lt; PType &gt;::fit</definition>
        <argsstring>(const Ref&lt; const ArrayXXf &gt; &amp;X, const Ref&lt; const ArrayXf &gt; &amp;y)</argsstring>
        <name>fit</name>
        <qualifiedname>Brush::Program::fit</qualifiedname>
        <param>
          <type>const Ref&lt; const ArrayXXf &gt; &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const Ref&lt; const ArrayXf &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Convenience function to call fit directly from X,y data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>: Input features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>: Labels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: reference to program </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="221" column="13" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a59371dd699ddbb0bdb3b27237cb40e76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/d88/structBrush_1_1Program_1a2a669a8179423af25fb10d26c67c27eb" kindref="member">RetType</ref></type>
        <definition>RetType Brush::Program&lt; PType &gt;::predict</definition>
        <argsstring>(const Ref&lt; const ArrayXXf &gt; &amp;X)</argsstring>
        <name>predict</name>
        <qualifiedname>Brush::Program::predict</qualifiedname>
        <param>
          <type>const Ref&lt; const ArrayXXf &gt; &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>Convenience function to call predict directly from X data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>: Input features </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: predictions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="230" column="13" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1ad63eebe3f515f9b229617c1df623b30d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366" kindref="member">PT</ref></type>
            <declname>P</declname>
            <defname>P</defname>
            <defval>PType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="db/d88/structBrush_1_1Program_1a6a1a298cfdb17245ce9174e559d6fef1" kindref="member">TreeType</ref></type>
        <definition>TreeType Brush::Program&lt; PType &gt;::predict_proba</definition>
        <argsstring>(const Ref&lt; const ArrayXXf &gt; &amp;X)</argsstring>
        <name>predict_proba</name>
        <qualifiedname>Brush::Program::predict_proba</qualifiedname>
        <param>
          <type>const Ref&lt; const ArrayXXf &gt; &amp;</type>
          <declname>X</declname>
        </param>
    <requiresclause>((P == PT::BinaryClassifier) || (P == PT::MulticlassClassifier))    </requiresclause>
        <briefdescription>
<para>Predict probabilities from X. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires a BinaryClassifier or MulticlassClassifier.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter for type checking, typically left blank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="245" column="14" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a1cc0fd2af851933b54ef5fb6fb6c941b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Program&lt; PType &gt;::update_weights</definition>
        <argsstring>(const Dataset &amp;d)</argsstring>
        <name>update_weights</name>
        <qualifiedname>Brush::Program::update_weights</qualifiedname>
        <param>
          <type>const <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Updates the program&apos;s weights using non-linear least squares. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the dataset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="256" column="10" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="495" bodyend="502"/>
        <referencedby refid="db/d88/structBrush_1_1Program_1a8ed721f103dd63c7adfc2934340097b4" compoundref="d1/dea/program_8h" startline="142" endline="149">Brush::Program&lt; PT::Regressor &gt;::fit</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a990bd3691f3b3e2b7ff479bcd4231479" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Brush::Program&lt; PType &gt;::get_n_weights</definition>
        <argsstring>() const</argsstring>
        <name>get_n_weights</name>
        <qualifiedname>Brush::Program::get_n_weights</qualifiedname>
        <briefdescription>
<para>returns the number of weights in the program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="259" column="9" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="259" bodyend="270"/>
        <referencedby refid="db/d88/structBrush_1_1Program_1a8bee1c866051b3e11c017cdf29b46eb7" compoundref="d1/dea/program_8h" startline="277" endline="291">Brush::Program&lt; PT::Regressor &gt;::get_weights</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a8bee1c866051b3e11c017cdf29b46eb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ArrayXf</type>
        <definition>ArrayXf Brush::Program&lt; PType &gt;::get_weights</definition>
        <argsstring>()</argsstring>
        <name>get_weights</name>
        <qualifiedname>Brush::Program::get_weights</qualifiedname>
        <briefdescription>
<para>Get the weights of the tree as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>ArrayXf of weights in the program, encoded in post-fix order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="277" column="13" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="277" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a5ba9c69ade043cacb917dfb654a57834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Program&lt; PType &gt;::set_weights</definition>
        <argsstring>(const ArrayXf &amp;weights)</argsstring>
        <name>set_weights</name>
        <qualifiedname>Brush::Program::set_weights</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Set the weights in the tree from an array of weights. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of weights. The number of the weights in the tree must match the length of <computeroutput>weights</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="299" column="10" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="299" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1ac87e13742552236e1dc9fd9b62078331" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>string Brush::Program&lt; PType &gt;::get_model</definition>
        <argsstring>(string fmt=&quot;compact&quot;, bool pretty=false) const</argsstring>
        <name>get_model</name>
        <qualifiedname>Brush::Program::get_model</qualifiedname>
        <param>
          <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
          <declname>fmt</declname>
          <defval>&quot;compact&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>pretty</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the model as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>one of &quot;compact&quot;, &quot;tree&quot;, or &quot;dot&quot;. Default &quot;compact&quot;. <linebreak/>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para><emphasis>compact</emphasis> : the program as an equation.</para>
</listitem><listitem><para><emphasis>tree</emphasis> : the program as a (small batch, artisinal) tree.</para>
</listitem><listitem><para><emphasis>dot</emphasis> : the program in the dot language for downstream visualization.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pretty</parametername>
</parameternamelist>
<parameterdescription>
<para>currently unused. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string the model in string form. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="328" column="12" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="328" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1ab288bd389c68ab3c0776ef14a9e5e331" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>string Brush::Program&lt; PType &gt;::get_dot_model</definition>
        <argsstring>(string extras=&quot;&quot;) const</argsstring>
        <name>get_dot_model</name>
        <qualifiedname>Brush::Program::get_dot_model</qualifiedname>
        <param>
          <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
          <declname>extras</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Get the model as a dot object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>extras</parametername>
</parameternamelist>
<parameterdescription>
<para>extra code passed to the beginning of the dot code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string the model in dot language. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="344" column="12" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="344" bodyend="475"/>
        <referencedby refid="db/d88/structBrush_1_1Program_1ac87e13742552236e1dc9fd9b62078331" compoundref="d1/dea/program_8h" startline="328" endline="336">Brush::Program&lt; PT::Regressor &gt;::get_model</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d88/structBrush_1_1Program_1a9db890cb3b1bd9f07764bb3bc7f75d64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>vector&lt; Node &gt; Brush::Program&lt; PType &gt;::linearize</definition>
        <argsstring>() const</argsstring>
        <name>linearize</name>
        <qualifiedname>Brush::Program::linearize</qualifiedname>
        <briefdescription>
<para>turns program tree into a linear program. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of nodes encoding the program in reverse polish notation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/program.h" line="479" column="12" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="479" bodyend="484"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>An individual program, a.k.a. model. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PType</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the <ref refid="dc/d5c/namespaceBrush_1ae591329af27c88b714d0f92b86276366" kindref="member">ProgramType</ref> enum values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/runner/work/brush/brush/src/program/program.h" line="49" column="11" bodyfile="/home/runner/work/brush/brush/src/program/program.h" bodystart="50" bodyend="485"/>
    <listofallmembers>
      <member refid="db/d88/structBrush_1_1Program_1a6fc6aa2a6ecbe639aa3f80accf0c2798" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>complexity</name></member>
      <member refid="db/d88/structBrush_1_1Program_1af50c7ca669b20b48971b5108cd24525c" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>copy</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a91dd138edc7ecb5bc6d013ae68bf0e42" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>depth</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a9a1dd47fb6491ad830c147cced29752b" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>depth_at</name></member>
      <member refid="db/d88/structBrush_1_1Program_1af1f9858cdb8c05bdcf5db55cab745f7c" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>depth_to_reach</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a8ed721f103dd63c7adfc2934340097b4" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>fit</name></member>
      <member refid="db/d88/structBrush_1_1Program_1af62fee4f37c3a748c68505986a979ba3" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>fit</name></member>
      <member refid="db/d88/structBrush_1_1Program_1ab288bd389c68ab3c0776ef14a9e5e331" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>get_dot_model</name></member>
      <member refid="db/d88/structBrush_1_1Program_1ac87e13742552236e1dc9fd9b62078331" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>get_model</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a990bd3691f3b3e2b7ff479bcd4231479" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>get_n_weights</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a8bee1c866051b3e11c017cdf29b46eb7" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>get_weights</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a66e9a1ae33267ee5132ba3b3757b8a01" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>is_fitted_</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a9db890cb3b1bd9f07764bb3bc7f75d64" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>linearize</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a68b5b3a1aedf1dfd2769dbba3a01a2ec" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>predict</name></member>
      <member refid="db/d88/structBrush_1_1Program_1aae1a9e6d998ac210bb41566bf74d2cbf" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>predict</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a9e0114cb8da8698b0db76f67ce5d22e3" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>predict</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a59371dd699ddbb0bdb3b27237cb40e76" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>predict</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a166fc75406fd631070f4477a367c4bb8" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>predict_proba</name></member>
      <member refid="db/d88/structBrush_1_1Program_1ad63eebe3f515f9b229617c1df623b30d" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>predict_proba</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a6a1237f15d7b9cc1e825e1a3213df58e" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>predict_with_weights</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a93735deb988101774e8e58c5402e1a21" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>predict_with_weights</name></member>
      <member refid="db/d88/structBrush_1_1Program_1ab5df93b7b0bf914455ffeb5cc7574543" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>Program</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a00356ac7bbc5c1d8f70bc8d90f41d4ac" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>Program</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a695b4178894f8703f2b539cf3a51b098" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>program_type</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a2a669a8179423af25fb10d26c67c27eb" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>RetType</name></member>
      <member refid="db/d88/structBrush_1_1Program_1aa24681261d191fdc486973820394d411" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>set_search_space</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a5ba9c69ade043cacb917dfb654a57834" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>set_weights</name></member>
      <member refid="db/d88/structBrush_1_1Program_1af64e3100027b89fd4fffd50bfb843993" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>size</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a826ef90ae1aaf8f2637f551cfff0746a" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>size_at</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a349a42d743b44ad4515bbeb9a93a95f1" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>SSref</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>Tree</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a6a1a298cfdb17245ce9174e559d6fef1" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>TreeType</name></member>
      <member refid="db/d88/structBrush_1_1Program_1a1cc0fd2af851933b54ef5fb6fb6c941b" prot="public" virt="non-virtual"><scope>Brush::Program</scope><name>update_weights</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
