<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dc/d31/structBrush_1_1Operator" kind="struct" language="C++" prot="public">
    <compoundname>Brush::Operator</compoundname>
    <includes refid="d7/de0/operator_8h" local="no">operator.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="dc/d5c/namespaceBrush_1a051322bb9fd1db4638b6eccd399a29c8" kindref="member">NodeType</ref></type>
        <declname>NT</declname>
        <defname>NT</defname>
      </param>
      <param>
        <type>typename S</type>
      </param>
      <param>
        <type>bool</type>
        <declname>Fit</declname>
        <defname>Fit</defname>
      </param>
      <param>
        <type>typename E</type>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="dc/d31/structBrush_1_1Operator_1a8c96b38fc30c23b2741aa4c44138ccd1" prot="public" static="no">
        <type>conditional_t&lt;((<ref refid="de/d26/nodetype_8h_1a876e80643fd688721e2b628ba2cd39cd" kindref="member">UnaryOp</ref>&lt; <ref refid="dc/d5c/namespaceBrush_1a051322bb9fd1db4638b6eccd399a29c8" kindref="member">NT</ref> &gt;||<ref refid="de/d26/nodetype_8h_1a82f43e5fe13312809d2411e25aff9e3a" kindref="member">NaryOp</ref>&lt; <ref refid="dc/d5c/namespaceBrush_1a051322bb9fd1db4638b6eccd399a29c8" kindref="member">NT</ref> &gt;) &amp;&amp;S::ArgCount &gt; 1), Array&lt; typename S::FirstArg::Scalar, -1, S::ArgCount &gt;, typename S::ArgTypes &gt;</type>
        <definition>using Brush::Operator&lt; NT, S, Fit, E &gt;::ArgTypes =  conditional_t&lt; ((UnaryOp&lt;NT&gt; || NaryOp&lt;NT&gt;) &amp;&amp; S::ArgCount &gt; 1), Array&lt;typename S::FirstArg::Scalar, -1, S::ArgCount&gt;, typename S::ArgTypes&gt;</definition>
        <argsstring></argsstring>
        <name>ArgTypes</name>
        <briefdescription>
<para>set argument types to those of the signature unless: </para>
        </briefdescription>
        <detaileddescription>
<para>a) the operator is unary and there are more than one arguments b) the operator is binary and associative <linebreak/>
</para>
<para>In the case of a) or b), arguments to the operator are stacked into an array and the operator is applied to that array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="68" column="5" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/d31/structBrush_1_1Operator_1a424bb09369598ed3d44f4d2b68eebcef" prot="public" static="no">
        <type>typename S::RetType</type>
        <definition>using Brush::Operator&lt; NT, S, Fit, E &gt;::RetType =  typename S::RetType</definition>
        <argsstring></argsstring>
        <name>RetType</name>
        <briefdescription>
<para>return type of the operator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="74" column="5" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/d31/structBrush_1_1Operator_1a395f3c1b1eefad96f02412b2dd74721e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>typename S::NthType&lt; N &gt;</type>
        <definition>using Brush::Operator&lt; NT, S, Fit, E &gt;::NthType =  typename S::NthType&lt;N&gt;</definition>
        <argsstring></argsstring>
        <name>NthType</name>
        <briefdescription>
<para>utility for returning the type of the Nth argument </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="81" column="5" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/d31/structBrush_1_1Operator_1a33cf8494b82e7e0b7beb42fa376e9a6c" prot="public" static="no">
        <type>typename S::WeightType</type>
        <definition>using Brush::Operator&lt; NT, S, Fit, E &gt;::W =  typename S::WeightType</definition>
        <argsstring></argsstring>
        <name>W</name>
        <briefdescription>
<para>set weight type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="84" column="5" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" prot="public" static="no">
        <type><ref refid="df/d61/dispatch__table_8h_1a5d0d9e773ca46763fb1b1152cafc4179" kindref="member">TreeNode</ref> <ref refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" kindref="member">const</ref> <ref refid="dc/d31/structBrush_1_1Operator_1a33cf8494b82e7e0b7beb42fa376e9a6c" kindref="member">W</ref> std::index_sequence&lt; Is... &gt;</type>
        <definition>TreeNode const W std::index_sequence&lt;Is...&gt; Brush::Operator&lt; NT, S, Fit, E &gt;::const</definition>
        <argsstring></argsstring>
        <name>const</name>
        <initializer>{ 
        return std::make_tuple(<ref refid="dc/d31/structBrush_1_1Operator_1a9f761708b97ff2b45ab8fa9164c78e9e" kindref="member">get_kid</ref>&lt;<ref refid="dc/d5c/namespaceBrush_1a4f135739df5fe55a0ff81d943bec8be2" kindref="member">Is</ref>&gt;(d,<ref refid="dc/d31/structBrush_1_1Operator_1a9b3566380c44ab792b52b467799285a4" kindref="member">tn</ref>,<ref refid="dc/d31/structBrush_1_1Operator_1ac0d7dd5291386ff527a39f2f4fea03df" kindref="member">weights</ref>)...)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="150" column="62" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="dc/d31/structBrush_1_1Operator_1a3510e6cd8f26f1f30ab53dcfafe08025" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t Brush::Operator&lt; NT, S, Fit, E &gt;::ArgCount</definition>
        <argsstring></argsstring>
        <name>ArgCount</name>
        <initializer>= S::ArgCount</initializer>
        <briefdescription>
<para>stores the argument count of the operator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="77" column="29" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d31/structBrush_1_1Operator_1a5f08ba3c3b0e39c54b830845eba40b68" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto Brush::Operator&lt; NT, S, Fit, E &gt;::F</definition>
        <argsstring></argsstring>
        <name>F</name>
        <initializer>= [](<ref refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" kindref="member">const</ref> auto&amp; ...args) { 
        <ref refid="d9/d1b/structBrush_1_1Function" kindref="compound">Function</ref>&lt;<ref refid="dc/d5c/namespaceBrush_1a051322bb9fd1db4638b6eccd399a29c8" kindref="member">NT</ref>&gt; f; 
        return f(args...); 
    }</initializer>
        <briefdescription>
<para>wrapper function for the node function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="87" column="27" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="87" bodyend="-1"/>
        <referencedby refid="dc/d31/structBrush_1_1Operator_1a1fb42dfa3da5dce9359ac0a0cbc9f5bd" compoundref="d7/de0/operator_8h" startline="173" endline="177">Brush::Operator&lt; NT, S, Fit, E &gt;::requires</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="dc/d31/structBrush_1_1Operator_1a9b3566380c44ab792b52b467799285a4" prot="public" static="no" mutable="no">
        <type><ref refid="df/d61/dispatch__table_8h_1a5d0d9e773ca46763fb1b1152cafc4179" kindref="member">TreeNode</ref> &amp;</type>
        <definition>TreeNode &amp; Brush::Operator&lt; NT, S, Fit, E &gt;::tn</definition>
        <argsstring></argsstring>
        <name>tn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="98" column="23" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="98" bodyend="-1"/>
        <referencedby refid="dc/d31/structBrush_1_1Operator_1a19c4d0c66ace631c3105e11bd75b4761" compoundref="d7/de0/operator_8h" startline="197" endline="209">Brush::Operator&lt; NT, S, Fit, E &gt;::eval</referencedby>
        <referencedby refid="df/dc1/structBrush_1_1Operator_3_01NodeType_1_1Constant_00_01S_00_01Fit_01_4_1a1309f7a7253c0899447c91ebfee84a3a" compoundref="d7/de0/operator_8h" startline="277" endline="285">Brush::Operator&lt; NodeType::Constant, S, Fit &gt;::eval</referencedby>
        <referencedby refid="dc/d31/structBrush_1_1Operator_1a9f761708b97ff2b45ab8fa9164c78e9e" compoundref="d7/de0/operator_8h" startline="130" endline="138">Brush::Operator&lt; NT, S, Fit, E &gt;::get_kid</referencedby>
        <referencedby refid="dd/d88/structBrush_1_1Operator_3_01NodeType_1_1Terminal_00_01S_00_01Fit_01_4_1a5dde7a99e6d728b63704125b2788a07e">Brush::Operator&lt; NodeType::Terminal, S, Fit &gt;::requires</referencedby>
        <referencedby refid="dc/d31/structBrush_1_1Operator_1ad28b68b8b56bff9cd2c3340fbdc959b3">Brush::Operator&lt; NT, S, Fit, E &gt;::requires</referencedby>
      </memberdef>
      <memberdef kind="variable" id="dc/d31/structBrush_1_1Operator_1ac0d7dd5291386ff527a39f2f4fea03df" prot="public" static="no" mutable="no">
        <type><ref refid="df/d61/dispatch__table_8h_1a5d0d9e773ca46763fb1b1152cafc4179" kindref="member">TreeNode</ref> <ref refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" kindref="member">const</ref> <ref refid="dc/d31/structBrush_1_1Operator_1a33cf8494b82e7e0b7beb42fa376e9a6c" kindref="member">W</ref> **</type>
        <definition>TreeNode const W ** Brush::Operator&lt; NT, S, Fit, E &gt;::weights</definition>
        <argsstring></argsstring>
        <name>weights</name>
        <initializer>=nullptr) <ref refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" kindref="member">const</ref>
    {
        T child_outputs;
        using arg_type = std::conditional_t&lt;<ref refid="dc/d5c/namespaceBrush_1af0a72d6e11b43912abc5bc15d19e66f3" kindref="member">is_std_array_v</ref>&lt;T&gt;,
            typename T::value_type, Array&lt;typename S::FirstArg::Scalar, -1, 1&gt;&gt;;
        if constexpr (<ref refid="dc/d5c/namespaceBrush_1a6225fa35f6e06e54d4a31a8f25cd4a66" kindref="member">is_eigen_array_v</ref>&lt;T&gt;)
            child_outputs.resize(d.get_n_samples(), Eigen::NoChange);

        <ref refid="df/d61/dispatch__table_8h_1a5d0d9e773ca46763fb1b1152cafc4179" kindref="member">TreeNode</ref>* sib = tn.first_child;
        for (int i = 0; i &lt; <ref refid="dc/d31/structBrush_1_1Operator_1a3510e6cd8f26f1f30ab53dcfafe08025" kindref="member">ArgCount</ref>; ++i)
        {
            if (sib == nullptr)
                <ref refid="da/d41/error_8h_1aa4c550bcd71e4ec1c97b111e1360509a" kindref="member">HANDLE_ERROR_THROW</ref>(&quot;bad sibling ptr in get kids&quot;);
            if constexpr (Fit){
                if constexpr(<ref refid="dc/d5c/namespaceBrush_1af0a72d6e11b43912abc5bc15d19e66f3" kindref="member">is_std_array_v</ref>&lt;T&gt;)
                    child_outputs.at(i) = sib-&gt;fit&lt;arg_type&gt;(d);
                else
                    child_outputs.col(i) = sib-&gt;fit&lt;arg_type&gt;(d);
            }
            else{
                if constexpr(<ref refid="dc/d5c/namespaceBrush_1af0a72d6e11b43912abc5bc15d19e66f3" kindref="member">is_std_array_v</ref>&lt;T&gt;)
                    child_outputs.at(i) = sib-&gt;predict&lt;arg_type&gt;(d, weights);
                else
                    child_outputs.col(i) = sib-&gt;predict&lt;arg_type&gt;(d, weights);
            }
            sib = sib-&gt;next_sibling;
        }
        return child_outputs;
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="98" column="34" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="98" bodyend="-1"/>
        <referencedby refid="dc/d31/structBrush_1_1Operator_1a19c4d0c66ace631c3105e11bd75b4761" compoundref="d7/de0/operator_8h" startline="197" endline="209">Brush::Operator&lt; NT, S, Fit, E &gt;::eval</referencedby>
        <referencedby refid="df/dc1/structBrush_1_1Operator_3_01NodeType_1_1Constant_00_01S_00_01Fit_01_4_1a1309f7a7253c0899447c91ebfee84a3a" compoundref="d7/de0/operator_8h" startline="277" endline="285">Brush::Operator&lt; NodeType::Constant, S, Fit &gt;::eval</referencedby>
        <referencedby refid="dc/d31/structBrush_1_1Operator_1a9f761708b97ff2b45ab8fa9164c78e9e" compoundref="d7/de0/operator_8h" startline="130" endline="138">Brush::Operator&lt; NT, S, Fit, E &gt;::get_kid</referencedby>
        <referencedby refid="dd/d88/structBrush_1_1Operator_3_01NodeType_1_1Terminal_00_01S_00_01Fit_01_4_1a5dde7a99e6d728b63704125b2788a07e">Brush::Operator&lt; NodeType::Terminal, S, Fit &gt;::requires</referencedby>
        <referencedby refid="dc/d31/structBrush_1_1Operator_1ad28b68b8b56bff9cd2c3340fbdc959b3">Brush::Operator&lt; NT, S, Fit, E &gt;::requires</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d31/structBrush_1_1Operator_1a09fa4721bd510aacdb5402dc4ce4b5ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Brush::Operator&lt; NT, S, Fit, E &gt;::Operator</definition>
        <argsstring>()=default</argsstring>
        <name>Operator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="92" column="5"/>
      </memberdef>
      <memberdef kind="function" id="dc/d31/structBrush_1_1Operator_1a7a29d34dfd5bc77285679a47c1188ae1" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="dc/d31/structBrush_1_1Operator_1a8c96b38fc30c23b2741aa4c44138ccd1" kindref="member">ArgTypes</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Brush::Operator&lt; NT, S, Fit, E &gt;::requires</definition>
        <argsstring>(is_std_array_v&lt; T &gt;||is_eigen_array_v&lt; T &gt;) T get_kids(const Dataset &amp;d</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1af0a72d6e11b43912abc5bc15d19e66f3" kindref="member">is_std_array_v</ref>&lt; T &gt;||<ref refid="dc/d5c/namespaceBrush_1a6225fa35f6e06e54d4a31a8f25cd4a66" kindref="member">is_eigen_array_v</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
<para>get a std::array or eigen array of kids </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="97" column="16"/>
      </memberdef>
      <memberdef kind="function" id="dc/d31/structBrush_1_1Operator_1a9f761708b97ff2b45ab8fa9164c78e9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d31/structBrush_1_1Operator_1a395f3c1b1eefad96f02412b2dd74721e" kindref="member">NthType</ref>&lt; I &gt;</type>
        <definition>NthType&lt;I&gt; Brush::Operator&lt; NT, S, Fit, E &gt;::get_kid</definition>
        <argsstring>(const Dataset &amp;d, TreeNode &amp;tn, const W **weights) const</argsstring>
        <name>get_kid</name>
        <param>
          <type><ref refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" kindref="member">const</ref> <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="df/d61/dispatch__table_8h_1a5d0d9e773ca46763fb1b1152cafc4179" kindref="member">TreeNode</ref> &amp;</type>
          <declname>tn</declname>
        </param>
        <param>
          <type><ref refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" kindref="member">const</ref> <ref refid="dc/d31/structBrush_1_1Operator_1a33cf8494b82e7e0b7beb42fa376e9a6c" kindref="member">W</ref> **</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>gets one kid for a tuple of kids </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="130" column="13" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="130" bodyend="138"/>
        <references refid="dc/d31/structBrush_1_1Operator_1a9b3566380c44ab792b52b467799285a4" compoundref="d7/de0/operator_8h" startline="98">Brush::Operator&lt; NT, S, Fit, E &gt;::tn</references>
        <references refid="dc/d31/structBrush_1_1Operator_1ac0d7dd5291386ff527a39f2f4fea03df" compoundref="d7/de0/operator_8h" startline="98">Brush::Operator&lt; NT, S, Fit, E &gt;::weights</references>
      </memberdef>
      <memberdef kind="function" id="dc/d31/structBrush_1_1Operator_1a7e2bd4f2712073c61219a19a78c37731" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t ...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Brush::Operator&lt; NT, S, Fit, E &gt;::requires</definition>
        <argsstring>(is_tuple_v&lt; T &gt;) T get_kids_seq(const Dataset &amp;d</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1a00b234ce343d03867e55d528f8cb8895" kindref="member">is_tuple_v</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
<para>Makes and returns a tuple of child outputs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Is</parametername>
</parameternamelist>
<parameterdescription>
<para>integer sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dataset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tn</parametername>
</parameternamelist>
<parameterdescription>
<para>a tree node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a tuple with elements corresponding to each child node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="149" column="18"/>
      </memberdef>
      <memberdef kind="function" id="dc/d31/structBrush_1_1Operator_1ad28b68b8b56bff9cd2c3340fbdc959b3" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="dc/d31/structBrush_1_1Operator_1a8c96b38fc30c23b2741aa4c44138ccd1" kindref="member">ArgTypes</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Brush::Operator&lt; NT, S, Fit, E &gt;::requires</definition>
        <argsstring>(is_tuple_v&lt; T &gt;) T get_kids(const Dataset &amp;d</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1a00b234ce343d03867e55d528f8cb8895" kindref="member">is_tuple_v</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
<para>get a std::tuple of kids. Used when child arguments are different types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>argument types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the dataset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tn</parametername>
</parameternamelist>
<parameterdescription>
<para>the tree node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>option pointer to a weight array, used in place of node weight </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a tuple of the child arguments </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="161" column="16"/>
        <references refid="dc/d31/structBrush_1_1Operator_1a9b3566380c44ab792b52b467799285a4" compoundref="d7/de0/operator_8h" startline="98">Brush::Operator&lt; NT, S, Fit, E &gt;::tn</references>
        <references refid="dc/d31/structBrush_1_1Operator_1ac0d7dd5291386ff527a39f2f4fea03df" compoundref="d7/de0/operator_8h" startline="98">Brush::Operator&lt; NT, S, Fit, E &gt;::weights</references>
      </memberdef>
      <memberdef kind="function" id="dc/d31/structBrush_1_1Operator_1a1fb42dfa3da5dce9359ac0a0cbc9f5bd" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="dc/d31/structBrush_1_1Operator_1a8c96b38fc30c23b2741aa4c44138ccd1" kindref="member">ArgTypes</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Brush::Operator&lt; NT, S, Fit, E &gt;::requires</definition>
        <argsstring>(is_std_array_v&lt; T &gt;||is_tuple_v&lt; T &gt;) RetType apply(const T &amp;inputs) const</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1af0a72d6e11b43912abc5bc15d19e66f3" kindref="member">is_std_array_v</ref>&lt; T &gt;||<ref refid="dc/d5c/namespaceBrush_1a00b234ce343d03867e55d528f8cb8895" kindref="member">is_tuple_v</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
<para>Apply node function in a functional style. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>argument types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>the child node outputs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return values applying F to the inputs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="173" column="16" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="173" bodyend="177"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1a1381c5883d1216248a82c6aafdceb944" compoundref="d5/d60/utils_8h" startline="623" endline="655">Brush::Util::apply</references>
        <references refid="dc/d31/structBrush_1_1Operator_1a5f08ba3c3b0e39c54b830845eba40b68" compoundref="d7/de0/operator_8h" startline="87">Brush::Operator&lt; NT, S, Fit, E &gt;::F</references>
      </memberdef>
      <memberdef kind="function" id="dc/d31/structBrush_1_1Operator_1a82e88e80a6f7ac036470d63b05cf4ea3" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="dc/d31/structBrush_1_1Operator_1a8c96b38fc30c23b2741aa4c44138ccd1" kindref="member">ArgTypes</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Brush::Operator&lt; NT, S, Fit, E &gt;::requires</definition>
        <argsstring>(is_eigen_array_v&lt; T &gt; &amp;&amp;!is_std_array_v&lt; T &gt;) RetType apply(const T &amp;inputs) const</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1a6225fa35f6e06e54d4a31a8f25cd4a66" kindref="member">is_eigen_array_v</ref>&lt; T &gt; &amp;&amp;!<ref refid="dc/d5c/namespaceBrush_1af0a72d6e11b43912abc5bc15d19e66f3" kindref="member">is_std_array_v</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
<para>Apply the node function like a function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>argument types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>the child node outputs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return values applying F to the inputs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="183" column="16" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="183" bodyend="187"/>
        <references refid="dc/d31/structBrush_1_1Operator_1a5f08ba3c3b0e39c54b830845eba40b68" compoundref="d7/de0/operator_8h" startline="87">Brush::Operator&lt; NT, S, Fit, E &gt;::F</references>
      </memberdef>
      <memberdef kind="function" id="dc/d31/structBrush_1_1Operator_1a19c4d0c66ace631c3105e11bd75b4761" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="dc/d31/structBrush_1_1Operator_1a8c96b38fc30c23b2741aa4c44138ccd1" kindref="member">ArgTypes</ref></defval>
          </param>
          <param>
            <type>typename <ref refid="dc/d5c/namespaceBrush_1ac3467b794678aa79ffba2438c8fbd16b" kindref="member">Scalar</ref></type>
            <defval>RetType::Scalar</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d31/structBrush_1_1Operator_1a424bb09369598ed3d44f4d2b68eebcef" kindref="member">RetType</ref></type>
        <definition>RetType Brush::Operator&lt; NT, S, Fit, E &gt;::eval</definition>
        <argsstring>(const Dataset &amp;d, TreeNode &amp;tn, const W **weights=nullptr) const</argsstring>
        <name>eval</name>
        <param>
          <type><ref refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" kindref="member">const</ref> <ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="df/d61/dispatch__table_8h_1a5d0d9e773ca46763fb1b1152cafc4179" kindref="member">TreeNode</ref> &amp;</type>
          <declname>tn</declname>
        </param>
        <param>
          <type><ref refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" kindref="member">const</ref> <ref refid="dc/d31/structBrush_1_1Operator_1a33cf8494b82e7e0b7beb42fa376e9a6c" kindref="member">W</ref> **</type>
          <declname>weights</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>evaluate the operator on the data. main entry point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>argument types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying scalar type of the return type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dataset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tn</parametername>
</parameternamelist>
<parameterdescription>
<para>tree node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>option pointer to a weight array, used in place of node weight </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>output values from applying operator function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/operator.h" line="197" column="13" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="197" bodyend="209"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1a1381c5883d1216248a82c6aafdceb944" compoundref="d5/d60/utils_8h" startline="623" endline="655">Brush::Util::apply</references>
        <references refid="dc/d31/structBrush_1_1Operator_1a9b3566380c44ab792b52b467799285a4" compoundref="d7/de0/operator_8h" startline="98">Brush::Operator&lt; NT, S, Fit, E &gt;::tn</references>
        <references refid="dc/d31/structBrush_1_1Operator_1ac0d7dd5291386ff527a39f2f4fea03df" compoundref="d7/de0/operator_8h" startline="98">Brush::Operator&lt; NT, S, Fit, E &gt;::weights</references>
        <referencedby refid="dc/d5c/namespaceBrush_1a295fffe6ae57b4a3c871c7cfe1450e1d" compoundref="d7/de0/operator_8h" startline="295" endline="299">Brush::DispatchOp</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Core computation of a node&apos;s function to data. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>the signature of the node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NT</parametername>
</parameternamelist>
<parameterdescription>
<para>node type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Fit</parametername>
</parameternamelist>
<parameterdescription>
<para>true: fit, false: predict </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>used for node type specialization </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/runner/work/brush/brush/src/program/operator.h" line="57" column="1" bodyfile="/home/runner/work/brush/brush/src/program/operator.h" bodystart="58" bodyend="211"/>
    <listofallmembers>
      <member refid="dc/d31/structBrush_1_1Operator_1a3510e6cd8f26f1f30ab53dcfafe08025" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>ArgCount</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a8c96b38fc30c23b2741aa4c44138ccd1" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>ArgTypes</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a3bedec6829095c6bb0b7c82885622d8e" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>const</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a19c4d0c66ace631c3105e11bd75b4761" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>eval</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a5f08ba3c3b0e39c54b830845eba40b68" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>F</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a9f761708b97ff2b45ab8fa9164c78e9e" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>get_kid</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a395f3c1b1eefad96f02412b2dd74721e" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>NthType</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a09fa4721bd510aacdb5402dc4ce4b5ac" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>Operator</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a7a29d34dfd5bc77285679a47c1188ae1" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>requires</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a7e2bd4f2712073c61219a19a78c37731" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>requires</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1ad28b68b8b56bff9cd2c3340fbdc959b3" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>requires</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a1fb42dfa3da5dce9359ac0a0cbc9f5bd" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>requires</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a82e88e80a6f7ac036470d63b05cf4ea3" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>requires</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a424bb09369598ed3d44f4d2b68eebcef" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>RetType</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a9b3566380c44ab792b52b467799285a4" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>tn</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1a33cf8494b82e7e0b7beb42fa376e9a6c" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>W</name></member>
      <member refid="dc/d31/structBrush_1_1Operator_1ac0d7dd5291386ff527a39f2f4fea03df" prot="public" virt="non-virtual"><scope>Brush::Operator</scope><name>weights</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
