<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d1/db6/inexact_8h" kind="file" language="C++">
    <compoundname>inexact.h</compoundname>
    <includes refid="d8/dc0/init_8h" local="yes">../init.h</includes>
    <includes refid="d9/d49/types_8h" local="yes">../types.h</includes>
    <includes refid="d1/dea/program_8h" local="yes">../program/program.h</includes>
    <includes refid="d9/d99/search__space_8h" local="yes">../vary/search_space.h</includes>
    <includes refid="d5/d60/utils_8h" local="yes">../util/utils.h</includes>
    <includedby refid="d8/df7/bind__variation_8h" local="yes">bind_variation.h</includedby>
    <includedby refid="de/d79/inexact_8cpp" local="yes">inexact.cpp</includedby>
    <includedby refid="d4/d1f/variation_8h" local="yes">variation.h</includedby>
    <incdepgraph>
      <node id="49">
        <label>../../thirdparty/tree.hh</label>
      </node>
      <node id="26">
        <label>../data/data.h</label>
        <link refid="d2/dbd/data_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>timeseries.h</label>
        <link refid="d9/df7/timeseries_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../init.h</label>
        <link refid="d8/dc0/init_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>../params.h</label>
        <link refid="da/d33/params_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>dispatch_table.h</label>
        <link refid="df/d61/dispatch__table_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>functions.h</label>
        <link refid="d8/d5c/functions_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>node.h</label>
        <link refid="d1/d77/node_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>nodetype.h</label>
        <link refid="de/d26/nodetype_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>tiny_cost_function.h</label>
        <link refid="dd/d1b/tiny__cost__function_8h"/>
      </node>
      <node id="54">
        <label>optimizer/weight_optimizer.h</label>
        <link refid="d7/de3/weight__optimizer_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>../program/program.h</label>
        <link refid="d1/dea/program_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>signatures.h</label>
        <link refid="d8/d8b/signatures_8h"/>
      </node>
      <node id="23">
        <label>tree_node.h</label>
        <link refid="d1/da6/tree__node_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inexact.h</label>
        <link refid="d1/db6/inexact_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>error.h</label>
        <link refid="da/d41/error_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>../util/logger.h</label>
        <link refid="d1/d8c/logger_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>../util/rnd.h</label>
        <link refid="d2/da9/rnd_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>../util/utils.h</label>
        <link refid="d5/d60/utils_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>../vary/search_space.h</label>
        <link refid="d9/d99/search__space_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Eigen/Dense</label>
      </node>
      <node id="22">
        <label>assert.h</label>
      </node>
      <node id="42">
        <label>bitset</label>
      </node>
      <node id="55">
        <label>ceres/dynamic_autodiff_cost_function.h</label>
      </node>
      <node id="56">
        <label>ceres/dynamic_numeric_diff_cost_function.h</label>
      </node>
      <node id="19">
        <label>ceres/jet.h</label>
      </node>
      <node id="57">
        <label>ceres/loss_function.h</label>
      </node>
      <node id="58">
        <label>ceres/solver.h</label>
      </node>
      <node id="59">
        <label>ceres/tiny_solver.h</label>
      </node>
      <node id="28">
        <label>chrono</label>
      </node>
      <node id="47">
        <label>cmath</label>
      </node>
      <node id="20">
        <label>concepts</label>
      </node>
      <node id="51">
        <label>cstddef</label>
      </node>
      <node id="33">
        <label>execution</label>
      </node>
      <node id="14">
        <label>fmt/format.h</label>
      </node>
      <node id="13">
        <label>fmt/ostream.h</label>
      </node>
      <node id="15">
        <label>fmt/ranges.h</label>
      </node>
      <node id="7">
        <label>fstream</label>
      </node>
      <node id="48">
        <label>functional</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="32">
        <label>iterator</label>
      </node>
      <node id="37">
        <label>limits</label>
      </node>
      <node id="9">
        <label>map</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="16">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="8">
        <label>numeric</label>
      </node>
      <node id="39">
        <label>optional</label>
      </node>
      <node id="29">
        <label>ostream</label>
      </node>
      <node id="36">
        <label>random</label>
      </node>
      <node id="10">
        <label>set</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="24">
        <label>tuple</label>
      </node>
      <node id="43">
        <label>type_traits</label>
      </node>
      <node id="31">
        <label>typeindex</label>
      </node>
      <node id="25">
        <label>unordered_map</label>
      </node>
      <node id="44">
        <label>utility</label>
      </node>
      <node id="18">
        <label>variant</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>bind_engines.cpp</label>
        <link refid="d1/df0/bind__engines_8cpp"/>
      </node>
      <node id="6">
        <label>bind_engines.h</label>
        <link refid="d4/d93/bind__engines_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bind_variation.cpp</label>
        <link refid="df/d41/bind__variation_8cpp"/>
      </node>
      <node id="2">
        <label>bind_variation.h</label>
        <link refid="d8/df7/bind__variation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>engine.cpp</label>
        <link refid="da/d5c/engine_8cpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>engine.h</label>
        <link refid="d1/d55/engine_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>inexact.cpp</label>
        <link refid="de/d79/inexact_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inexact.h</label>
        <link refid="d1/db6/inexact_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>variation.cpp</label>
        <link refid="d1/d64/variation_8cpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>variation.h</label>
        <link refid="d4/d1f/variation_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage" prot="public">Brush::Simpl::HashStorage</innerclass>
    <innerclass refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier" prot="public">Brush::Simpl::Inexact_simplifier</innerclass>
    <innernamespace refid="dc/d5c/namespaceBrush">Brush</innernamespace>
    <innernamespace refid="df/d29/namespaceBrush_1_1Simpl">Brush::Simpl</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="d1/db6/inexact_8h_1a3f2c9b744330ba4a561ac72f048a1a5f" prot="public" static="no" strong="yes">
        <type></type>
        <name>DataType</name>
        <briefdescription>
<para>data types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/simplification/inexact.h" line="19" column="1" bodyfile="/home/runner/work/brush/brush/src/types.h" bodystart="143" bodyend="162"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>simplification<sp/>maps<sp/>are<sp/>based<sp/>on<sp/>trainingdata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>ignore<sp/>fixed<sp/>nodes<sp/>---&gt;<sp/>does<sp/>not<sp/>change<sp/>subtrees<sp/>if<sp/>they<sp/>contain<sp/>fixed<sp/>nodes<sp/>(also<sp/>this<sp/>should<sp/>be<sp/>applied<sp/>to<sp/>the<sp/>constants<sp/>simplification)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>tables<sp/>and<sp/>max_samples_to_use<sp/>are<sp/>parameters,<sp/>set<sp/>default<sp/>values<sp/>enough<sp/>to<sp/>make<sp/>it<sp/>work<sp/>off-the-shelf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>I<sp/>implement<sp/>json<sp/>serialization?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>maybe<sp/>this<sp/>function<sp/>should<sp/>be<sp/>templated.<sp/>should<sp/>handle<sp/>constant<sp/>predictions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INEXACT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INEXACT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/dc0/init_8h" kindref="compound">../init.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d49/types_8h" kindref="compound">../types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/dea/program_8h" kindref="compound">../program/program.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d99/search__space_8h" kindref="compound">../vary/search_space.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d5/d60/utils_8h" kindref="compound">../util/utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Brush::Node</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d5c/namespaceBrush_1a3f2c9b744330ba4a561ac72f048a1a5f" kindref="member">Brush::DataType</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dc/d5c/namespaceBrush" kindref="compound">Brush</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="df/d29/namespaceBrush_1_1Simpl" kindref="compound">Simpl</ref>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23" refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a09455036f0b5fe29bced058c54b148e3" kindref="member">HashStorage</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25" refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a09455036f0b5fe29bced058c54b148e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a09455036f0b5fe29bced058c54b148e3" kindref="member">HashStorage</ref>()<sp/>{};</highlight></codeline>
<codeline lineno="26" refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a150bed4ddabbe973e01d4555724fb086" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a150bed4ddabbe973e01d4555724fb086" kindref="member">~HashStorage</ref>()<sp/>{};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a4af7d1c7c216e6a796c10d594a99b88d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a4af7d1c7c216e6a796c10d594a99b88d" kindref="member">append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>.find(key)<sp/>==<sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>.end())</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>[key]<sp/>=<sp/>vector&lt;ArrayXf&gt;{value};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>[key].push_back(value);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a068c14340ed0eb673af8566415b653ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ArrayXf&gt;<sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a068c14340ed0eb673af8566415b653ac" kindref="member">getList</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>.find(key);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>.end())</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>vector&lt;ArrayXf&gt;<sp/>empty_list;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>empty_list;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a4cc087bda9fd98d2e7fe416e3e3ad4ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a4cc087bda9fd98d2e7fe416e3e3ad4ba" kindref="member">clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>.clear();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a3131a419472218d757fbb0753789f50a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a3131a419472218d757fbb0753789f50a" kindref="member">keys</ref>()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pair<sp/>:<sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(pair.first);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57" refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;string,<sp/>vector&lt;ArrayXf&gt;&gt;<sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage_1a729e37e8a93bd58b89c4652aff2ae8df" kindref="member">storage</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a3a6711a4adc8e43324fe675688c8b3cb" kindref="member">Inexact_simplifier</ref></highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>Inexact_simplifier*<sp/>initSimplifier();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a41460e9850821be449036099f776a84f" kindref="member">initUniformPlanes</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inputDim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPlanes);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>void<sp/>destroy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>mode<sp/>templated<sp/>stuff<sp/>to<sp/>cpp.<sp/>right<sp/>now<sp/>they<sp/>are<sp/>in<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>of<sp/>the<sp/>templating,<sp/>that<sp/>does<sp/>not<sp/>work<sp/>with<sp/>testing.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>happening<sp/>in<sp/>inexact,<sp/>constants,<sp/>variation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;Brush::ProgramType<sp/>PT&gt;</highlight></codeline>
<codeline lineno="72" refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a0bc38a2a1733e80dbdfeb790e95acb61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d88/structBrush_1_1Program" kindref="compound">Program&lt;PT&gt;</ref><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a0bc38a2a1733e80dbdfeb790e95acb61" kindref="member">simplify_tree</ref>(<ref refid="db/d88/structBrush_1_1Program" kindref="compound">Program&lt;PT&gt;</ref>&amp;<sp/>program,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/dc3/structBrush_1_1SearchSpace" kindref="compound">SearchSpace</ref><sp/>&amp;ss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref><sp/>&amp;d)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d88/structBrush_1_1Program" kindref="compound">Program&lt;PT&gt;</ref><sp/>simplified_program(program);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>over<sp/>the<sp/>tree,<sp/>trying<sp/>to<sp/>replace<sp/>each<sp/>node<sp/>with<sp/>a<sp/>constant,<sp/>and<sp/>keeping<sp/>the<sp/>change<sp/>if<sp/>the<sp/>pred<sp/>does<sp/>not<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d5c/namespaceBrush_1a85201aa8f093fe8fdd3b9060a2526dfe" kindref="member">TreeIter</ref><sp/>spot<sp/>=<sp/>simplified_program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref>.begin();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(spot<sp/>!=<sp/>simplified_program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref>.end())</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>dont<sp/>index<sp/>or<sp/>simplify<sp/>fixed<sp/>stuff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-wheightable<sp/>nodes<sp/>are<sp/>not<sp/>simplified.<sp/>TODO:<sp/>revisit<sp/>this<sp/>and<sp/>see<sp/>if<sp/>they<sp/>should<sp/>(then<sp/>implement<sp/>it)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>avoiding<sp/>using<sp/>booleans.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spot.node-&gt;data.get_prob_change()<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&amp;&amp;<sp/><sp/>IsWeighable(spot.node-&gt;data.ret_type)<sp/>&amp;&amp;<sp/>IsWeighable(spot.node-&gt;data.node_type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indexing<sp/>only<sp/>small<sp/>subtrees<sp/>or<sp/>non-constant-terminal<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simplified_program.<ref refid="db/d88/structBrush_1_1Program_1a826ef90ae1aaf8f2637f551cfff0746a" kindref="member">size_at</ref>(spot)<sp/>&lt;<sp/>10</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/><ref refid="dc/d5c/namespaceBrush_1a14447d2f04191fa6607e02077a4137ea" kindref="member">Isnt&lt;NodeType::Constant, NodeType::MeanLabel&gt;</ref>(spot.node-&gt;data.node_type))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1ade7f7d485257f318d04c6e60c0b027ff" kindref="member">index</ref>(spot,<sp/>d);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/d5c/namespaceBrush_1a14447d2f04191fa6607e02077a4137ea" kindref="member">Isnt&lt;NodeType::Constant, NodeType::MeanLabel, NodeType::Terminal&gt;</ref>(spot.node-&gt;data.node_type)){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>res<sp/>will<sp/>return<sp/>the<sp/>closest<sp/>within<sp/>the<sp/>threshold,<sp/>so<sp/>we<sp/>dont<sp/>have<sp/>to<sp/>check<sp/>distance<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1ad8c739c0661668ec1b869d73c3f412f6" kindref="member">query</ref>(spot,<sp/>d);<sp/></highlight><highlight class="comment">//<sp/>optional&lt;pair&lt;size_t,<sp/>string&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>res.value();<sp/></highlight><highlight class="comment">//<sp/>table<sp/>index<sp/>and<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tree&lt;Node&gt;<sp/>branch(spot);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" kindref="member">equivalentExpression</ref>.find(key)<sp/>==<sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" kindref="member">equivalentExpression</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" kindref="member">equivalentExpression</ref>[key]<sp/>=<sp/>branch;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spot.node-&gt;get_size(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;<sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" kindref="member">equivalentExpression</ref>[key].begin().node-&gt;get_size(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" kindref="member">equivalentExpression</ref>[key]<sp/>=<sp/>branch;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spot.node-&gt;get_size(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&gt;<sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" kindref="member">equivalentExpression</ref>[key].begin().node-&gt;get_size(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tree&lt;Node&gt;<sp/>simplified_branch(<ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" kindref="member">equivalentExpression</ref>[key]);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simplified_program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref>.erase_children(spot);<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spot<sp/>=<sp/>simplified_program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref>.move_ontop(spot,<sp/>simplified_branch.begin());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++spot;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref><sp/>=<sp/>simplified_program.<ref refid="db/d88/structBrush_1_1Program_1a7435fb84d7b056a108f142bb19956da5" kindref="member">Tree</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>simplified_program;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a3a6711a4adc8e43324fe675688c8b3cb" kindref="member">Inexact_simplifier</ref>();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a8b53abd24e3b1b8018379befdce0059a" kindref="member">~Inexact_simplifier</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>make<sp/>index<sp/>private<sp/>and<sp/>initUniformPlanes<sp/>to<sp/>add<sp/>terminals<sp/>from<sp/>search<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1ade7f7d485257f318d04c6e60c0b027ff" kindref="member">index</ref>(<ref refid="dc/d5c/namespaceBrush_1a85201aa8f093fe8fdd3b9060a2526dfe" kindref="member">TreeIter</ref>&amp;<sp/>spot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref><sp/>&amp;d);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1aded95b400fe1fab7d4e7fb8979fc559d" kindref="member">hash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayXf&amp;<sp/>inputPoint);<sp/></highlight><highlight class="comment">//<sp/>one<sp/>string<sp/>for<sp/>each<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>return<sp/>the<sp/>hash<sp/>and<sp/>the<sp/>distance<sp/>to<sp/>the<sp/>queryPoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional&lt;pair&lt;size_t,<sp/>string&gt;&gt;<sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1ad8c739c0661668ec1b869d73c3f412f6" kindref="member">query</ref>(<ref refid="dc/d5c/namespaceBrush_1a85201aa8f093fe8fdd3b9060a2526dfe" kindref="member">TreeIter</ref>&amp;<sp/>spot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d36/classBrush_1_1Data_1_1Dataset" kindref="compound">Dataset</ref><sp/>&amp;d);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>storage<sp/>instance<sp/>for<sp/>each<sp/>datatype/rettype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>storage<sp/>will<sp/>be<sp/>used<sp/>to<sp/>calculate<sp/>the<sp/>hash<sp/>and<sp/>query<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collection<sp/>of<sp/>hashes,<sp/>returning<sp/>the<sp/>closest<sp/>ones,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>list<sp/>will<sp/>contain<sp/>equivalent<sp/>expressions,<sp/>ordered<sp/>by<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(or<sp/>linear<sp/>complexity).<sp/>So<sp/>we<sp/>dont<sp/>store<sp/>pairs<sp/>in<sp/>the<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>improve<sp/>how<sp/>I<sp/>handle<sp/>different<sp/>return<sp/>types<sp/>(should<sp/>I<sp/>use<sp/>a<sp/>map?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a301d3c5a919a16816eef139a0e15350b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage" kindref="compound">HashStorage</ref><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a301d3c5a919a16816eef139a0e15350b" kindref="member">storageBool</ref>;</highlight></codeline>
<codeline lineno="139" refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a33d6b73c253d7aeedf50a3681a0d28c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage" kindref="compound">HashStorage</ref><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a33d6b73c253d7aeedf50a3681a0d28c1" kindref="member">storageInt</ref>;</highlight></codeline>
<codeline lineno="140" refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1ac495100cc8a47f38e1fb9b16b8c7b67c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d71/classBrush_1_1Simpl_1_1HashStorage" kindref="compound">HashStorage</ref><sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1ac495100cc8a47f38e1fb9b16b8c7b67c" kindref="member">storageFloat</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;pair&lt;size_t,<sp/>string&gt;,<sp/>tree&lt;Node&gt;&gt;<sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1adf34fc95f8eb5c75bfa8b79820612241" kindref="member">equivalentExpression</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a7319339ce256877088504967d3100685" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;MatrixXf&gt;<sp/><ref refid="de/dc5/classBrush_1_1Simpl_1_1Inexact__simplifier_1a7319339ce256877088504967d3100685" kindref="member">uniformPlanes</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>private<sp/>static<sp/>attribute<sp/>used<sp/>by<sp/>every<sp/>instance<sp/>of<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>Inexact_simplifier*<sp/>instance;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>Inexact_simplifier<sp/>&amp;inexact_simplifier<sp/>=<sp/>*Inexact_simplifier::initSimplifier();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Simply</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Brush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/brush/brush/src/simplification/inexact.h"/>
  </compounddef>
</doxygen>
