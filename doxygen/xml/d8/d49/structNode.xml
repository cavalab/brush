<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d8/d49/structNode" kind="struct" language="C++" prot="public">
    <compoundname>Node</compoundname>
    <includes refid="d1/d77/node_8h" local="no">node.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d8/d49/structNode_1abd1037d20f96e122bc1305d70aab418a" prot="public" static="no">
        <type>std::tuple&lt; <ref refid="dc/d5c/namespaceBrush_1a03de66d0fd6edab4d8a8ab5281e74dc3" kindref="member">UnderlyingNodeType</ref>, size_t, bool, <ref refid="d5/d92/classstring" kindref="compound">string</ref>, bool, int &gt;</type>
        <definition>using Brush::Node::HashTuple =  std::tuple&lt; 
        UnderlyingNodeType,     
        size_t,                 
        bool,                   
        string,                 
        bool,                   
        int                     
        
    &gt;</definition>
        <argsstring></argsstring>
        <name>HashTuple</name>
        <qualifiedname>Node::HashTuple</qualifiedname>
        <briefdescription>
<para>tuple type for hashing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="115" column="5" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="115" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d8/d49/structNode_1ad6b3fd4a54c813d066370defc8a85af1" prot="public" static="no" mutable="no">
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>string Brush::Node::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <qualifiedname>Node::name</qualifiedname>
        <briefdescription>
<para>full name of the node, with types </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="87" column="12" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1a522791afe93c92442564356ff19ff55a" prot="public" static="no" mutable="no">
        <type><ref refid="dc/d5c/namespaceBrush_1a051322bb9fd1db4638b6eccd399a29c8" kindref="member">NodeType</ref></type>
        <definition>NodeType Brush::Node::node_type</definition>
        <argsstring></argsstring>
        <name>node_type</name>
        <qualifiedname>Node::node_type</qualifiedname>
        <briefdescription>
<para>the node type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="89" column="14" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1a65b283648fe779d81ac11f9e4714d920" prot="public" static="no" mutable="no">
        <type><ref refid="dc/d5c/namespaceBrush_1a3f2c9b744330ba4a561ac72f048a1a5f" kindref="member">DataType</ref></type>
        <definition>DataType Brush::Node::ret_type</definition>
        <argsstring></argsstring>
        <name>ret_type</name>
        <qualifiedname>Node::ret_type</qualifiedname>
        <briefdescription>
<para>return data type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="92" column="14" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1a237b9208864ace5209edca01623f6b1e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="dc/d5c/namespaceBrush_1a3f2c9b744330ba4a561ac72f048a1a5f" kindref="member">DataType</ref> &gt;</type>
        <definition>std::vector&lt;DataType&gt; Brush::Node::arg_types</definition>
        <argsstring></argsstring>
        <name>arg_types</name>
        <qualifiedname>Node::arg_types</qualifiedname>
        <briefdescription>
<para>argument data types </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="94" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1a889e0361b55a63a4510a3edabd2fa57c" prot="public" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t Brush::Node::sig_hash</definition>
        <argsstring></argsstring>
        <name>sig_hash</name>
        <qualifiedname>Node::sig_hash</qualifiedname>
        <briefdescription>
<para>a hash of the signature </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="96" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1aed6c2af0fae3dd8e5a8aa2fab77479fd" prot="public" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t Brush::Node::sig_dual_hash</definition>
        <argsstring></argsstring>
        <name>sig_dual_hash</name>
        <qualifiedname>Node::sig_dual_hash</qualifiedname>
        <briefdescription>
<para>a hash of the dual of the signature (for NLS) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="98" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1a32c73293ee4e02b6d828c2c213e06154" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Brush::Node::fixed</definition>
        <argsstring></argsstring>
        <name>fixed</name>
        <qualifiedname>Node::fixed</qualifiedname>
        <briefdescription>
<para>whether the node is replaceable. Weights are still optimized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="101" column="10" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1ab72b791f57011a032c6c89238db85845" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Brush::Node::is_weighted</definition>
        <argsstring></argsstring>
        <name>is_weighted</name>
        <qualifiedname>Node::is_weighted</qualifiedname>
        <briefdescription>
<para>whether this node is weighted (ignored in nodes that must have weights, such as meanLabel, constants, splits) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="103" column="10" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1a9f5b2e34d8ba752e0f6bffebec8afdc0" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float Brush::Node::prob_change</definition>
        <argsstring></argsstring>
        <name>prob_change</name>
        <qualifiedname>Node::prob_change</qualifiedname>
        <briefdescription>
<para>chance of node being selected for variation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="105" column="11" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1ab719e64b13753515be49327d98bf2224" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float Brush::Node::W</definition>
        <argsstring></argsstring>
        <name>W</name>
        <qualifiedname>Node::W</qualifiedname>
        <briefdescription>
<para>the weights of the node. also used for splitting thresholds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="107" column="11" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1a0971012cfb2ae944f4bea0ea0dc9e5a3" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Brush::Node::center_op</definition>
        <argsstring></argsstring>
        <name>center_op</name>
        <qualifiedname>Node::center_op</qualifiedname>
        <briefdescription>
<para>whether to center the operator in pretty printing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="110" column="10" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1ac5f37d638625468ed68de599a2a7d968" prot="public" static="no" mutable="no">
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>string Brush::Node::feature</definition>
        <argsstring></argsstring>
        <name>feature</name>
        <qualifiedname>Node::feature</qualifiedname>
        <briefdescription>
<para>feature name for terminals or splitting nodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="281" column="12" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1a2875e5aa77054658c071f7b0d7103e68" prot="public" static="no" mutable="no">
        <type><ref refid="dc/d5c/namespaceBrush_1a3f2c9b744330ba4a561ac72f048a1a5f" kindref="member">DataType</ref></type>
        <definition>DataType Brush::Node::feature_type</definition>
        <argsstring></argsstring>
        <name>feature_type</name>
        <qualifiedname>Node::feature_type</qualifiedname>
        <initializer>= DataType::ArrayF</initializer>
        <briefdescription>
<para>feature type for terminals or splitting nodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="284" column="14" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d49/structNode_1abee9ab1ef7eb2e12dcf45db1bbddf25a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Brush::Node::keep_split_feature</definition>
        <argsstring></argsstring>
        <name>keep_split_feature</name>
        <qualifiedname>Node::keep_split_feature</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>fix the SplitBest feature when the node is fixed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="287" column="10" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="287" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d49/structNode_1adcd17b2d50bd124218a1ed472369d461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Brush::Node::Node</definition>
        <argsstring>()=default</argsstring>
        <name>Node</name>
        <qualifiedname>Node::Node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="126" column="5"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a62f7ba79b38e86e54488e5dd9a6bdc93" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Brush::Node::Node</definition>
        <argsstring>(NodeType type, S signature, bool weighted=false, string feature_name=&quot;&quot;) noexcept</argsstring>
        <name>Node</name>
        <qualifiedname>Node::Node</qualifiedname>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1a051322bb9fd1db4638b6eccd399a29c8" kindref="member">NodeType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>S</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
          <declname>feature_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Constructor used by search space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>signature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>node type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feature_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the terminal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>signature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="134" column="14" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="134" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a24ab653c36833ab9cd301efe99b39d5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Brush::Node::set_signature</definition>
        <argsstring>()</argsstring>
        <name>set_signature</name>
        <qualifiedname>Node::set_signature</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="148" column="10" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="148" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a99e9db58c89646c630fb9d54b41ff2ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Node::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <qualifiedname>Node::init</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="157" column="10" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="157" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1aaddaf7903795dfdcad487234d6dc380e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>auto Brush::Node::get_name</definition>
        <argsstring>(bool include_weight=true) const noexcept</argsstring>
        <name>get_name</name>
        <qualifiedname>Node::get_name</qualifiedname>
        <param>
          <type>bool</type>
          <declname>include_weight</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>gets a string version of the node for printing. </para>
        </briefdescription>
        <detaileddescription>
<para>get the name of the node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>include_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to include the node&apos;s weight in the output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string version of the node.</para>
</simplesect>
<simplesect kind="return"><para>name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="175" column="12" bodyfile="/home/runner/work/brush/brush/src/program/node.cpp" bodystart="20" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1af621eb9463a3ed3434841565a849c03b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>string Brush::Node::get_model</definition>
        <argsstring>(const vector&lt; string &gt; &amp;) const noexcept</argsstring>
        <name>get_model</name>
        <qualifiedname>Node::get_model</qualifiedname>
        <param>
          <type>const <ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; <ref refid="d5/d92/classstring" kindref="compound">string</ref> &gt; &amp;</type>
          <defname>children</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="176" column="12" bodyfile="/home/runner/work/brush/brush/src/program/node.cpp" bodystart="52" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a2d4b7a1f21f80ce980f4748432911964" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/d5c/namespaceBrush_1a3f2c9b744330ba4a561ac72f048a1a5f" kindref="member">DataType</ref></type>
        <definition>DataType Brush::Node::get_ret_type</definition>
        <argsstring>() const</argsstring>
        <name>get_ret_type</name>
        <qualifiedname>Node::get_ret_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="179" column="21" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a9ec6ba08b0baebc0cd105e4ef774b7fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t Brush::Node::args_type</definition>
        <argsstring>() const</argsstring>
        <name>args_type</name>
        <qualifiedname>Node::args_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="180" column="24" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a754e5efb828686e30ebfa2174d56e37a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Brush::Node::get_arg_types</definition>
        <argsstring>() const</argsstring>
        <name>get_arg_types</name>
        <qualifiedname>Node::get_arg_types</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="181" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1ac2f0913b7a3e238d879722eb7f62aee2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Brush::Node::get_arg_count</definition>
        <argsstring>() const</argsstring>
        <name>get_arg_count</name>
        <qualifiedname>Node::get_arg_count</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="182" column="19" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a3365cec003572b3ea248bd6647437d73" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Brush::Node::get_node_hash</definition>
        <argsstring>(bool include_const=true) const</argsstring>
        <name>get_node_hash</name>
        <qualifiedname>Node::get_node_hash</qualifiedname>
        <param>
          <type>bool</type>
          <declname>include_const</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="196" column="12" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="196" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a7c46bb16fb006691be230d29b6e731fe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Brush::Node::operator==</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>Node::operator==</qualifiedname>
        <param>
          <type>const <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="213" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="213" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1ac854a6c4b96a0524e1371397c6fba4b1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Brush::Node::operator!=</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>Node::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="224" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1aea5769142b80b211a53eb20d8a14507b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Brush::Node::operator&lt;</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>Node::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="229" column="12" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="229" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a62ae8b64fc43f5f13d697c481efb6588" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Brush::Node::operator&lt;=</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>Node::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="236" column="12" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a6dabaf6f3fcd362ff8fbc9e0bd37756f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Brush::Node::operator&gt;</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>Node::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="241" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1aa020471209858e31cb4cf26453033929" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Brush::Node::operator&gt;=</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>Node::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="d1/d3a/structBrush_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="246" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a4fcf7feccb71d538f8614d3c51247eb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Node::get_prob_change</definition>
        <argsstring>() const</argsstring>
        <name>get_prob_change</name>
        <qualifiedname>Node::get_prob_change</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="254" column="11" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1ad9e4f8654978a40e8266b20a4bb0950f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Node::set_prob_change</definition>
        <argsstring>(float w)</argsstring>
        <name>set_prob_change</name>
        <qualifiedname>Node::set_prob_change</qualifiedname>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="255" column="10" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a087a9c51b46b3e801506415376cd0518" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Node::get_prob_keep</definition>
        <argsstring>() const</argsstring>
        <name>get_prob_keep</name>
        <qualifiedname>Node::get_prob_keep</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="256" column="11" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a7e8460b645f3d58c3093eda1d5d3166c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Node::set_feature</definition>
        <argsstring>(string f)</argsstring>
        <name>set_feature</name>
        <qualifiedname>Node::set_feature</qualifiedname>
        <param>
          <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="258" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a85a62efd4f1f99fa45eb52e4c0a1a26f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>string Brush::Node::get_feature</definition>
        <argsstring>() const</argsstring>
        <name>get_feature</name>
        <qualifiedname>Node::get_feature</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="259" column="19" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a9ceebb9b686a6f6784ae90c558385410" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Node::set_feature_type</definition>
        <argsstring>(DataType ft)</argsstring>
        <name>set_feature_type</name>
        <qualifiedname>Node::set_feature_type</qualifiedname>
        <param>
          <type><ref refid="dc/d5c/namespaceBrush_1a3f2c9b744330ba4a561ac72f048a1a5f" kindref="member">DataType</ref></type>
          <declname>ft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="261" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="261" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a5d3a467bbb0b2fa914594c735579926d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/d5c/namespaceBrush_1a3f2c9b744330ba4a561ac72f048a1a5f" kindref="member">DataType</ref></type>
        <definition>DataType Brush::Node::get_feature_type</definition>
        <argsstring>() const</argsstring>
        <name>get_feature_type</name>
        <qualifiedname>Node::get_feature_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="262" column="21" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a31f2f60b25fa6a8fa8f420070da2863d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Node::set_keep_split_feature</definition>
        <argsstring>(bool keep)</argsstring>
        <name>set_keep_split_feature</name>
        <qualifiedname>Node::set_keep_split_feature</qualifiedname>
        <param>
          <type>bool</type>
          <declname>keep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="264" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a27183f178a41394fea61c7f5b1fdc751" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Brush::Node::get_keep_split_feature</definition>
        <argsstring>() const</argsstring>
        <name>get_keep_split_feature</name>
        <qualifiedname>Node::get_keep_split_feature</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="265" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a8d884d5ad5f6825aa8f50039fb6baf9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Brush::Node::get_is_weighted</definition>
        <argsstring>() const</argsstring>
        <name>get_is_weighted</name>
        <qualifiedname>Node::get_is_weighted</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="269" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="269" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="d8/d49/structNode_1a70fb9b583f72b67f6c24c2bbaae55267" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Node::set_is_weighted</definition>
        <argsstring>(bool is_weighted)</argsstring>
        <name>set_is_weighted</name>
        <qualifiedname>Node::set_is_weighted</qualifiedname>
        <param>
          <type>bool</type>
          <declname>is_weighted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/program/node.h" line="274" column="17" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="274" bodyend="277"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>class holding the data for a node in a tree. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Node</label>
        <link refid="d8/d49/structNode"/>
        <childnode refid="2" relation="usage">
          <edgelabel>feature</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>arg_types</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; DataType &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/brush/brush/src/program/node.h" line="84" column="1" bodyfile="/home/runner/work/brush/brush/src/program/node.h" bodystart="84" bodyend="288"/>
    <listofallmembers>
      <member refid="d8/d49/structNode_1a237b9208864ace5209edca01623f6b1e" prot="public" virt="non-virtual"><scope>Node</scope><name>arg_types</name></member>
      <member refid="d8/d49/structNode_1a9ec6ba08b0baebc0cd105e4ef774b7fb" prot="public" virt="non-virtual"><scope>Node</scope><name>args_type</name></member>
      <member refid="d8/d49/structNode_1a0971012cfb2ae944f4bea0ea0dc9e5a3" prot="public" virt="non-virtual"><scope>Node</scope><name>center_op</name></member>
      <member refid="d8/d49/structNode_1ac5f37d638625468ed68de599a2a7d968" prot="public" virt="non-virtual"><scope>Node</scope><name>feature</name></member>
      <member refid="d8/d49/structNode_1a2875e5aa77054658c071f7b0d7103e68" prot="public" virt="non-virtual"><scope>Node</scope><name>feature_type</name></member>
      <member refid="d8/d49/structNode_1a32c73293ee4e02b6d828c2c213e06154" prot="public" virt="non-virtual"><scope>Node</scope><name>fixed</name></member>
      <member refid="d8/d49/structNode_1ac2f0913b7a3e238d879722eb7f62aee2" prot="public" virt="non-virtual"><scope>Node</scope><name>get_arg_count</name></member>
      <member refid="d8/d49/structNode_1a754e5efb828686e30ebfa2174d56e37a" prot="public" virt="non-virtual"><scope>Node</scope><name>get_arg_types</name></member>
      <member refid="d8/d49/structNode_1a85a62efd4f1f99fa45eb52e4c0a1a26f" prot="public" virt="non-virtual"><scope>Node</scope><name>get_feature</name></member>
      <member refid="d8/d49/structNode_1a5d3a467bbb0b2fa914594c735579926d" prot="public" virt="non-virtual"><scope>Node</scope><name>get_feature_type</name></member>
      <member refid="d8/d49/structNode_1a8d884d5ad5f6825aa8f50039fb6baf9f" prot="public" virt="non-virtual"><scope>Node</scope><name>get_is_weighted</name></member>
      <member refid="d8/d49/structNode_1a27183f178a41394fea61c7f5b1fdc751" prot="public" virt="non-virtual"><scope>Node</scope><name>get_keep_split_feature</name></member>
      <member refid="d8/d49/structNode_1af621eb9463a3ed3434841565a849c03b" prot="public" virt="non-virtual"><scope>Node</scope><name>get_model</name></member>
      <member refid="d8/d49/structNode_1aaddaf7903795dfdcad487234d6dc380e" prot="public" virt="non-virtual"><scope>Node</scope><name>get_name</name></member>
      <member refid="d8/d49/structNode_1a3365cec003572b3ea248bd6647437d73" prot="public" virt="non-virtual"><scope>Node</scope><name>get_node_hash</name></member>
      <member refid="d8/d49/structNode_1a4fcf7feccb71d538f8614d3c51247eb4" prot="public" virt="non-virtual"><scope>Node</scope><name>get_prob_change</name></member>
      <member refid="d8/d49/structNode_1a087a9c51b46b3e801506415376cd0518" prot="public" virt="non-virtual"><scope>Node</scope><name>get_prob_keep</name></member>
      <member refid="d8/d49/structNode_1a2d4b7a1f21f80ce980f4748432911964" prot="public" virt="non-virtual"><scope>Node</scope><name>get_ret_type</name></member>
      <member refid="d8/d49/structNode_1abd1037d20f96e122bc1305d70aab418a" prot="public" virt="non-virtual"><scope>Node</scope><name>HashTuple</name></member>
      <member refid="d8/d49/structNode_1a99e9db58c89646c630fb9d54b41ff2ba" prot="public" virt="non-virtual"><scope>Node</scope><name>init</name></member>
      <member refid="d8/d49/structNode_1ab72b791f57011a032c6c89238db85845" prot="public" virt="non-virtual"><scope>Node</scope><name>is_weighted</name></member>
      <member refid="d8/d49/structNode_1abee9ab1ef7eb2e12dcf45db1bbddf25a" prot="public" virt="non-virtual"><scope>Node</scope><name>keep_split_feature</name></member>
      <member refid="d8/d49/structNode_1ad6b3fd4a54c813d066370defc8a85af1" prot="public" virt="non-virtual"><scope>Node</scope><name>name</name></member>
      <member refid="d8/d49/structNode_1adcd17b2d50bd124218a1ed472369d461" prot="public" virt="non-virtual"><scope>Node</scope><name>Node</name></member>
      <member refid="d8/d49/structNode_1a62f7ba79b38e86e54488e5dd9a6bdc93" prot="public" virt="non-virtual"><scope>Node</scope><name>Node</name></member>
      <member refid="d8/d49/structNode_1a522791afe93c92442564356ff19ff55a" prot="public" virt="non-virtual"><scope>Node</scope><name>node_type</name></member>
      <member refid="d8/d49/structNode_1ac854a6c4b96a0524e1371397c6fba4b1" prot="public" virt="non-virtual"><scope>Node</scope><name>operator!=</name></member>
      <member refid="d8/d49/structNode_1aea5769142b80b211a53eb20d8a14507b" prot="public" virt="non-virtual"><scope>Node</scope><name>operator&lt;</name></member>
      <member refid="d8/d49/structNode_1a62ae8b64fc43f5f13d697c481efb6588" prot="public" virt="non-virtual"><scope>Node</scope><name>operator&lt;=</name></member>
      <member refid="d8/d49/structNode_1a7c46bb16fb006691be230d29b6e731fe" prot="public" virt="non-virtual"><scope>Node</scope><name>operator==</name></member>
      <member refid="d8/d49/structNode_1a6dabaf6f3fcd362ff8fbc9e0bd37756f" prot="public" virt="non-virtual"><scope>Node</scope><name>operator&gt;</name></member>
      <member refid="d8/d49/structNode_1aa020471209858e31cb4cf26453033929" prot="public" virt="non-virtual"><scope>Node</scope><name>operator&gt;=</name></member>
      <member refid="d8/d49/structNode_1a9f5b2e34d8ba752e0f6bffebec8afdc0" prot="public" virt="non-virtual"><scope>Node</scope><name>prob_change</name></member>
      <member refid="d8/d49/structNode_1a65b283648fe779d81ac11f9e4714d920" prot="public" virt="non-virtual"><scope>Node</scope><name>ret_type</name></member>
      <member refid="d8/d49/structNode_1a7e8460b645f3d58c3093eda1d5d3166c" prot="public" virt="non-virtual"><scope>Node</scope><name>set_feature</name></member>
      <member refid="d8/d49/structNode_1a9ceebb9b686a6f6784ae90c558385410" prot="public" virt="non-virtual"><scope>Node</scope><name>set_feature_type</name></member>
      <member refid="d8/d49/structNode_1a70fb9b583f72b67f6c24c2bbaae55267" prot="public" virt="non-virtual"><scope>Node</scope><name>set_is_weighted</name></member>
      <member refid="d8/d49/structNode_1a31f2f60b25fa6a8fa8f420070da2863d" prot="public" virt="non-virtual"><scope>Node</scope><name>set_keep_split_feature</name></member>
      <member refid="d8/d49/structNode_1ad9e4f8654978a40e8266b20a4bb0950f" prot="public" virt="non-virtual"><scope>Node</scope><name>set_prob_change</name></member>
      <member refid="d8/d49/structNode_1a24ab653c36833ab9cd301efe99b39d5f" prot="public" virt="non-virtual"><scope>Node</scope><name>set_signature</name></member>
      <member refid="d8/d49/structNode_1aed6c2af0fae3dd8e5a8aa2fab77479fd" prot="public" virt="non-virtual"><scope>Node</scope><name>sig_dual_hash</name></member>
      <member refid="d8/d49/structNode_1a889e0361b55a63a4510a3edabd2fa57c" prot="public" virt="non-virtual"><scope>Node</scope><name>sig_hash</name></member>
      <member refid="d8/d49/structNode_1ab719e64b13753515be49327d98bf2224" prot="public" virt="non-virtual"><scope>Node</scope><name>W</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
