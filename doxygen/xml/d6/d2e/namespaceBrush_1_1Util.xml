<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d6/d2e/namespaceBrush_1_1Util" kind="namespace" language="C++">
    <compoundname>Brush::Util</compoundname>
    <innerclass refid="db/d7e/structBrush_1_1Util_1_1Log__Stats" prot="public">Brush::Util::Log_Stats</innerclass>
    <innerclass refid="dd/d56/classBrush_1_1Util_1_1Logger" prot="public">Brush::Util::Logger</innerclass>
    <innerclass refid="d2/df8/structBrush_1_1Util_1_1Normalizer" prot="public">Brush::Util::Normalizer</innerclass>
    <innerclass refid="d2/d2d/classBrush_1_1Util_1_1Rnd" prot="public">Brush::Util::Rnd</innerclass>
    <innerclass refid="d8/da4/classBrush_1_1Util_1_1Timer" prot="public">Brush::Util::Timer</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d6/d2e/namespaceBrush_1_1Util_1adc1985a99c2dc32ac23e139322748380" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; std::type_index, T &gt;</type>
        <definition>using Brush::Util::TypeMap =  std::map&lt;std::type_index, T&gt;</definition>
        <argsstring></argsstring>
        <name>TypeMap</name>
        <qualifiedname>Brush::Util::TypeMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="175" column="1" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d2e/namespaceBrush_1_1Util_1a879344781baecb2119f7bde9bddd8660" prot="public" static="no">
        <type>struct <ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats" kindref="compound">Log_Stats</ref></type>
        <definition>typedef struct Log_Stats Brush::Util::Log_stats</definition>
        <argsstring></argsstring>
        <name>Log_stats</name>
        <qualifiedname>Brush::Util::Log_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="427" column="24" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="427" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d6/d2e/namespaceBrush_1_1Util_1aa6d49e22e6193fabd31fde261f607560" prot="public" static="yes" mutable="no">
        <type><ref refid="dd/d56/classBrush_1_1Util_1_1Logger" kindref="compound">Logger</ref> &amp;</type>
        <definition>Logger&amp; Brush::Util::logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <qualifiedname>Brush::Util::logger</qualifiedname>
        <initializer>= *<ref refid="dd/d56/classBrush_1_1Util_1_1Logger_1ab4dd486a1ab7322f72b4ccca66d61096" kindref="member">Logger::initLogger</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/logger.h" line="60" column="15" bodyfile="/home/runner/work/brush/brush/src/util/logger.h" bodystart="60" bodyend="-1"/>
        <referencedby refid="da/da3/classBrush_1_1Pop_1_1Population_1ad193aced6ffa6d3587f0f390d9ed0415" compoundref="d7/d4a/population_8cpp" startline="117" endline="134">Brush::Pop::Population&lt; T &gt;::load</referencedby>
        <referencedby refid="da/da3/classBrush_1_1Pop_1_1Population_1a760c5b3804c92d23da170e37ecae158a" compoundref="d7/d4a/population_8cpp" startline="101" endline="114">Brush::Pop::Population&lt; T &gt;::save</referencedby>
        <referencedby refid="de/deb/structBrush_1_1Parameters_1af232e2b8ac05a182b54437cbf03fc18c" compoundref="da/d33/params_8h" startline="99" endline="100">Brush::Parameters::set_verbosity</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d6/d2e/namespaceBrush_1_1Util_1af7dd70e54015821d96e3a1afed6344ca" prot="public" static="yes" mutable="no">
        <type><ref refid="d2/d2d/classBrush_1_1Util_1_1Rnd" kindref="compound">Rnd</ref> &amp;</type>
        <definition>Rnd&amp; Brush::Util::r</definition>
        <argsstring></argsstring>
        <name>r</name>
        <qualifiedname>Brush::Util::r</qualifiedname>
        <initializer>= *<ref refid="d2/d2d/classBrush_1_1Util_1_1Rnd_1a4fee4453f2aff1384cda4e14d53234fe" kindref="member">Rnd::initRand</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/rnd.h" line="174" column="16" bodyfile="/home/runner/work/brush/brush/src/util/rnd.h" bodystart="174" bodyend="-1"/>
        <referencedby refid="d5/d8a/namespaceBrush_1_1detail_1a947dcae654755bd0bb2afa43b5507a84" compoundref="dd/d1b/tiny__cost__function_8h" startline="24" endline="76">Brush::detail::Autodiff</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1ae6f99d35a8faa5a9c58793205677a49d" compoundref="d4/d1f/variation_8h" startline="621" endline="641">Brush::Var::Variation&lt; T &gt;::bandit_sample_op</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1afe4c2c76e93db4939a6a7396d7ca50a8" compoundref="d4/d1f/variation_8h" startline="577" endline="618">Brush::Var::Variation&lt; T &gt;::bandit_sample_op_with_arg</referencedby>
        <referencedby refid="da/dbf/bind__params_8cpp_1a686c1dac4334b78b765f556f3069f661" compoundref="da/dbf/bind__params_8cpp" startline="7" endline="68">bind_params</referencedby>
        <referencedby refid="dd/d41/classBrush_1_1MAB_1_1DummyBandit_1ac15d31141a0ef97ba83df190de1e5379" compoundref="d4/d05/dummy_8cpp" startline="12" endline="16">Brush::MAB::DummyBandit&lt; T &gt;::choose</referencedby>
        <referencedby refid="d1/d67/classBrush_1_1MAB_1_1LinearThompsonSamplingBandit_1ad714bc78451d66dcb7499c29463cffaf" compoundref="db/d2d/linear__thompson_8cpp" startline="87" endline="122">Brush::MAB::LinearThompsonSamplingBandit&lt; T &gt;::choose</referencedby>
        <referencedby refid="db/d10/classBrush_1_1MAB_1_1ThompsonSamplingBandit_1af6548c3f73eb04633654f9b190ab83b6" compoundref="d3/d12/thompson_8cpp" startline="81" endline="85">Brush::MAB::ThompsonSamplingBandit&lt; T &gt;::choose</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1a3034de2db34c5aa0f4316fd939650898" compoundref="d1/d64/variation_8cpp" startline="425" endline="523">Brush::Var::Variation&lt; T &gt;::cross</referencedby>
        <referencedby refid="d2/d36/classBrush_1_1Data_1_1Dataset_1a5020e43def6267598be0ba3d2b46e616" compoundref="da/dc9/data_8cpp" startline="170" endline="184">Brush::Data::Dataset::get_batch</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1ac51e5e0acb3a880ffd0f3b7fba2fd68f" compoundref="d9/d99/search__space_8h" startline="562" endline="581">Brush::SearchSpace::get_node_like</referencedby>
        <referencedby refid="d2/d36/classBrush_1_1Data_1_1Dataset_1aacd5afd19b9cee9d9d84e4290eeabb6f" compoundref="da/dc9/data_8cpp" startline="202" endline="317">Brush::Data::Dataset::init</referencedby>
        <referencedby refid="d0/d75/classBrush_1_1Engine_1abf9f9f0eec7c0c6d4cf9985d993e6018" compoundref="da/d5c/engine_8cpp" startline="16" endline="33">Brush::Engine&lt; T &gt;::init</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1a810403a87eef0baded2aed2bb4f1979e" compoundref="d9/d99/search__space_8h" startline="715" endline="801">Brush::SearchSpace::make_program</referencedby>
        <referencedby refid="d2/d84/structBrush_1_1Function_3_01NodeType_1_1Median_01_4_1ae43ba05c03d73ad8cbfcbf4d53caec58" compoundref="d8/d5c/functions_8h" startline="133" endline="139">Brush::Function&lt; NodeType::Median &gt;::median</referencedby>
        <referencedby refid="da/da3/classBrush_1_1Pop_1_1Population_1a450651324884449dbb76f32377bcb0fe" compoundref="d7/d4a/population_8cpp" startline="334" endline="430">Brush::Pop::Population&lt; T &gt;::migrate</referencedby>
        <referencedby refid="de/d23/classBrush_1_1Var_1_1SubtreeMutation_1af9c010fdbdd1049e2df276f7e08340dc" compoundref="d1/d64/variation_8cpp" startline="308" endline="347">Brush::Var::SubtreeMutation::mutate</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1a170852afd5b486b1d5dac0486ab98121" compoundref="d1/d64/variation_8cpp" startline="559" endline="680">Brush::Var::Variation&lt; T &gt;::mutate</referencedby>
        <referencedby refid="dc/d5c/namespaceBrush_1a819e6d35661a163c3f40d927766a3213" compoundref="d9/d99/search__space_8h" startline="705" endline="712">Brush::RandomDequeue</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a104f5440d54d751bac78c892b7022c71" compoundref="d5/d60/utils_8h" startline="738" endline="743">reverse_map</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1ab23bc4732e733749b8aa1e8c2c2689a2" compoundref="d9/d99/search__space_8h" startline="429" endline="457">Brush::SearchSpace::sample_op</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1a9aa8d90d79abb8a1e76270b80bbcab38" compoundref="d9/d99/search__space_8h" startline="463" endline="492">Brush::SearchSpace::sample_op</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1ad4ecbe9a8128d1a2b5aba0d5aeec686f" compoundref="d9/d99/search__space_8h" startline="500" endline="557">Brush::SearchSpace::sample_op_with_arg</referencedby>
        <referencedby refid="d1/d67/classBrush_1_1MAB_1_1LinearThompsonSamplingBandit_1ab34b8398265597de0bf6111cd6f4e2cf" compoundref="db/d2d/linear__thompson_8cpp" startline="47" endline="84">Brush::MAB::LinearThompsonSamplingBandit&lt; T &gt;::sample_probs</referencedby>
        <referencedby refid="db/d10/classBrush_1_1MAB_1_1ThompsonSamplingBandit_1a813db4fe639a36bf856aadb55c14a4da" compoundref="d3/d12/thompson_8cpp" startline="30" endline="78">Brush::MAB::ThompsonSamplingBandit&lt; T &gt;::sample_probs</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1afed4d42914edd71c4b54fc3883d8d156" compoundref="d9/d99/search__space_8h" startline="325" endline="382">Brush::SearchSpace::sample_terminal</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1a5bd06df519092dac780a09fcd4a36857" compoundref="d9/d99/search__space_8h" startline="386" endline="424">Brush::SearchSpace::sample_terminal</referencedby>
        <referencedby refid="d2/dd0/classBrush_1_1Sel_1_1Lexicase_1ab9f17cd2c4452b05c96a17bb6c105fc2" compoundref="d8/dac/lexicase_8cpp" startline="18" endline="170">Brush::Sel::Lexicase&lt; T &gt;::select</referencedby>
        <referencedby refid="d3/d7d/classBrush_1_1Sel_1_1NSGA2_1a53788b6bda8ce09f644e2cc44c9aa478" compoundref="de/d0d/nsga2_8cpp" startline="39" endline="66">Brush::Sel::NSGA2&lt; T &gt;::select</referencedby>
        <referencedby refid="d6/dd0/structBrush_1_1Fitness_1ab92c03b4eac43138dfd59484c7f0ccc7" compoundref="dc/d7a/fitness_8h" startline="99" endline="99">Brush::Fitness::set_rank</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1a344233ce053ca4b267539182fecbbc91" compoundref="d1/d64/variation_8cpp" startline="683" endline="769">Brush::Var::Variation&lt; T &gt;::vary</referencedby>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1a9655e67f642d72aa61452d1913c436cc" compoundref="d4/d1f/variation_8h" startline="225" endline="505">Brush::Var::Variation&lt; T &gt;::vary_and_update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d6/d2e/namespaceBrush_1_1Util_1afa1fde52ad1a13ccf861682c1d37896a" prot="public" static="no" mutable="no">
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>string Brush::Util::PBSTR</definition>
        <argsstring></argsstring>
        <name>PBSTR</name>
        <qualifiedname>Brush::Util::PBSTR</qualifiedname>
        <initializer>= &quot;====================&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="13" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="13" bodyend="-1" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="167" declcolumn="15"/>
        <referencedby refid="d0/d75/classBrush_1_1Engine_1a33590e9eed9490be52dc2eedbb5b0feb" compoundref="da/d5c/engine_8cpp" startline="36" endline="48">Brush::Engine&lt; T &gt;::print_progress</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d6/d2e/namespaceBrush_1_1Util_1afdf0a27a6e1782537f1d1751e1efde51" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Brush::Util::PBWIDTH</definition>
        <argsstring></argsstring>
        <name>PBWIDTH</name>
        <qualifiedname>Brush::Util::PBWIDTH</qualifiedname>
        <initializer>= 20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="14" column="5" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="14" bodyend="-1" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="169" declcolumn="12"/>
        <referencedby refid="d0/d75/classBrush_1_1Engine_1a33590e9eed9490be52dc2eedbb5b0feb" compoundref="da/d5c/engine_8cpp" startline="36" endline="48">Brush::Engine&lt; T &gt;::print_progress</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d6/d2e/namespaceBrush_1_1Util_1a739956e96c77117c32f45cdb30472652" prot="public" static="no" mutable="no">
        <type><ref refid="d6/d2e/namespaceBrush_1_1Util_1adc1985a99c2dc32ac23e139322748380" kindref="member">TypeMap</ref>&lt; std::string &gt;</type>
        <definition>TypeMap&lt; std::string &gt; Brush::Util::type_names</definition>
        <argsstring></argsstring>
        <name>type_names</name>
        <qualifiedname>Brush::Util::type_names</qualifiedname>
        <initializer>= {
        { typeid(int) , &quot;int&quot; },
        { typeid(float) , &quot;float&quot; },
        { typeid(bool) , &quot;bool&quot; },
        { typeid(ArrayXf) , &quot;ArrayXf&quot; },
        { typeid(<ref refid="dc/d5c/namespaceBrush_1ac5cd76eed6ea70d1c8f429ee37ca9fc0" kindref="member">ArrayXi</ref>) , &quot;ArrayXi&quot; },
        { typeid(<ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref>) , &quot;ArrayXb&quot; }
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="281" column="9" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="281" bodyend="288" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="176" declcolumn="16"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a3d3d6ff93c25e47eb7534665d7393c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Util::HandleErrorThrow</definition>
        <argsstring>(string err, const char *file, int line)</argsstring>
        <name>HandleErrorThrow</name>
        <qualifiedname>Brush::Util::HandleErrorThrow</qualifiedname>
        <param>
          <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
          <declname>err</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>prints error and throws an exception </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/error.cpp" line="13" column="14" bodyfile="/home/runner/work/brush/brush/src/util/error.cpp" bodystart="13" bodyend="22" declfile="/home/runner/work/brush/brush/src/util/error.h" declline="19" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a34871e8de1fd6eabc81121b1af030b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Util::HandleErrorNoThrow</definition>
        <argsstring>(string err, const char *file, int line)</argsstring>
        <name>HandleErrorNoThrow</name>
        <qualifiedname>Brush::Util::HandleErrorNoThrow</qualifiedname>
        <param>
          <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
          <declname>err</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>prints error to stderr and returns </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/error.cpp" line="25" column="14" bodyfile="/home/runner/work/brush/brush/src/util/error.cpp" bodystart="25" bodyend="28" declfile="/home/runner/work/brush/brush/src/util/error.h" declline="22" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a61817392e38bfbd623504cd8def55b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Util::clean</definition>
        <argsstring>(ArrayXf &amp;x)</argsstring>
        <name>clean</name>
        <qualifiedname>Brush::Util::clean</qualifiedname>
        <param>
          <type>ArrayXf &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>limits node output to be between MIN_FLT and MAX_FLT </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="17" column="6" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="17" bodyend="22" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="181" declcolumn="6"/>
        <references refid="d8/dc0/init_8h_1a0c86fe7dc09ca580e891580bf302e659" compoundref="d8/dc0/init_8h" startline="61">MAX_FLT</references>
        <references refid="d8/dc0/init_8h_1a8213bd26dbb943e499d0e227fa9b3159" compoundref="d8/dc0/init_8h" startline="62">MIN_FLT</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a3837fbd31ac81e3f8db8aaa399fda345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Brush::Util::ltrim</definition>
        <argsstring>(std::string str, const std::string &amp;chars)</argsstring>
        <name>ltrim</name>
        <qualifiedname>Brush::Util::ltrim</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="24" column="13" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="24" bodyend="28" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="183" declcolumn="13"/>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1ad7cd519e42ccafa3c6f4242a0c2b6749" compoundref="de/d06/utils_8cpp" startline="36" endline="39">trim</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a7ee435e912b43d1efe927860141fdafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Brush::Util::rtrim</definition>
        <argsstring>(std::string str, const std::string &amp;chars)</argsstring>
        <name>rtrim</name>
        <qualifiedname>Brush::Util::rtrim</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="30" column="13" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="30" bodyend="34" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="185" declcolumn="13"/>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1ad7cd519e42ccafa3c6f4242a0c2b6749" compoundref="de/d06/utils_8cpp" startline="36" endline="39">trim</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1ad7cd519e42ccafa3c6f4242a0c2b6749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Brush::Util::trim</definition>
        <argsstring>(std::string str, const std::string &amp;chars)</argsstring>
        <name>trim</name>
        <qualifiedname>Brush::Util::trim</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="36" column="13" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="36" bodyend="39" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="187" declcolumn="13"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1a3837fbd31ac81e3f8db8aaa399fda345" compoundref="de/d06/utils_8cpp" startline="24" endline="28">ltrim</references>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1a7ee435e912b43d1efe927860141fdafa" compoundref="de/d06/utils_8cpp" startline="30" endline="34">rtrim</references>
        <referencedby refid="d9/d1c/namespaceBrush_1_1Data_1ad4320ca3604e146155ccc7c55ea9006c" compoundref="d5/d5a/io_8cpp" startline="14" endline="88">Brush::Data::read_csv</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a20071cbe143ed15f50742b8b7b1bf725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; type_index &gt;</type>
        <definition>vector&lt; type_index &gt; Brush::Util::get_dtypes</definition>
        <argsstring>(MatrixXf &amp;X)</argsstring>
        <name>get_dtypes</name>
        <qualifiedname>Brush::Util::get_dtypes</qualifiedname>
        <param>
          <type>MatrixXf &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>calculates data types for each column of X </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="41" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="41" bodyend="82" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="330" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a313cbd04c33a2fe62b87977739337658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::condition_number</definition>
        <argsstring>(const MatrixXf &amp;X)</argsstring>
        <name>condition_number</name>
        <qualifiedname>Brush::Util::condition_number</qualifiedname>
        <param>
          <type>const MatrixXf &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>returns true for elements of x that are infinite </para>
        </briefdescription>
        <detaileddescription>
<para>returns the condition number of a matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="172" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="172" bodyend="197" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="386" declcolumn="7"/>
        <references refid="d8/dc0/init_8h_1a0c86fe7dc09ca580e891580bf302e659" compoundref="d8/dc0/init_8h" startline="61">MAX_FLT</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a1d2cb1b20c4767ecd0c4ee602b7cda55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXf</type>
        <definition>MatrixXf Brush::Util::corrcoef</definition>
        <argsstring>(const MatrixXf &amp;X)</argsstring>
        <name>corrcoef</name>
        <qualifiedname>Brush::Util::corrcoef</qualifiedname>
        <param>
          <type>const MatrixXf &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>returns the pearson correlation coefficients of matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="200" column="10" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="200" bodyend="216" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="389" declcolumn="10"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1a1d2cb1b20c4767ecd0c4ee602b7cda55" compoundref="de/d06/utils_8cpp" startline="200" endline="216">corrcoef</references>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a1d2cb1b20c4767ecd0c4ee602b7cda55" compoundref="de/d06/utils_8cpp" startline="200" endline="216">corrcoef</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a068c0960a6ac697bf70ff5dc762e96da" compoundref="de/d06/utils_8cpp" startline="219" endline="225">mean_square_corrcoef</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a068c0960a6ac697bf70ff5dc762e96da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::mean_square_corrcoef</definition>
        <argsstring>(const MatrixXf &amp;X)</argsstring>
        <name>mean_square_corrcoef</name>
        <qualifiedname>Brush::Util::mean_square_corrcoef</qualifiedname>
        <param>
          <type>const MatrixXf &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="219" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="219" bodyend="225" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="392" declcolumn="7"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1a1d2cb1b20c4767ecd0c4ee602b7cda55" compoundref="de/d06/utils_8cpp" startline="200" endline="216">corrcoef</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1afbb579185a6522b235c40136b5858851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Brush::Util::argmiddle</definition>
        <argsstring>(vector&lt; float &gt; &amp;v)</argsstring>
        <name>argmiddle</name>
        <qualifiedname>Brush::Util::argmiddle</qualifiedname>
        <param>
          <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the (first) index of the element with the middlest value in v </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="300" column="5" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="300" bodyend="315" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="395" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1ad88c0170839ba79e41dc5715e77abfc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::variance</definition>
        <argsstring>(const ArrayXf &amp;v)</argsstring>
        <name>variance</name>
        <qualifiedname>Brush::Util::variance</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>calculate variance </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="317" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="317" bodyend="320" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="225" declcolumn="7"/>
        <referencedby refid="d7/da9/namespaceBrush_1_1Split_1a34b904a04926a4b4280fb922618cfe19" compoundref="d4/d59/split_8cpp" startline="66" endline="91">Brush::Split::gain</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a647e7137bb014b8fb21cf0d9a985584b" compoundref="de/d06/utils_8cpp" startline="335" endline="344">kurtosis</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a3ecdd0fbfe8f46304f0b48992cf5726c" compoundref="de/d06/utils_8cpp" startline="366" endline="369">pearson_correlation</referencedby>
        <referencedby refid="d6/df2/classBrush_1_1Simpl_1_1Constants__simplifier_1a1967ec4e50c83b4a7890959d9f6e145f" compoundref="d2/d6f/constants_8h" startline="24" endline="84">Brush::Simpl::Constants_simplifier::simplify_tree</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a3a5e794811c2588fb5910b4d5b9abdcb" compoundref="de/d06/utils_8cpp" startline="323" endline="332">skew</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a26cf881c06b230990b810de739347b58" compoundref="de/d06/utils_8cpp" startline="359" endline="363">slope</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a3a5e794811c2588fb5910b4d5b9abdcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::skew</definition>
        <argsstring>(const ArrayXf &amp;v)</argsstring>
        <name>skew</name>
        <qualifiedname>Brush::Util::skew</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>calculate skew </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="323" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="323" bodyend="332" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="228" declcolumn="7"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1ad88c0170839ba79e41dc5715e77abfc8" compoundref="de/d06/utils_8cpp" startline="317" endline="320">variance</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a647e7137bb014b8fb21cf0d9a985584b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::kurtosis</definition>
        <argsstring>(const ArrayXf &amp;v)</argsstring>
        <name>kurtosis</name>
        <qualifiedname>Brush::Util::kurtosis</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>calculate kurtosis </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="335" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="335" bodyend="344" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="231" declcolumn="7"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1ad88c0170839ba79e41dc5715e77abfc8" compoundref="de/d06/utils_8cpp" startline="317" endline="320">variance</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1ae119a14eab4e4899608c4e766acf54c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::covariance</definition>
        <argsstring>(const ArrayXf &amp;x, const ArrayXf &amp;y)</argsstring>
        <name>covariance</name>
        <qualifiedname>Brush::Util::covariance</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>covariance of x and y </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="346" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="346" bodyend="357" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="234" declcolumn="7"/>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a3ecdd0fbfe8f46304f0b48992cf5726c" compoundref="de/d06/utils_8cpp" startline="366" endline="369">pearson_correlation</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a26cf881c06b230990b810de739347b58" compoundref="de/d06/utils_8cpp" startline="359" endline="363">slope</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a26cf881c06b230990b810de739347b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::slope</definition>
        <argsstring>(const ArrayXf &amp;x, const ArrayXf &amp;y)</argsstring>
        <name>slope</name>
        <qualifiedname>Brush::Util::slope</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>slope of x/y </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="359" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="359" bodyend="363" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="237" declcolumn="7"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1ae119a14eab4e4899608c4e766acf54c0" compoundref="de/d06/utils_8cpp" startline="346" endline="357">covariance</references>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1ad88c0170839ba79e41dc5715e77abfc8" compoundref="de/d06/utils_8cpp" startline="317" endline="320">variance</references>
        <referencedby refid="dc/d5c/namespaceBrush_1af6e4b7d5bbd50f46f8c96a356e19bdae" compoundref="da/d48/search__space_8cpp" startline="7" endline="44">Brush::calc_initial_weight</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a3ecdd0fbfe8f46304f0b48992cf5726c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::pearson_correlation</definition>
        <argsstring>(const ArrayXf &amp;x, const ArrayXf &amp;y)</argsstring>
        <name>pearson_correlation</name>
        <qualifiedname>Brush::Util::pearson_correlation</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>the normalized covariance of x and y </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="366" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="366" bodyend="369" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="240" declcolumn="7"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1ae119a14eab4e4899608c4e766acf54c0" compoundref="de/d06/utils_8cpp" startline="346" endline="357">covariance</references>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1ad88c0170839ba79e41dc5715e77abfc8" compoundref="de/d06/utils_8cpp" startline="317" endline="320">variance</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a27c00366227bc7afa5d057ca555f9e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::mad</definition>
        <argsstring>(const ArrayXf &amp;x)</argsstring>
        <name>mad</name>
        <qualifiedname>Brush::Util::mad</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>median absolute deviation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="373" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="373" bodyend="384" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="243" declcolumn="7"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1a4d848757d9123e0562a7d87b44f1bdc6" compoundref="d5/d60/utils_8h" startline="202" endline="219">median</references>
        <referencedby refid="d2/dd0/classBrush_1_1Sel_1_1Lexicase_1ab9f17cd2c4452b05c96a17bb6c105fc2" compoundref="d8/dac/lexicase_8cpp" startline="18" endline="170">Brush::Sel::Lexicase&lt; T &gt;::select</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a0a7a059e331be3f8f7e5d1e0f1123f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Brush::Util::ReplaceString</definition>
        <argsstring>(std::string subject, const std::string &amp;search, const std::string &amp;replace)</argsstring>
        <name>ReplaceString</name>
        <qualifiedname>Brush::Util::ReplaceString</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>search</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replace</declname>
        </param>
        <briefdescription>
<para>find and replace string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="387" column="13" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="387" bodyend="396" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="376" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1aa1982ec999d497f97eed7572863a58fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush::Util::ReplaceStringInPlace</definition>
        <argsstring>(std::string &amp;subject, const std::string &amp;search, const std::string &amp;replace)</argsstring>
        <name>ReplaceStringInPlace</name>
        <qualifiedname>Brush::Util::ReplaceStringInPlace</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>search</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replace</declname>
        </param>
        <briefdescription>
<para>string find and replace in place </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="398" column="6" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="398" bodyend="406" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="380" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1afc397ee448b473fec9502461f3e75eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; size_t &gt;</type>
        <definition>vector&lt; size_t &gt; Brush::Util::mask_to_index</definition>
        <argsstring>(const ArrayXb &amp;mask)</argsstring>
        <name>mask_to_index</name>
        <qualifiedname>Brush::Util::mask_to_index</qualifiedname>
        <param>
          <type>const <ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>convert a boolean mask to an index array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="409" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="409" bodyend="419" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="487" declcolumn="8"/>
        <referencedby refid="d2/d36/classBrush_1_1Data_1_1Dataset_1ade5da9269ebc099385d6f79cf4a53f9f" compoundref="da/dc9/data_8cpp" startline="186" endline="195">Brush::Data::Dataset::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a43f8d9d4ac086fe1166492d0751eb2db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>tuple&lt; <ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; size_t &gt;, <ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; size_t &gt; &gt;</type>
        <definition>tuple&lt; vector&lt; size_t &gt;, vector&lt; size_t &gt; &gt; Brush::Util::mask_to_indices</definition>
        <argsstring>(const ArrayXb &amp;mask)</argsstring>
        <name>mask_to_indices</name>
        <qualifiedname>Brush::Util::mask_to_indices</qualifiedname>
        <param>
          <type>const <ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>returns 2 indices: first where mask is true, and second where mask is false. </para>
        </briefdescription>
        <detaileddescription>
<para>convert a boolean mask into true and false index arrays </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.cpp" line="421" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.cpp" bodystart="421" bodyend="432" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="489" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1ab03528e8d9652013786252f63b6d5840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Brush::Util::in</definition>
        <argsstring>(const V &amp;v, const T &amp;i)</argsstring>
        <name>in</name>
        <qualifiedname>Brush::Util::in</qualifiedname>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>check if element is in vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="192" column="6" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="192" bodyend="195"/>
        <referencedby refid="d5/d14/classBrush_1_1Var_1_1Variation_1afe4c2c76e93db4939a6a7396d7ca50a8" compoundref="d4/d1f/variation_8h" startline="577" endline="618">Brush::Var::Variation&lt; T &gt;::bandit_sample_op_with_arg</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1a35d500d78521e7fe880349c8006e55c7" compoundref="d9/d99/search__space_8h" startline="620" endline="635">Brush::SearchSpace::CreateNode</referencedby>
        <referencedby refid="da/da3/classBrush_1_1Pop_1_1Population_1a8c4ce8e8bd8cedecb3d0ef621aad9d22" compoundref="d7/d4a/population_8cpp" startline="62" endline="98">Brush::Pop::Population&lt; T &gt;::init</referencedby>
        <referencedby refid="da/da3/classBrush_1_1Pop_1_1Population_1a46922ab810383db1271d700e03005962" compoundref="d7/d4a/population_8cpp" startline="18" endline="59">Brush::Pop::Population&lt; T &gt;::init</referencedby>
        <referencedby refid="d4/dc3/structBrush_1_1SearchSpace_1ad4ecbe9a8128d1a2b5aba0d5aeec686f" compoundref="d9/d99/search__space_8h" startline="500" endline="557">Brush::SearchSpace::sample_op_with_arg</referencedby>
        <referencedby refid="d1/d30/structBrush_1_1Pop_1_1Archive_1a073b0ac31fc55c35e2a8296b919c1876" compoundref="d7/d05/archive_8cpp" startline="10" endline="16">Brush::Pop::Archive&lt; T &gt;::set_objectives</referencedby>
        <referencedby refid="dd/d0f/structBrush_1_1Sel_1_1Selection_1a6c1d8ad202376074ffaf3a64de74a711" compoundref="df/dbb/selection_8cpp" startline="47" endline="47">Brush::Sel::Selection&lt; T &gt;::set_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a4d848757d9123e0562a7d87b44f1bdc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Scalar</type>
            <defval>T::Scalar</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d5c/namespaceBrush_1a5b9f71c99a1fe42d359ae45033b58620" kindref="member">Scalar</ref></type>
        <definition>Scalar Brush::Util::median</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>median</name>
        <qualifiedname>Brush::Util::median</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>calculate median </para>
        </briefdescription>
        <detaileddescription>
<para>calculate median </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="202" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="202" bodyend="219"/>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a27c00366227bc7afa5d057ca555f9e12" compoundref="de/d06/utils_8cpp" startline="373" endline="384">mad</referencedby>
        <referencedby refid="d7/d56/structBrush_1_1Data_1_1TimeSeries_1ae3c8babca545b4cb131aa6ec8f039ac3" compoundref="d9/df7/timeseries_8h" startline="131" endline="131">Brush::Data::TimeSeries&lt; bool &gt;::median</referencedby>
        <referencedby refid="d2/d84/structBrush_1_1Function_3_01NodeType_1_1Median_01_4_1a226a9b29496d0d09fb55055ca23a3c86" compoundref="d8/d5c/functions_8h" startline="142" endline="145">Brush::Function&lt; NodeType::Median &gt;::median</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a95368f7dc6c9ced55ce63b8c5f27a3ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Brush::Util::variance</definition>
        <argsstring>(const ArrayXf &amp;v, float mean)</argsstring>
        <name>variance</name>
        <qualifiedname>Brush::Util::variance</qualifiedname>
        <param>
          <type>const ArrayXf &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
<para>calculate variance when mean provided </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="222" column="7" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="222" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a3a18a9ccd426286d474e8507adee1025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; size_t &gt;</type>
        <definition>vector&lt; size_t &gt; Brush::Util::argsort</definition>
        <argsstring>(const vector&lt; T &gt; &amp;v, bool ascending=true)</argsstring>
        <name>argsort</name>
        <qualifiedname>Brush::Util::argsort</qualifiedname>
        <param>
          <type>const <ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>return indices that sort a vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="247" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="247" bodyend="266"/>
        <referencedby refid="d5/db3/namespaceBrush_1_1Eval_1a473e918fd1efdc6d5f91c65cd8ce3db4" compoundref="dd/da2/metrics_8cpp" startline="124" endline="199">Brush::Eval::average_precision_score</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a49fa99aae6db3940dee2bca4e6358309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt; T &gt; Brush::Util::softmax</definition>
        <argsstring>(const vector&lt; T &gt; &amp;w)</argsstring>
        <name>softmax</name>
        <qualifiedname>Brush::Util::softmax</qualifiedname>
        <param>
          <type>const <ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>return the softmax transformation of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="296" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="296" bodyend="309"/>
        <referencedby refid="d3/def/structBrush_1_1Function_3_01NodeType_1_1Softmax_01_4_1a973c465137ea44720d1ba0f16463f265" compoundref="d8/d5c/functions_8h" startline="423" endline="426">Brush::Function&lt; NodeType::Softmax &gt;::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt; T &gt; Brush::Util::unique</definition>
        <argsstring>(vector&lt; T &gt; w)</argsstring>
        <name>unique</name>
        <qualifiedname>Brush::Util::unique</qualifiedname>
        <param>
          <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns unique elements in vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="334" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="334" bodyend="341"/>
        <referencedby refid="de/deb/structBrush_1_1Parameters_1a2601b9ce7184a0bc7b58efe8f477e178" compoundref="da/d33/params_8h" startline="199" endline="217">Brush::Parameters::set_n_classes</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1ab1b4143c76ac0fdd7bf92e09472d3921" compoundref="d5/d60/utils_8h" startline="361" endline="365">unique</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1af0c04b529ce6c3ee0a0c53dacd890aa4" compoundref="d5/d60/utils_8h" startline="345" endline="349">unique</referencedby>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a4e939b6a15272c8db696bac9fd1a3cee" compoundref="d5/d60/utils_8h" startline="353" endline="357">unique</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1af0c04b529ce6c3ee0a0c53dacd890aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt; T &gt; Brush::Util::unique</definition>
        <argsstring>(Matrix&lt; T, -1, -1 &gt; w)</argsstring>
        <name>unique</name>
        <qualifiedname>Brush::Util::unique</qualifiedname>
        <param>
          <type>Matrix&lt; T, -1, -1 &gt;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns unique elements in Eigen matrix of variable rows/cols </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="345" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="345" bodyend="349"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" compoundref="d5/d60/utils_8h" startline="334" endline="341">unique</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a4e939b6a15272c8db696bac9fd1a3cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt; T &gt; Brush::Util::unique</definition>
        <argsstring>(Matrix&lt; T, -1, 1 &gt; w)</argsstring>
        <name>unique</name>
        <qualifiedname>Brush::Util::unique</qualifiedname>
        <param>
          <type>Matrix&lt; T, -1, 1 &gt;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns unique elements in Eigen vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="353" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="353" bodyend="357"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" compoundref="d5/d60/utils_8h" startline="334" endline="341">unique</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1ab1b4143c76ac0fdd7bf92e09472d3921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt; T &gt; Brush::Util::unique</definition>
        <argsstring>(Array&lt; T, -1, 1 &gt; w)</argsstring>
        <name>unique</name>
        <qualifiedname>Brush::Util::unique</qualifiedname>
        <param>
          <type>Array&lt; T, -1, 1 &gt;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns unique elements in 1d Eigen array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="361" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="361" bodyend="365"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1abbcdb6fb60bd2927a57691262f14420a" compoundref="d5/d60/utils_8h" startline="334" endline="341">unique</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a9cd8004de7aab46b7a06f27d440064ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d92/classstring" kindref="compound">string</ref></type>
        <definition>string Brush::Util::to_string</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>to_string</name>
        <qualifiedname>Brush::Util::to_string</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>template function to convert objects to string for logging </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="369" column="8" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="369" bodyend="374"/>
        <referencedby refid="d8/df7/bind__variation_8h_1aa00827ef4bd73eeb7c3e30717bf91a74" compoundref="d8/df7/bind__variation_8h" startline="32" endline="88">bind_variation</referencedby>
        <referencedby refid="d2/d36/classBrush_1_1Data_1_1Dataset_1aa09045b1736581575ec928a7eba7dd98" compoundref="da/dc9/data_8cpp" startline="390" endline="438">Brush::Data::Dataset::copy_and_make_features</referencedby>
        <referencedby refid="da/da3/classBrush_1_1Pop_1_1Population_1a46922ab810383db1271d700e03005962" compoundref="d7/d4a/population_8cpp" startline="18" endline="59">Brush::Pop::Population&lt; T &gt;::init</referencedby>
        <referencedby refid="da/da3/classBrush_1_1Pop_1_1Population_1ad193aced6ffa6d3587f0f390d9ed0415" compoundref="d7/d4a/population_8cpp" startline="117" endline="134">Brush::Pop::Population&lt; T &gt;::load</referencedby>
        <referencedby refid="d5/db3/namespaceBrush_1_1Eval_1ab4118142943e05c08bdd5e5ad62d9127" compoundref="dd/da2/metrics_8cpp" startline="17" endline="40">Brush::Eval::log_loss</referencedby>
        <referencedby refid="d2/d36/classBrush_1_1Data_1_1Dataset_1aa9e841d2f28f1466b82428dddba49227" compoundref="da/dc9/data_8cpp" startline="326" endline="387">Brush::Data::Dataset::make_features</referencedby>
        <referencedby refid="d0/d75/classBrush_1_1Engine_1ac70f5fca40a2a058b187e579a7910ab3" compoundref="da/d5c/engine_8cpp" startline="246" endline="274">Brush::Engine&lt; T &gt;::predict_archive</referencedby>
        <referencedby refid="d0/d75/classBrush_1_1Engine_1ac1f6620adc2dd0710a415a7e48b76650" compoundref="da/d5c/engine_8cpp" startline="286" endline="314">Brush::Engine&lt; T &gt;::predict_proba_archive</referencedby>
        <referencedby refid="da/da3/classBrush_1_1Pop_1_1Population_1a92f851fffa86280c36cd54a8f670466e" compoundref="d7/d4a/population_8cpp" startline="219" endline="236">Brush::Pop::Population&lt; T &gt;::print_models</referencedby>
        <referencedby refid="d6/dd0/structBrush_1_1Fitness_1a4bec036d5b4fa2acc82b2e934183a45c" compoundref="dc/d7a/fitness_8h" startline="217" endline="226">Brush::Fitness::repr</referencedby>
        <referencedby refid="d6/dd0/structBrush_1_1Fitness_1a6253406e0ac28947766a5f5afbb721e1" compoundref="dc/d7a/fitness_8h" startline="204" endline="214">Brush::Fitness::toString</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a1c021ad5313b593be72b58625134104f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Brush::Util::NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</definition>
        <argsstring>(Log_Stats, generation, time, best_score, best_score_v, med_score, med_score_v, med_size, med_complexity, max_size, max_complexity)</argsstring>
        <name>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</name>
        <qualifiedname>Brush::Util::NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</qualifiedname>
        <param>
          <type><ref refid="db/d7e/structBrush_1_1Util_1_1Log__Stats" kindref="compound">Log_Stats</ref></type>
        </param>
        <param>
          <type>generation</type>
        </param>
        <param>
          <type>time</type>
        </param>
        <param>
          <type>best_score</type>
        </param>
        <param>
          <type>best_score_v</type>
        </param>
        <param>
          <type>med_score</type>
        </param>
        <param>
          <type>med_score_v</type>
        </param>
        <param>
          <type>med_size</type>
        </param>
        <param>
          <type>med_complexity</type>
        </param>
        <param>
          <type>max_size</type>
        </param>
        <param>
          <type>max_complexity</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="429" column="1" declfile="/home/runner/work/brush/brush/src/util/utils.h" declline="429" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a752c4caf35aeeb0e2c354ea7bc952eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_scalar_v&lt; T &gt;, T &gt;</type>
        <definition>std::enable_if_t&lt; std::is_scalar_v&lt; T &gt;, T &gt; Brush::Util::limited</definition>
        <argsstring>(T x)</argsstring>
        <name>limited</name>
        <qualifiedname>Brush::Util::limited</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>limits the output to finite real numbers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="447" column="1" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="447" bodyend="457"/>
        <references refid="d8/dc0/init_8h_1a0c86fe7dc09ca580e891580bf302e659" compoundref="d8/dc0/init_8h" startline="61">MAX_FLT</references>
        <references refid="d8/dc0/init_8h_1a8213bd26dbb943e499d0e227fa9b3159" compoundref="d8/dc0/init_8h" startline="62">MIN_FLT</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a061629dafeb96a99b68d4c430838dc72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_base_of_v&lt; Eigen::ArrayBase&lt; T &gt;, T &gt;, T &gt;</type>
        <definition>std::enable_if_t&lt; std::is_base_of_v&lt; Eigen::ArrayBase&lt; T &gt;, T &gt;, T &gt; Brush::Util::limited</definition>
        <argsstring>(T x)</argsstring>
        <name>limited</name>
        <qualifiedname>Brush::Util::limited</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="461" column="1" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="461" bodyend="467"/>
        <references refid="d8/dc0/init_8h_1a0c86fe7dc09ca580e891580bf302e659" compoundref="d8/dc0/init_8h" startline="61">MAX_FLT</references>
        <references refid="d8/dc0/init_8h_1a8213bd26dbb943e499d0e227fa9b3159" compoundref="d8/dc0/init_8h" startline="62">MIN_FLT</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a23d6d2f736db6e9d84cc27b58cc3bf27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Brush::Util::reorder</definition>
        <argsstring>(vector&lt; T &gt; &amp;v, vector&lt; int &gt; const &amp;order)</argsstring>
        <name>reorder</name>
        <qualifiedname>Brush::Util::reorder</qualifiedname>
        <param>
          <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; int &gt; const &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="470" column="6" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="470" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a8a14946733d9059bad0379e7666a3699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d41/classarray" kindref="compound">array</ref>&lt; Array&lt; T,-1, 1 &gt;, 2 &gt;</type>
        <definition>array&lt; Array&lt; T,-1, 1 &gt;, 2 &gt; Brush::Util::split</definition>
        <argsstring>(const Array&lt; T,-1, 1 &gt; &amp;v, const ArrayXb &amp;mask)</argsstring>
        <name>split</name>
        <qualifiedname>Brush::Util::split</qualifiedname>
        <param>
          <type>const Array&lt; T,-1, 1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d5c/namespaceBrush_1a1c0079df772d6e050857327591514810" kindref="member">ArrayXb</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>split Eigen matrix or array into two by mask </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="496" column="7" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="496" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a0fca88a717680a76c4b7b9b082675f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::range</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Brush::Util::print</definition>
        <argsstring>(T t)</argsstring>
        <name>print</name>
        <qualifiedname>Brush::Util::print</qualifiedname>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>prints comma delimited container contents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="523" column="6" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="523" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1ac697e701ef641df7a4cff481c667c9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Vector</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Brush::Util::unique_insert</definition>
        <argsstring>(Vector &amp;v, const T &amp;t)</argsstring>
        <name>unique_insert</name>
        <qualifiedname>Brush::Util::unique_insert</qualifiedname>
        <param>
          <type>Vector &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>unique insertion into a vector. allows a vector to be used like a set. source: <ulink url="http://www.lafstern.org/matt/col1.pdf">http://www.lafstern.org/matt/col1.pdf</ulink> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="670" column="6" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="670" bodyend="675"/>
        <referencedby refid="d2/d36/classBrush_1_1Data_1_1Dataset_1aacd5afd19b9cee9d9d84e4290eeabb6f" compoundref="da/dc9/data_8cpp" startline="202" endline="317">Brush::Data::Dataset::init</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a75d33dae3c8a1a36b1ef5f889d815d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Indices</declname>
            <defname>Indices</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Brush::Util::vectorToTupleHelper</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v, std::index_sequence&lt; Indices... &gt;)</argsstring>
        <name>vectorToTupleHelper</name>
        <qualifiedname>Brush::Util::vectorToTupleHelper</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Indices... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="680" column="6" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="680" bodyend="682"/>
        <referencedby refid="d6/d2e/namespaceBrush_1_1Util_1a7a0a0b4f0cab1c690fc54ea9126e6814" compoundref="d5/d60/utils_8h" startline="685" endline="688">vectorToTuple</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a7a0a0b4f0cab1c690fc54ea9126e6814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Brush::Util::vectorToTuple</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>vectorToTuple</name>
        <qualifiedname>Brush::Util::vectorToTuple</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="685" column="6" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="685" bodyend="688"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1a75d33dae3c8a1a36b1ef5f889d815d6e" compoundref="d5/d60/utils_8h" startline="680" endline="682">vectorToTupleHelper</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a1381c5883d1216248a82c6aafdceb944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>R Brush::Util::apply</definition>
        <argsstring>(const std::function&lt; R(Args...)&gt; &amp;f, const vector&lt; Arg &gt; &amp;inputs)</argsstring>
        <name>apply</name>
        <qualifiedname>Brush::Util::apply</qualifiedname>
        <param>
          <type>const std::function&lt; R(Args...)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; Arg &gt; &amp;</type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="691" column="3" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="691" bodyend="723"/>
        <references refid="da/d41/error_8h_1aa4c550bcd71e4ec1c97b111e1360509a" compoundref="da/d41/error_8h" startline="27">HANDLE_ERROR_THROW</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1abbfd3f4b029bb0b27ba4746f12726df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; Brush::Util::slice</definition>
        <argsstring>(const vector&lt; T &gt; &amp;v, const U &amp;idx)</argsstring>
        <name>slice</name>
        <qualifiedname>Brush::Util::slice</qualifiedname>
        <param>
          <type>const <ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="726" column="13" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="726" bodyend="734"/>
        <referencedby refid="d7/d56/structBrush_1_1Data_1_1TimeSeries_1af1ff3934c359ca5bd910a61fe083d5ce" compoundref="d9/df7/timeseries_8h" startline="45" endline="50">Brush::Data::TimeSeries&lt; bool &gt;::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1a104f5440d54d751bac78c892b7022c71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d28/classmap" kindref="compound">map</ref>&lt; V, K &gt;</type>
        <definition>static map&lt; V, K &gt; Brush::Util::reverse_map</definition>
        <argsstring>(const map&lt; K, V &gt; &amp;m)</argsstring>
        <name>reverse_map</name>
        <qualifiedname>Brush::Util::reverse_map</qualifiedname>
        <param>
          <type>const <ref refid="d9/d28/classmap" kindref="compound">map</ref>&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Given a map from keys to values, creates a new map from values to keys. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="738" column="12" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="738" bodyend="743"/>
        <references refid="d6/d2e/namespaceBrush_1_1Util_1af7dd70e54015821d96e3a1afed6344ca" compoundref="d2/da9/rnd_8h" startline="174">r</references>
      </memberdef>
      <memberdef kind="function" id="d6/d2e/namespaceBrush_1_1Util_1af874ef4c659cfb3cb52fa8032f531beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream &amp; Brush::Util::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Brush::Util::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="d7/dfc/classvector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/brush/brush/src/util/utils.h" line="746" column="1" bodyfile="/home/runner/work/brush/brush/src/util/utils.h" bodystart="746" bodyend="759"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>namespace containing various utility functions </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/brush/brush/src/util/error.cpp" line="11" column="15"/>
  </compounddef>
</doxygen>
